{"version":3,"sources":["assets/logo.png","assets/38155584462_74d5f1cc1d_b.jpg","assets/image-384.png","redux-saga/actions.ts","global.ts","utils/cookies.ts","redux-saga/reducers.ts","utils/socketApi.ts","redux-saga/global-reducers/CurrentPage.ts","components/BracketBoard/reducers.ts","components/BracketTeam/reducers.ts","screens/Login/reducers.ts","screens/UserInfo/reducers.ts","screens/SignUp/reducers.ts","screens/ForgotPassword/reducers.ts","screens/TournamentInfo/reducers.ts","redux-saga/global-reducers/IsUsernameExisted-reducer.ts","redux-saga/global-reducers/IsEmailExisted-reducer.ts","components/UserInfoTournament/reducers.ts","components/AllTournaments/reducers.ts","components/Teams/reducers.ts","components/CompetitionsSetting/reducers.ts","screens/ActiveAccount/reducers.ts","redux-saga/global-reducers/GlobalSearchString-reducer.ts","components/AllUsers/reducers.ts","screens/CompetitionInfo/reducers.ts","components/BracketRank/reducers.ts","components/BracketMatch/reducers.ts","config.ts","utils/history.ts","redux-saga/sagas/Login/login.ts","redux-saga/sagas/SignUp/signUp.ts","redux-saga/sagas/Common/ShowNotification.tsx","redux-saga/sagas/BracketBoard/queryBracketBoardInfo.ts","redux-saga/sagas/QueryUserInfo/queryUserInfo.ts","redux-saga/sagas/LogOut/logOut.ts","redux-saga/sagas/QueryTournamentInfo/queryTournamentInfo.ts","redux-saga/sagas/IsUsernameExisted/isUsernameExisted.ts","redux-saga/sagas/QueryListTournamentsOfUser/queryListTournamentsOfUser.ts","redux-saga/sagas/QueryListTeams/queryListTeams.ts","redux-saga/sagas/CreateNewTournament/createNewTournament.ts","redux-saga/sagas/EditUserInfo/editUserInfo.ts","redux-saga/sagas/EditTournamentInfo/editTournamentInfo.ts","redux-saga/sagas/QueryListCompetitionOfTournament/queryListCompetitionOfTournament.ts","redux-saga/sagas/AddACompetition/addACompetition.ts","redux-saga/sagas/IsEmailExisted/isEmailExisted.ts","redux-saga/sagas/QueryListTournament/queryListTournaments.ts","redux-saga/sagas/QueryListPlayerOfTeam/queryListPlayerOfTeam.ts","redux-saga/sagas/ActiveAccount/activeAccount.ts","redux-saga/sagas/SearchTournaments/searchTournament.ts","redux-saga/sagas/UpdateBackground/updateBackground.ts","redux-saga/sagas/QueryListUsers/queryListUsers.ts","redux-saga/sagas/SearchUsers/searchUsers.ts","redux-saga/sagas/UpdateAvatar/updateAvatar.ts","redux-saga/sagas/QuerySportsByTournament/querySportsByTournament.ts","redux-saga/sagas/QueryCompetitionsBySportAndTournament/queryCompetitionsBySportAndTournament.ts","redux-saga/sagas/AddATeamToCompetition/addATeamToCompetition.ts","redux-saga/sagas/UpdateAvatarTournament/updateAvatarTournament.ts","redux-saga/sagas/UpdateBackgroundTournament/updateBackgroundTournament.ts","redux-saga/sagas/AddListTeamSelecting/addListTeamSelecting.ts","redux-saga/sagas/SwapTwoTeamInBracket/swapTwoTeamInBracket.ts","redux-saga/sagas/DeleteListSelectingTeam/deleteListSelectingTeam.ts","redux-saga/sagas/QueryCompetitionInfo/queryCompetitionInfo.ts","redux-saga/sagas/QueryAllSports/queryAllSports.ts","redux-saga/sagas/QuerySportInfo/querySportInfo.ts","redux-saga/sagas/EditTeam/editTeam.ts","redux-saga/sagas/QueryFinalStageSetting/queryFinalStageSetting.ts","redux-saga/sagas/QueryGroupStageSetting/queryGroupStageSetting.ts","redux-saga/sagas/QueryAllFormat/queryAllFormat.ts","redux-saga/sagas/EditCompetition/editCompetition.ts","redux-saga/sagas/EditFinalStageSetting/editFinalStageSetting.ts","redux-saga/sagas/EditGroupStageSetting/editGroupStageSetting.ts","redux-saga/sagas/CreateAFinalStageSetting/createAFinalStageSetting.ts","redux-saga/sagas/CreateAGroupStageSetting/createAGroupStageSetting.ts","redux-saga/sagas/UpdateSchedule/updateSchedule.ts","redux-saga/sagas/BracketRank/queryBracketRankInfo.ts","redux-saga/sagas/DeleteCompetition/deleteCompetition.ts","redux-saga/sagas/StartTournament/startTournament.ts","redux-saga/sagas/GetMatchResult/getMatchResult.ts","redux-saga/sagas.ts","redux-saga/store.ts","components/TextInput/index.tsx","screens/Login/index.tsx","screens/Login/actions.ts","redux-saga/global-actions/CheckUsernameExisted-action.ts","screens/SignUp/index.tsx","screens/SignUp/actions.ts","redux-saga/global-actions/CheckEmailExisted-action.ts","screens/ForgotPassword/index.tsx","screens/ForgotPassword/actions.ts","screens/Home/index.tsx","components/BracketTeam/actions.ts","components/CustomTab/index.tsx","components/CustomModal/index.tsx","components/TournamentListTeam/index.tsx","utils/datetime.ts","components/TournamentSetting/reducers.ts","components/TournamentSetting/index.tsx","components/TournamentSetting/actions.ts","components/CompetitionSettingCompetitionsItem/index.tsx","components/CompetitionSettingCompetitionsItem/actions.ts","components/CompetitionSettingCompetitionsItem/reducers.ts","components/CompetitionSettingCompetitionsAddItem/index.tsx","screens/CompetitionInfo/actions.ts","components/CompetitionsSetting/actions.ts","components/CompetitionsSetting/index.tsx","components/Player/index.tsx","screens/TournamentInfo/actions.ts","screens/TournamentInfo/index.tsx","redux-saga/global-actions/SetGlobalSearchString-actions.ts","components/Header/actions.ts","components/Header/index.tsx","components/Content/index.tsx","components/UserInfoOverview/index.tsx","components/TournamentOverview/index.tsx","components/Paging/index.tsx","components/UserInfoTournament/index.tsx","components/UserInfoTournament/actions.ts","screens/UserInfo/actions.ts","screens/UserInfo/index.tsx","utils/common.ts","screens/ChangePassword/index.tsx","screens/ChangePassword/reducers.ts","screens/ChangePassword/actions.ts","components/AllTournaments/index.tsx","components/AllTournaments/actions.ts","screens/CreateNewTournament/index.tsx","screens/CreateNewTournament/actions.ts","screens/CreateNewTournament/reducers.ts","screens/ActiveAccount/index.tsx","screens/ActiveAccount/actions.ts","components/BracketTeam/index.tsx","components/MatchDetail/index.tsx","components/SheetData/index.tsx","components/MatchSetting/index.tsx","components/BracketMatch/actions.ts","components/BracketMatch/index.tsx","components/BracketRound/index.tsx","components/Teams/actions.ts","components/BracketBoard/actions.ts","components/BracketBoard/index.tsx","components/UserInfoTeamsItem/index.tsx","components/UserInfoTeamsItem/actions.ts","components/UserInfoTeamsItem/reducers.ts","components/Teams/index.tsx","components/BracketSchedule/index.tsx","components/BracketRank/index.tsx","components/BracketRank/actions.ts","screens/CompetitionInfo/index.tsx","components/UserOverview/index.tsx","components/AllUsers/index.tsx","components/AllUsers/actions.ts","App.tsx","serviceWorker.ts","index.tsx","assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png"],"names":["module","exports","COMMON_SHOW_NOTIFICATION","COOKIES_TYPE","cookies","Cookies","METHOD","appReducer","combineReducers","currentPage","state","action","type","payload","bracketBoardInfo","hoveringTeam","bracketStartedStatus","currentUserInfo","get","AUTH_TOKEN","User","userInfo","signUp","forgotPassword","tournamentInfo","isUsernameExisted","isEmailExisted","listTournamentOfUser","listTournament","listTeam","allCompetitionByTournamentId","activeAccountStatus","globalSearchString","listSportsByTournament","listUsers","listCompetitionsBySportAndTournament","editBracketMode","listTeamSelecting","competitionInfo","allSports","sportInfo","groupStageSetting","finalStageSetting","allFormats","newCompetition","bracketRankInfo","matchResult","config","apiUrl","baseURI","tradeX","domain","regex","password","username","email","phoneNumber","number","orderPasswordKBSV","query","uri","method","a","data","params","path","baseUrl","realUrl","Promise","resolve","reject","POST","axios","post","headers","Authentication","then","response","console","log","catch","error","PUT","put","GET","DELETE","delete","createHistory","doLogin","watchLogin","login","param","datas","paths","request","call","result","MessageCode","success","set","history","push","Message","Error","remove","title","content","time","Date","failed","takeLatest","doSignUp","watchSignUp","watchShowNotification","doShowNotification","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","err","doQueryBracketBoardInfo","watchQueryBracketBoardInfo","queryBracketBoardInfo","listMatchesFull","listWinMatchesFull","listLoseMatchesFull","listRound","listRRRound","listTableRR","listTableSE","listTableDE","listWinRound","listLoseRound","DFS","node","maxRound","fakeId","left","degree","roundNo","id","loser","matchNo","name","status","team1","team1Description","team2","team2Description","winner","right","includes","tempVar","tempVar2","Schedule","finalStageSchedule","formatName","listMatches","i","totalRound","j","matches","length","roundName","roundsNaming","finalStage","winBranch","bracket","root","listWinMatches","winRoundsNaming","loseBranch","listLoseMatches","loseRoundsNaming","hasGroupStage","groupStageSchedule","Object","keys","tables","k","tableName","groupStage","doQueryUserInfo","watchQueryUserInfo","queryUserInfo","Config","Global","doLogOut","watchLogOut","doQueryTournamentInfo","watchQueryTournamentInfo","queryTournamentInfo","Tournament","doIsUsernameExisted","watchIsUsernameExisted","doQueryListTournamentsOfUser","watchQueryListTournamentsOfUser","queryListTournamentsOfUser","Tournaments","TotalPage","doQueryListTeams","watchQueryListTeams","queryListTeams","userId","Teams","doCreateNewTournament","watchCreateNewTournament","createNewTournament","doEditUserInfo","watchEditUserInfo","editUserInfo","store","getState","doEditTournamentInfo","watchEditTournamentInfo","editTournamentInfo","doQueryListCompetitionOfTournament","watchQueryListCompetitionOfTournament","queryListCompetitionOfTournament","Competitions","doAddACompetition","watchAddACompetition","addACompetition","Competition","tournamentId","limit","doIsEmailExisted","watchIsEmailExisted","doQueryListTournaments","watchQueryListTournaments","queryListTournaments","doQueryListPlayerOfTeam","watchQueryListPlayerOfTeam","queryListPlayerOfTeam","Players","doActiveAccount","watchActiveAccount","activeAccount","doSearchTournament","watchSearchTournament","searchTournament","doUpdateBackground","watchUpdateBackground","uploadFile","file","form","FormData","append","doQueryListUsers","watchQueryListUsers","queryListUsers","Users","doSearchUsers","watchSearchUsers","searchUsers","doUpdateAvatar","watchUpdateAvatar","doQuerySportsByTournament","watchQuerySportsByTournament","querySportsByTournament","Sports","doQueryCompetitionsBySportAndTournament","watchQueryCompetitionsBySportAndTournament","queryCompetitionsBySportAndTournament","doAddATeamToCompetition","watchAddATeamToCompetition","addATeamToCompetition","competitionId","doUpdateAvatarTournament","watchUpdateAvatarTournament","doUpdateBackgroundTournament","watchUpdateBackgroundTournament","doAddListTeamSelecting","listTeamId","team1Id","team2Id","takeEvery","doSwapTwoTeamInBracket","watchSwapTwoTeamInBracket","swapTwoTeamInBracket","doDeleteListSelectingTeam","watchDeleteListSelectingTeam","doQueryCompetitionInfo","watchQueryCompetitionInfo","queryCompetitionInfo","competition","doQueryAllSports","watchQueryAllSports","queryAllSports","doQuerySportInfo","watchQuerySportInfo","querySportInfo","Sport","doEditTeam","watchEditTeam","editTeam","doQueryFinalStageSetting","watchQueryFinalStageSetting","queryFinalStageSetting","FinalStageSetting","doQueryGroupStageSetting","watchQueryGroupStageSetting","queryGroupStageSetting","GroupStageSetting","doQueryAllFormat","watchQueryAllFormat","queryAllFormat","CompetitionSettings","doEditCompetition","watchEditCompetition","editCompetition","doEditFinalStageSetting","watchEditFinalStageSetting","editFinalStageSetting","doEditGroupStageSetting","watchEditGroupStageSetting","editGroupStageSetting","doCreateAFinalStageSetting","watchCreateAFinalStageSetting","createAFinalStageSetting","doCreateAGroupStageSetting","watchCreateAGroupStageSetting","createAGroupStageSetting","doUpdateSchedule","watchUpdateSchedule","updateSchedule","doQueryBracketRankInfo","watchQueryBracketRankInfo","queryBracketRankInfo","finalStageScheduleRanking","rankingTable","doDeleteCompetition","watchDeleteCompetition","deleteCompetition","doStartTournament","watchStartTournament","startTournament","doGetMatchResult","watchGetMatchResult","getMatchResult","all","showNotification","logOut","updateBackground","updateAvatar","updateAvatarTournament","updateBackgroundTournament","addListTeamSelecting","deleteListSelectingTeam","sagaMiddleware","sagaMiddlewareFactory","createStore","applyMiddleware","reduxMiddleware","run","sagas","TextInput","props","onChangeValue","value","onChangeText","target","keyPressed","event","key","onHandleSubmit","handleOnBlur","onBlur","className","this","errorContent","style","required","defaultValue","onChange","onKeyPress","label","React","Component","connect","Login","onChangeUserName","setState","onChangePassword","onChangeRememberMe","rememberMe","validate","passwordError","passwordErrorContent","usernameErrorContent","usernameError","trim","handleLogin","tag","block","unblock","checked","to","textDecoration","onClick","checkUsernameExisted","setUsernameExistedDefault","SignUp","onChangeFirstName","firstName","onChangeLastName","lastName","validateUsername","test","onBlurUserName","validateEmail","emailError","emailErrorContent","checkEmailExisted","onBlurEmail","setEmailExistedDefault","onChangeEmail","onChangeReconfirmPassword","reConfirmPassword","firstNameError","firstNameErrorContent","lastNameError","lastNameErrorContent","reconfirmPasswordErrorContent","reconfirmPasswordError","handleSignUp","nextProps","nextState","ForgotPassword","handleSubmitForm","Home","onEditBracketMode","CustomTab","defaultIndex","selectedIndex","onSelect","tabList","map","item","index","componentList","CustomModal","handleCloseModal","handleConfirmModal","isOpen","showModal","onRequestClose","customStyles","ariaHideApp","children","confirmButtonVisible","TournamentListTeam","formatDateToString","date","formatOutput","dateFns","formatDateToDisplay","stringInput","formatInput","formatStringToDate","TournamentSetting","addManager","listManager","concat","onDeleteManager","itemm","filter","onChangeUsername","onChangeTournamentName","tournamentName","onChangeTournamentShortName","tournamentShortName","onChangeDescription","description","onChangeStartLocation","startLocation","onChangeEndLocation","endLocation","onChangeDonor","donor","handleAddManager","handleChangeStartDate","isAfter","endDate","startDate","isBefore","startFormDate","endFormDate","handleChangeStartFormDate","handleChangeEndDate","handleChangeEndFormDate","validateInfo","tournamentNameError","tournamentNameErrorContent","tournamentShortNameErrorContent","tournamentShortNameError","descriptionError","descriptionErrorContent","startLocationError","startLocationErrorContent","endLocationError","endLocationErrorContent","donorError","donorErrorContent","handleSave","fullName","shortName","creatorId","openingLocation","closingLocation","openingTime","closingTime","url","selected","dateFormat","maxDate","CompetitionSettingCompetitionsItem","onDeleteCompetition","stopPropagation","window","confirm","info","color","CompetitionSettingCompetitionsAddItem","handleAddACompetition","size","queryAllFormats","queryAllCompetitionsByTournamentId","competitionFormatOptions","top","bottom","backgroundColor","display","flexDirection","overlay","zIndex","sportOptions","CompetitionSetting","requestData","handleOpenModal","competitionNameError","competitionNameErrorContent","competitionFormatError","competitionFormatErrorContent","competitionName","selectedSport","selectedCompetitionFormatPhase1","twoPhase","selectedCompetitionFormatPhase2","find","element","validateAmountOfTeamsGoOnInAGroup","amountOfTeamsGoOnInAGroupError","amountOfTeamsGoOnInAGroupErrorContent","validateAmountOfTeamsInAGroup","amountOfTeamsInAGroupError","amountOfTeamsInAGroupErrorContent","sportId","onChangeHomeWayPhase1","homeWayPhase1","onChangeHomeWayPhase2","homeWayPhase2","onChangeCompetitionName","onChangeSport","OnChoose1","onePhase","OnChoose2","onChangeCompetitionFormatPhase1","onChangeCompetitionFormatPhase2","onChangeAmountOfTeamsInAGroup","tempValue","isNaN","Number","amountOfTeamsInAGroup","onChangeAmountOfTeamsGoOnInAGroup","amountOfTeamsGoOnInAGroup","onBlurAmountOfTeamsInAGroup","onBlurAmountOfTeamsGoOnInAGroup","formatId","hasHomeMatch","advanceTeamPerTable","maxTeamPerTable","listCompetition","options","maxMenuHeight","readOnly","menuPlacement","width","Player","deletePlayer","onDelete","gender","age","freeToEdit","marginLeft","marginRight","allCompetitionOptions","genderOptions","TournamentInfo","routerInfo","match","onChangeCompetitionSetting","selectedCompetitionInForm","onChangeSelectedCompetitionInForm","selectorFiles","handleStartTournament","handleJoinTournament","showJoinModal","validateForm","selectedCompetitionInFormError","selectedCompetitionInFormErrorContent","teamNameInFormError","teamNameInFormErrorContent","teamShortNameInFormErrorContent","teamShortNameInFormError","teamNameInForm","teamShortNameInForm","validateAddPlayer","playerEmailInFormErrorContent","playerEmailInFormError","playerNameInFormErrorContent","playerNameInFormError","playerNameInForm","playerEmailInForm","listPlayerInForm","handleFinishTournament","finishTournament","onChangeTeamNameInForm","onChangeTeamShortNameInForm","onDeletePlayer","indexx","onChangePlayerNameInForm","onChangePlayerEmailInForm","onChangePlayerGenderInForm","playerGenderInForm","addPlayer","listTemp","playerAgeInForm","onChangePlayerAgeInForm","canEdit","CompetitionsSetting","src","require","alt","e","files","height","setGlobalSearchString","searchTournaments","searchOption","Header","handleShowUserOption","showUserOption","hideUserOption","handleSearch","page","searchString","searchText","selectedSearchOption","onChangeSearchOption","clearSearchText","onChangeSearchText","onImageError","errorLoadImage","onError","Content","transparent","UserInfoOverview","TournamentOverview","moreInfo","OtherInformation","sportsName","countPlayer","process","Paging","onChangeCurrentPageText","totalPage","onSelectPage","onChangeSelectedPage","renderListPage","listPage","distance","unshift","UserInfoTournament","pageNumber","UserInfo","handleOpenEditUserInfo","editMode","address","dateOfBirth","dob","phoneNumberErrorContent","phoneNumberError","addressError","addressErrorContent","handleCloseEditUserInfo","roleId","onChangeAddress","onChangePhoneNumber","onChangeGender","handleChangeDateOfBirth","ChangePassword","onChangeOldPassword","oldPassword","onChangeNewPassword","newPassword","reconfirmPassword","newPasswordError","newPasswordErrorContent","oldPasswordErrorContent","oldPasswordError","handleChangePassword","changePassword","AllTournaments","queryListTournament","activePage","CreateNewTournament","onChangeTournamentname","onChangeTournamentDescription","tournamentDescription","onChangeTournamentDonor","onChangeTournamentStartLocation","tournamentStartLocation","onChangeTournamentEndLocation","tournamentEndLocation","handleCreateNewTournament","tournamentDescriptionError","tournamentDescriptionErrorContent","tournamentStartLocationError","tournamentStartLocationErrorContent","tournamentEndLocationError","tournamentEndLocationErrorContent","ActiveAccount","code","tokenVerify","dispatch","BracketTeam","setHoveringTeam","borderBottom","onMouseOver","onMouseOut","descType","unitIndex","MatchDetail","team","location","SheetData","list","lock","loadMore","componentDidMount","processData","getColumnWidth","header","getRowHeight","rowHeight","onScroll","clientHeight","scrollHeight","clientWidth","scrollTop","scrollLeft","scrollWidth","requestLoadMore","cellRenderer","columnIndex","rowIndex","properties","haveTotalRow","rowData","hideHeader","fixedColumnCount","headerStyle","hoveredColumnIndex","hoveredRowIndex","isRowClickable","onClickRow","isShowOrderHistory","onClickRowIndex","JSON","parse","stringify","totalWidth","reduce","b","totalFixedWidth","prevProps","fixedRowCount","defaultProps","boardMode","isTotalRow","MatchSetting","onAddASet","configSheetData","justifyContent","score","matchId","onRemoveASet","slice","team1Win","team2Win","fetchCount","teamsInfo","BracketMatch","selectedIndexInTab","iconVisible","tabComponentList","roundRobin","lowerBracket","MATCH_CONTAINER_HEIGHT","fakeRoundNo","firstId","Math","floor","treeHeight","firstLocation","marginTop","BracketRound","roundHover","d","BracketBoard","item2","index2","setBracketStartedStatus","UserInfoTeamsItem","handleSeeMore","onEditMode","seeMoreInfo","openEditMode","teamFullName","teamShortName","players","onChangeTeamFullName","onChangeTeamShortName","validateTeamFullName","teamFullNameError","teamFullNameErrorContent","tempList","validateTeamShortName","teamShortNameError","teamShortNameErrorContent","onBlurTeamFullName","onBlurTeamShortName","handleSaveChange","seedNo","fontWeight","UserInfoTeams","teamNameToAddError","teamNameToAddErrorContent","teamShortNameToAddError","teamShortNameToAddErrorContent","teamNameToAdd","teamShortNameToAdd","handleAddATeam","onChangeTeamNameToAdd","onChangeTeamShortNameToAdd","BracketSchedule","fontSize","item3","index3","BracketRank","CompetitionInfo","queryCompetition","onChangeCompetitionFullName","competitionFullName","handleOpenEditCompetitionInfo","validateCompetitionInfo","competitionFullNameError","competitionFullNameErrorContent","handleCloseEditCompetitionInfo","UserOverview","AllUsers","App","CookiesProvider","exact","render","Boolean","hostname","ReactDOM","animated","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe7b7ebe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d27a1a36.png\";","module.exports = __webpack_public_path__ + \"static/media/38155584462_74d5f1cc1d_b.9421a918.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image-384.8cd101f4.png\";","export const COMMON_SHOW_NOTIFICATION = 'COMMON_SHOW_NOTIFICATION';\r\n\r\nexport const GET_BRACKET_BOARD_INFO = 'GET_BRACKET_BOARD_INFO';\r\n\r\nexport const LOGIN = 'LOGIN';\r\nexport const ACTIVE_ACCOUNT = 'ACTIVE_ACCOUNT';\r\nexport const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const SIGNUP = 'SIGNUP';\r\nexport const FORGOT_PASSWORD = 'FORGOT_PASSWORD';\r\nexport const SEARCH_TOURNAMENT = 'SEARCH_TOURNAMENT';\r\nexport const SEARCH_USER = 'SEARCH_USER';\r\n\r\nexport const SET_HOVERING_TEAM = 'SET_HOVERING_TEAM';\r\nexport const DELETE_LIST_SELECTING_TEAM = 'DELETE_LIST_SELECTING_TEAM';\r\nexport const DELETE_COMPETITION = 'DELETE_COMPETITION';\r\nexport const SWAP_TWO_TEAM_IN_BRACKET = 'SWAP_TWO_TEAM_IN_BRACKET';\r\nexport const ADD_LIST_TEAM_SELECTING = 'ADD_LIST_TEAM_SELECTING';\r\nexport const ON_EDIT_BRACKET_MODE = 'ON_EDIT_BRACKET_MODE';\r\nexport const SET_GLOBAL_SEARCH_STRING = 'SET_GLOBAL_SEARCH_STRING';\r\nexport const SET_BRACKET_STATUS = 'SET_BRACKET_STATUS';\r\nexport const CREATE_NEW_TOURNAMENT = 'CREATE_NEW_TOURNAMENT';\r\nexport const EDIT_TOURNAMENT_INFO = 'EDIT_TOURNAMENT_INFO';\r\nexport const EDIT_USER_INFO = 'EDIT_USER_INFO';\r\nexport const USER_UPDATE_AVATAR = 'USER_UPDATE_AVATAR';\r\nexport const EDIT_TEAM = 'EDIT_TEAM';\r\nexport const USER_UPDATE_BACKGROUND = 'USER_UPDATE_BACKGROUND';\r\nexport const TOURNAMENT_UPDATE_AVATAR = 'TOURNAMENT_UPDATE_AVATAR';\r\nexport const TOURNAMENT_UPDATE_BACKGROUND = 'TOURNAMENT_UPDATE_BACKGROUND';\r\nexport const ADD_A_COMPETITION = 'ADD_A_COMPETITION';\r\nexport const ADD_A_TEAM_TO_COMPETITION = 'ADD_A_TEAM_TO_COMPETITION';\r\nexport const START_TOURNAMENT = 'START_TOURNAMENT';\r\nexport const FINISH_TOURNAMENT = 'FINISH_TOURNAMENT';\r\n\r\nexport const QUERY_USER_INFO = 'QUERY_USER_INFO';\r\nexport const UPDATE_SCHEDULE = 'UPDATE_SCHEDULE';\r\nexport const GET_MATCH_RESULT = 'GET_MATCH_RESULT';\r\nexport const EDIT_COMPETITION = 'EDIT_COMPETITION';\r\nexport const GET_BRACKET_RANK_INFO = 'GET_BRACKET_RANK_INFO';\r\nexport const EDIT_GROUP_STAGE_SETTING = 'EDIT_GROUP_STAGE_SETTING';\r\nexport const QUERY_ALL_FORMATS = 'QUERY_ALL_FORMATS';\r\nexport const QUERY_GROUP_STAGE_SETTING = 'QUERY_GROUP_STAGE_SETTING';\r\nexport const QUERY_FINAL_STAGE_SETTING = 'QUERY_FINAL_STAGE_SETTING';\r\nexport const CREATE_A_FINAL_STAGE_SETTING = 'CREATE_A_FINAL_STAGE_SETTING';\r\nexport const CREATE_A_GROUP_STAGE_SETTING = 'CREATE_A_GROUP_STAGE_SETTING';\r\nexport const EDIT_FINAL_STAGE_SETTING = 'EDIT_FINAL_STAGE_SETTING';\r\nexport const QUERY_SPORT_INFO = 'QUERY_SPORT_INFO';\r\nexport const QUERY_ALL_SPORTS = 'QUERY_ALL_SPORTS';\r\nexport const QUERY_COMPETITION_INFO = 'QUERY_COMPETITION_INFO';\r\nexport const QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT = 'QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT';\r\nexport const QUERY_SPORTS_BY_TOURNAMENT = 'QUERY_SPORTS_BY_TOURNAMENT';\r\nexport const QUERY_LIST_USER = 'QUERY_LIST_USER';\r\nexport const QUERY_LIST_PLAYER_OF_TEAM = 'QUERY_LIST_PLAYER_OF_TEAM';\r\nexport const QUERY_TOURNAMENT_INFO = 'QUERY_TOURNAMENT_INFO';\r\nexport const QUERY_LIST_TOURNAMENT_OF_USER = 'QUERY_LIST_TOURNAMENT_OF_USER';\r\nexport const QUERY_LIST_TOURNAMENT = 'QUERY_LIST_TOURNAMENT';\r\nexport const QUERY_LIST_TEAM = 'QUERY_LIST_TEAM';\r\nexport const QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID = 'QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID';\r\n\r\nexport const CHECK_USERNAME_EXISTED = 'CHECK_USERNAME_EXISTED';\r\nexport const CHECK_EMAIL_EXISTED = 'CHECK_EMAIL_EXISTED';\r\n\r\nexport const SUBMIT_FORM = 'SUBMIT_FORM';","export enum COOKIES_TYPE {\r\n    AUTH_TOKEN = 'AUTH_TOKEN',\r\n}\r\n\r\nexport const MATCH_CONTAINER_HEIGHT = 4 * 17;\r\nexport const PADDING_TOP = 20;","import { Cookies } from 'react-cookie';\r\n\r\nexport const cookies = new Cookies();","import { combineReducers } from 'redux';\r\nimport { CurrentPage } from './global-reducers/CurrentPage';\r\nimport { BracketBoardInfo, BracketStartedStatus } from 'components/BracketBoard/reducers';\r\nimport { HoveringTeam, EditBracketMode, ListTeamSelecting } from 'components/BracketTeam/reducers';\r\nimport { CurrentUserInfo } from 'screens/Login/reducers';\r\nimport { SignUp } from 'screens/SignUp/reducers';\r\nimport { ForgotPassword } from 'screens/ForgotPassword/reducers';\r\nimport { UserInfo } from 'screens/UserInfo/reducers';\r\nimport { TournamentInfo, ListSportsByTournament, ListCompetitionsBySportAndTournament } from 'screens/TournamentInfo/reducers';\r\nimport { IsUsernameExisted } from './global-reducers/IsUsernameExisted-reducer';\r\nimport { ListTournamentOfUser } from 'components/UserInfoTournament/reducers';\r\nimport { ListTeam } from 'components/Teams/reducers';\r\nimport { AllCompetitionByTournamentId, NewCompetition } from 'components/CompetitionsSetting/reducers';\r\nimport { IsEmailExisted } from './global-reducers/IsEmailExisted-reducer';\r\nimport { ListTournament } from 'components/AllTournaments/reducers';\r\nimport { ActiveAccountStatus } from 'screens/ActiveAccount/reducers';\r\nimport { GlobalSearchString } from './global-reducers/GlobalSearchString-reducer';\r\nimport { ListUsers } from 'components/AllUsers/reducers';\r\nimport { CompetitionInfo, AllSports, SportInfo, GroupStageSetting, FinalStageSetting, AllFormats } from 'screens/CompetitionInfo/reducers';\r\nimport { BracketRankInfo } from 'components/BracketRank/reducers';\r\nimport { MatchResult } from 'components/BracketMatch/reducers';\r\n\r\nexport const appReducer = combineReducers({\r\n  currentPage: CurrentPage,\r\n  bracketBoardInfo: BracketBoardInfo,\r\n  hoveringTeam: HoveringTeam,\r\n  bracketStartedStatus: BracketStartedStatus,\r\n  currentUserInfo: CurrentUserInfo,\r\n  userInfo: UserInfo,\r\n  signUp: SignUp,\r\n  forgotPassword: ForgotPassword,\r\n  tournamentInfo: TournamentInfo,\r\n  isUsernameExisted: IsUsernameExisted,\r\n  isEmailExisted: IsEmailExisted,\r\n  listTournamentOfUser: ListTournamentOfUser,\r\n  listTournament: ListTournament,\r\n  listTeam: ListTeam,\r\n  allCompetitionByTournamentId: AllCompetitionByTournamentId,\r\n  activeAccountStatus: ActiveAccountStatus,\r\n  globalSearchString: GlobalSearchString,\r\n  listSportsByTournament: ListSportsByTournament,\r\n  listUsers: ListUsers,\r\n  listCompetitionsBySportAndTournament: ListCompetitionsBySportAndTournament,\r\n  editBracketMode: EditBracketMode,\r\n  listTeamSelecting: ListTeamSelecting,\r\n  competitionInfo: CompetitionInfo,\r\n  allSports: AllSports,\r\n  sportInfo: SportInfo,\r\n  groupStageSetting: GroupStageSetting,\r\n  finalStageSetting: FinalStageSetting,\r\n  allFormats: AllFormats,\r\n  newCompetition: NewCompetition,\r\n  bracketRankInfo: BracketRankInfo,\r\n  matchResult: MatchResult,\r\n});\r\n\r\nexport type IState = ReturnType<typeof appReducer>;","import axios from 'axios';\r\nimport { IParams, IResponse } from \"interfaces/common\";\r\nimport { cookies } from './cookies';\r\nimport config from 'config';\r\nimport { COOKIES_TYPE } from 'global';\r\n\r\nexport enum METHOD {\r\n  GET = 'get',\r\n  POST = 'post',\r\n  PUT = 'put',\r\n  DELETE = 'delete',\r\n}\r\n\r\nexport async function query<T>(\r\n  uri: string,\r\n  method: METHOD,\r\n  data: IParams = {},\r\n  params: IParams = {},\r\n  path: string | number,\r\n) {\r\n  const baseUrl = config.apiUrl.baseURI;\r\n  const realUrl = `${baseUrl}${uri}`;\r\n\r\n  return new Promise<IResponse<T>>((resolve: Function, reject: Function) => {\r\n    switch (method) {\r\n      case METHOD.POST: {\r\n        axios.post(`${realUrl}${path !== '' ? `/${path}` : ''}`, null, {\r\n          params, data, headers: {\r\n            \"Authorization\": cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? cookies.get(COOKIES_TYPE.AUTH_TOKEN).Authentication : null,\r\n          } })\r\n          .then((response) => {\r\n            console.log('response1', uri, response);\r\n            resolve(response);\r\n          }).catch((error) => {\r\n            console.log('error1', uri, error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      }\r\n      case METHOD.PUT: {\r\n        axios.put(`${realUrl}${path !== '' ? `/${path}` : ''}`, null, {\r\n          params, data, headers: {\r\n            \"Authorization\": cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? cookies.get(COOKIES_TYPE.AUTH_TOKEN).Authentication : null,\r\n          }\r\n        })\r\n          .then((response) => {\r\n            console.log('response1', uri, response);\r\n            resolve(response);\r\n          }).catch((error) => {\r\n            console.log('error1', uri, error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      }\r\n      case METHOD.GET: {\r\n        axios.get(`${realUrl}${path !== '' ? `/${path}` : ''}`, {\r\n          params, data, headers: {\r\n            \"Authorization\": cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? cookies.get(COOKIES_TYPE.AUTH_TOKEN).Authentication : null,\r\n          }\r\n        })\r\n          .then((response) => {\r\n            console.log('response1', uri, response);\r\n            resolve(response);\r\n          }).catch((error) => {\r\n            console.log('error1', uri, error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      }\r\n      case METHOD.DELETE: {\r\n        axios.delete(`${realUrl}${path !== '' ? `/${path}` : ''}`, {\r\n          params, data, headers: {\r\n            \"Authorization\": cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? cookies.get(COOKIES_TYPE.AUTH_TOKEN).Authentication : null,\r\n          }\r\n        })\r\n          .then((response) => {\r\n            console.log('response1', uri, response);\r\n            resolve(response);\r\n          }).catch((error) => {\r\n            console.log('error1', uri, error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n}","import { IAction } from 'interfaces/common';\r\n\r\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\n\r\nexport function CurrentPage(state = null, action: IAction<string>) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_PAGE:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_BRACKET_STATUS } from \"redux-saga/actions\";\r\nimport { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const GET_BRACKET_BOARD_INFO_SUCCESS = 'GET_BRACKET_BOARD_INFO_SUCCESS';\r\nexport const GET_BRACKET_BOARD_INFO_FAILED = 'GET_BRACKET_BOARD_INFO_FAILED';\r\n\r\nexport function BracketBoardInfo(state: IParams | null = null, action: IAction<IParams | null>) {\r\n  switch (action.type) {\r\n    case GET_BRACKET_BOARD_INFO_SUCCESS:\r\n      return action.payload;\r\n    case GET_BRACKET_BOARD_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function BracketStartedStatus(state = false, action: IAction<boolean>) {\r\n  switch (action.type) {\r\n    case SET_BRACKET_STATUS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction } from \"interfaces/common\";\r\nimport { SET_HOVERING_TEAM, ON_EDIT_BRACKET_MODE } from \"redux-saga/actions\";\r\n\r\nexport const ADD_LIST_TEAM_SELECTING_SUCCESS = 'ADD_LIST_TEAM_SELECTING_SUCCESS';\r\nexport const ADD_LIST_TEAM_SELECTING_FAILED = 'ADD_LIST_TEAM_SELECTING_FAILED';\r\nexport const SWAP_TWO_TEAM_IN_BRACKET_SUCCESS = 'SWAP_TWO_TEAM_IN_BRACKET_SUCCESS';\r\nexport const SWAP_TWO_TEAM_IN_BRACKET_FAILED = 'SWAP_TWO_TEAM_IN_BRACKET_FAILED';\r\n\r\nexport function HoveringTeam(state: number | null = null, action: IAction<number | null>) {\r\n  switch (action.type) {\r\n    case SET_HOVERING_TEAM:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function EditBracketMode(state: boolean = false, action: IAction<boolean>) {\r\n  switch (action.type) {\r\n    case ON_EDIT_BRACKET_MODE:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function ListTeamSelecting(state: number[] = [], action: IAction<number[]>) {\r\n  switch (action.type) {\r\n    case ADD_LIST_TEAM_SELECTING_SUCCESS:\r\n      return action.payload;\r\n    case ADD_LIST_TEAM_SELECTING_FAILED:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// export function SwapTeamStatus(state: boolean = false, action: IAction<boolean>) {\r\n//   switch (action.type) {\r\n//     case ADD_LIST_TEAM_SELECTING_SUCCESS:\r\n//       return action.payload;\r\n//     case ADD_LIST_TEAM_SELECTING_FAILED:\r\n//       return false;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }","import { IAction, IParams } from \"interfaces/common\";\r\nimport { cookies } from 'utils/cookies';\r\nimport { COOKIES_TYPE } from \"global\";\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\r\n\r\nexport function CurrentUserInfo(state: IParams | null = cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && cookies.get(COOKIES_TYPE.AUTH_TOKEN).User != null ? cookies.get(COOKIES_TYPE.AUTH_TOKEN).User : null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case LOGIN_SUCCESS:\r\n      return action.payload;\r\n    case LOGIN_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_USER_INFO_SUCCESS = 'QUERY_USER_INFO_SUCCESS';\r\nexport const QUERY_USER_INFO_FAILED = 'QUERY_USER_INFO_FAILED';\r\nexport const EDIT_USER_INFO_SUCCESS = 'EDIT_USER_INFO_SUCCESS';\r\nexport const EDIT_USER_INFO_FAILED = 'EDIT_USER_INFO_FAILED';\r\nexport const USER_UPDATE_AVATAR_SUCCESS = 'USER_UPDATE_AVATAR_SUCCESS';\r\nexport const USER_UPDATE_AVATAR_FAILED = 'USER_UPDATE_AVATAR_FAILED';\r\nexport const USER_UPDATE_BACKGROUND_SUCCESS = 'USER_UPDATE_BACKGROUND_SUCCESS';\r\nexport const USER_UPDATE_BACKGROUND_FAILED = 'USER_UPDATE_BACKGROUND_FAILED';\r\n\r\nexport function UserInfo(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_USER_INFO_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_USER_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function EditUserInfo(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case EDIT_USER_INFO_SUCCESS:\r\n      return action.payload.User;\r\n    case EDIT_USER_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED';\r\n\r\nexport function SignUp(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case SIGNUP_SUCCESS:\r\n      return action.payload;\r\n    case SIGNUP_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';\r\nexport const FORGOT_PASSWORD_FAILED = 'FORGOT_PASSWORD_FAILED';\r\n\r\nexport function ForgotPassword(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case FORGOT_PASSWORD_SUCCESS:\r\n      return action.payload;\r\n    case FORGOT_PASSWORD_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_TOURNAMENT_INFO_SUCCESS = 'QUERY_TOURNAMENT_INFO_SUCCESS';\r\nexport const QUERY_TOURNAMENT_INFO_FAILED = 'QUERY_TOURNAMENT_INFO_FAILED';\r\nexport const QUERY_SPORTS_BY_TOURNAMENT_SUCCESS = 'QUERY_SPORTS_BY_TOURNAMENT_SUCCESS';\r\nexport const QUERY_SPORTS_BY_TOURNAMENT_FAILED = 'QUERY_SPORTS_BY_TOURNAMENT_FAILED';\r\nexport const QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS = 'QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS';\r\nexport const QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED = 'QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED';\r\nexport const START_TOURNAMENT_SUCCESS = 'START_TOURNAMENT_SUCCESS';\r\nexport const START_TOURNAMENT_FAILED = 'START_TOURNAMENT_FAILED';\r\nexport const FINISH_TOURNAMENT_SUCCESS = 'FINISH_TOURNAMENT_SUCCESS';\r\nexport const FINISH_TOURNAMENT_FAILED = 'FINISH_TOURNAMENT_FAILED';\r\nexport const TOURNAMENT_UPDATE_AVATAR_SUCCESS = 'TOURNAMENT_UPDATE_AVATAR_SUCCESS';\r\nexport const TOURNAMENT_UPDATE_AVATAR_FAILED = 'TOURNAMENT_UPDATE_AVATAR_FAILED';\r\nexport const TOURNAMENT_UPDATE_BACKGROUND_SUCCESS = 'TOURNAMENT_UPDATE_BACKGROUND_SUCCESS';\r\nexport const TOURNAMENT_UPDATE_BACKGROUND_FAILED = 'TOURNAMENT_UPDATE_BACKGROUND_FAILED';\r\n\r\nexport function TournamentInfo(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_TOURNAMENT_INFO_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_TOURNAMENT_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function ListSportsByTournament(state: IParams[] | null = null, action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_SPORTS_BY_TOURNAMENT_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_SPORTS_BY_TOURNAMENT_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function ListCompetitionsBySportAndTournament(state: IParams[] | null = null, action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const CHECK_USERNAME_EXISTED_SUCCESS = 'CHECK_USERNAME_EXISTED_SUCCESS';\r\nexport const CHECK_USERNAME_EXISTED_FAILED = 'CHECK_USERNAME_EXISTED_FAILED';\r\nexport const CHECK_USERNAME_EXISTED_DEFAULT = 'CHECK_USERNAME_EXISTED_DEFAULT';\r\n\r\nexport function IsUsernameExisted(state: boolean | null | {} = {}, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case CHECK_USERNAME_EXISTED_SUCCESS:\r\n      return action.payload;\r\n    case CHECK_USERNAME_EXISTED_FAILED:\r\n      return null;\r\n    case CHECK_USERNAME_EXISTED_DEFAULT:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const CHECK_EMAIL_EXISTED_SUCCESS = 'CHECK_EMAIL_EXISTED_SUCCESS';\r\nexport const CHECK_EMAIL_EXISTED_FAILED = 'CHECK_EMAIL_EXISTED_FAILED';\r\nexport const CHECK_EMAIL_EXISTED_DEFAULT = 'CHECK_EMAIL_EXISTED_DEFAULT';\r\n\r\nexport function IsEmailExisted(state: boolean | null | {} = {}, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case CHECK_EMAIL_EXISTED_SUCCESS:\r\n      return action.payload;\r\n    case CHECK_EMAIL_EXISTED_FAILED:\r\n      return null;\r\n    case CHECK_EMAIL_EXISTED_DEFAULT:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_LIST_TOURNAMENT_OF_USER_SUCCESS = 'QUERY_LIST_TOURNAMENT_OF_USER_SUCCESS';\r\nexport const QUERY_LIST_TOURNAMENT_OF_USER_FAILED = 'QUERY_LIST_TOURNAMENT_OF_USER_FAILED';\r\n\r\nexport function ListTournamentOfUser(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_LIST_TOURNAMENT_OF_USER_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_LIST_TOURNAMENT_OF_USER_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_LIST_TOURNAMENT_SUCCESS = 'QUERY_LIST_TOURNAMENT_SUCCESS';\r\nexport const QUERY_LIST_TOURNAMENT_FAILED = 'QUERY_LIST_TOURNAMENT_FAILED';\r\n\r\nexport function ListTournament(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_LIST_TOURNAMENT_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_LIST_TOURNAMENT_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_LIST_TEAM_SUCCESS = 'QUERY_LIST_TEAM_SUCCESS';\r\nexport const QUERY_LIST_TEAM_FAILED = 'QUERY_LIST_TEAM_FAILED';\r\nexport const ADD_A_TEAM_TO_COMPETITION_SUCCESS = 'ADD_A_TEAM_TO_COMPETITION_SUCCESS';\r\nexport const ADD_A_TEAM_TO_COMPETITION_FAILED = 'ADD_A_TEAM_TO_COMPETITION_FAILED';\r\n\r\nexport function ListTeam(state: IParams[] | null = null, action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_LIST_TEAM_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_LIST_TEAM_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS = 'QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS';\r\nexport const ADD_A_COMPETITION_SUCCESS = 'ADD_A_COMPETITION_SUCCESS';\r\nexport const ADD_A_COMPETITION_FAILED = 'ADD_A_COMPETITION_FAILED';\r\nexport const QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED = 'QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED';\r\nexport const CREATE_A_FINAL_STAGE_SETTING_SUCCESS = 'CREATE_A_FINAL_STAGE_SETTING_SUCCESS';\r\nexport const CREATE_A_FINAL_STAGE_SETTING_FAILED = 'CREATE_A_FINAL_STAGE_SETTING_FAILED';\r\nexport const CREATE_A_GROUP_STAGE_SETTING_SUCCESS = 'CREATE_A_GROUP_STAGE_SETTING_SUCCESS';\r\nexport const CREATE_A_GROUP_STAGE_SETTING_FAILED = 'CREATE_A_GROUP_STAGE_SETTING_FAILED';\r\n\r\nexport function AllCompetitionByTournamentId(state: IParams[] | null = null, action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function NewCompetition(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case ADD_A_COMPETITION_SUCCESS:\r\n      return action.payload;\r\n    case ADD_A_COMPETITION_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction } from \"interfaces/common\";\r\n\r\nexport const ACTIVE_ACCOUNT_SUCCESS = 'ACTIVE_ACCOUNT_SUCCESS';\r\nexport const ACTIVE_ACCOUNT_FAILED = 'ACTIVE_ACCOUNT_FAILED';\r\nexport const ACTIVE_ACCOUNT_DEFAULT = 'ACTIVE_ACCOUNT_DEFAULT';\r\n\r\nexport function ActiveAccountStatus(state: boolean | null = null, action: IAction<boolean | null>) {\r\n  switch (action.type) {\r\n    case ACTIVE_ACCOUNT_SUCCESS:\r\n      return true;\r\n    case ACTIVE_ACCOUNT_FAILED:\r\n      return false;\r\n    case ACTIVE_ACCOUNT_DEFAULT:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction } from 'interfaces/common';\r\nimport { SET_GLOBAL_SEARCH_STRING } from 'redux-saga/actions';\r\n\r\nexport function GlobalSearchString(state: string = '', action: IAction<string>) {\r\n  switch (action.type) {\r\n    case SET_GLOBAL_SEARCH_STRING:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_LIST_USER_SUCCESS = 'QUERY_LIST_USER_SUCCESS';\r\nexport const QUERY_LIST_USER_FAILED = 'QUERY_LIST_USER_FAILED';\r\n\r\nexport function ListUsers(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_LIST_USER_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_LIST_USER_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const QUERY_COMPETITION_INFO_SUCCESS = 'QUERY_COMPETITION_INFO_SUCCESS';\r\nexport const QUERY_COMPETITION_INFO_FAILED = 'QUERY_COMPETITION_INFO_FAILED';\r\nexport const QUERY_ALL_SPORTS_SUCCESS = 'QUERY_ALL_SPORTS_SUCCESS';\r\nexport const QUERY_ALL_SPORTS_FAILED = 'QUERY_ALL_SPORTS_FAILED';\r\nexport const QUERY_SPORT_INFO_SUCCESS = 'QUERY_SPORT_INFO_SUCCESS';\r\nexport const QUERY_SPORT_INFO_FAILED = 'QUERY_SPORT_INFO_FAILED';\r\nexport const QUERY_GROUP_STAGE_SETTING_FAILED = 'QUERY_GROUP_STAGE_SETTING_FAILED';\r\nexport const QUERY_GROUP_STAGE_SETTING_SUCCESS = 'QUERY_GROUP_STAGE_SETTING_SUCCESS';\r\nexport const QUERY_FINAL_STAGE_SETTING_SUCCESS = 'QUERY_FINAL_STAGE_SETTING_SUCCESS';\r\nexport const QUERY_FINAL_STAGE_SETTING_FAILED = 'QUERY_FINAL_STAGE_SETTING_FAILED';\r\nexport const EDIT_FINAL_STAGE_SETTING_SUCCESS = 'EDIT_FINAL_STAGE_SETTING_SUCCESS';\r\nexport const EDIT_FINAL_STAGE_SETTING_FAILED = 'EDIT_FINAL_STAGE_SETTING_FAILED';\r\nexport const QUERY_ALL_FORMATS_FAILED = 'QUERY_ALL_FORMATS_FAILED';\r\nexport const QUERY_ALL_FORMATS_SUCCESS = 'QUERY_ALL_FORMATS_SUCCESS';\r\nexport const EDIT_COMPETITION_SUCCESS = 'EDIT_COMPETITION_SUCCESS';\r\nexport const EDIT_COMPETITION_FAILED = 'EDIT_COMPETITION_FAILED';\r\nexport const EDIT_GROUP_STAGE_SETTING_SUCCESS = 'EDIT_GROUP_STAGE_SETTING_SUCCESS';\r\nexport const EDIT_GROUP_STAGE_SETTING_FAILED = 'EDIT_GROUP_STAGE_SETTING_FAILED';\r\nexport const UPDATE_SCHEDULE_SUCCESS = 'UPDATE_SCHEDULE_SUCCESS';\r\nexport const UPDATE_SCHEDULE_FAILED = 'UPDATE_SCHEDULE_FAILED';\r\n\r\nexport function CompetitionInfo(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_COMPETITION_INFO_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_COMPETITION_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function AllSports(state: IParams[] = [], action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_ALL_SPORTS_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_ALL_SPORTS_FAILED:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function AllFormats(state: IParams[] = [], action: IAction<IParams[]>) {\r\n  switch (action.type) {\r\n    case QUERY_ALL_FORMATS_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_ALL_FORMATS_FAILED:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function SportInfo(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_SPORT_INFO_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_SPORT_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function GroupStageSetting(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_GROUP_STAGE_SETTING_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_GROUP_STAGE_SETTING_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function FinalStageSetting(state: IParams | null = null, action: IAction<IParams>) {\r\n  switch (action.type) {\r\n    case QUERY_FINAL_STAGE_SETTING_SUCCESS:\r\n      return action.payload;\r\n    case QUERY_FINAL_STAGE_SETTING_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const GET_BRACKET_RANK_INFO_SUCCESS = 'GET_BRACKET_RANK_INFO_SUCCESS';\r\nexport const GET_BRACKET_RANK_INFO_FAILED = 'GET_BRACKET_RANK_INFO_FAILED';\r\n\r\nexport function BracketRankInfo(state: IParams | null = null, action: IAction<IParams | null>) {\r\n  switch (action.type) {\r\n    case GET_BRACKET_RANK_INFO_SUCCESS:\r\n      return action.payload;\r\n    case GET_BRACKET_RANK_INFO_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IAction, IParams } from \"interfaces/common\";\r\n\r\nexport const GET_MATCH_RESULT_SUCCESS = 'GET_MATCH_RESULT_SUCCESS';\r\nexport const GET_MATCH_RESULT_FAILED = 'GET_MATCH_RESULT_FAILED';\r\n\r\nexport function MatchResult(state: IParams | null = null, action: IAction<IParams | null>) {\r\n  switch (action.type) {\r\n    case GET_MATCH_RESULT_SUCCESS:\r\n      return action.payload;\r\n    case GET_MATCH_RESULT_FAILED:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","/* tslint:disable */\r\nexport interface IConfig {\r\n  apiUrl: {\r\n    baseURI: string;\r\n    tradeX: {\r\n      clientId?: string;\r\n      clientSecret?: string;\r\n      socketCluster?: {\r\n        hostname?: string;\r\n        secure?: boolean;\r\n        port?: number;\r\n        codecEngine: any;\r\n        authTokenName?: string;\r\n        autoReconnect?: boolean;\r\n      };\r\n    };\r\n    domain: {\r\n      [s: string]: {\r\n        clientId?: string;\r\n        clientSecret?: string;\r\n        socketCluster?: {\r\n          hostname?: string;\r\n          secure?: boolean;\r\n          port?: number;\r\n          codecEngine: any;\r\n          authTokenName?: string;\r\n          autoReconnect?: boolean;\r\n        };\r\n      };\r\n    };\r\n  };\r\n  regex: {\r\n    password: RegExp;\r\n    username: RegExp;\r\n    email: RegExp;\r\n    phoneNumber: RegExp;\r\n    number: RegExp;\r\n    orderPasswordKBSV: RegExp;\r\n  };\r\n}\r\n\r\nlet config: IConfig = {\r\n  apiUrl: {\r\n    // baseURI: 'http://172.20.10.8:8090/',nham'11\r\n    baseURI: 'http://localhost:8090/',\r\n    // baseURI: 'http://192.168.43.170:8090/',long sama\r\n    tradeX: {},\r\n    domain: {},\r\n  },\r\n  regex: {\r\n    password: /^[-\\w]{8,32}$/,\r\n    username: /^[-\\w]{8,32}$/,\r\n    // eslint-disable-next-line\r\n    email: /^[a-z][a-z0-9_\\.]{5,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,4}){1,2}$/,\r\n    phoneNumber: /^\\d{10}$/,\r\n    number: /^[0-9]*$/,\r\n    orderPasswordKBSV: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{7,}$/,\r\n  },\r\n};\r\n\r\nexport default config;\r\n","import { createBrowserHistory as createHistory } from \"history\";\r\nexport default createHistory();","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { cookies } from 'utils/cookies';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { LOGIN, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\nimport { LOGIN_FAILED } from 'screens/Login/reducers';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport history from \"utils/history\";\r\n\r\n\r\nconst login = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'login';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doLogin(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(login, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null) {\r\n      if (response.data.error.MessageCode === 0) {\r\n        yield put({\r\n          type: request.response.success,\r\n          payload: data.User,\r\n        });\r\n        yield cookies.set(COOKIES_TYPE.AUTH_TOKEN, data, { path: '/' });\r\n        yield history.push(\"/\");\r\n      } else if (response.data.error.Message === 'User is not active') {\r\n        throw new Error('Tài khoản này chưa được kích hoạt, xin hãy vào email của bạn để kích hoạt tài khoản. Nếu không thể kích hoạt, bấm VÀO ĐÂY để gửi lại mã');\r\n      } else {\r\n        yield cookies.remove(COOKIES_TYPE.AUTH_TOKEN);\r\n        yield put({\r\n          type: LOGIN_FAILED,\r\n        });\r\n        throw new Error(response.data.error.Message);\r\n      }\r\n    } else {\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'error',\r\n          title: 'Login',\r\n          content: 'Đã xảy ra lỗi, vui lòng tải lại trang',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Login',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchLogin() {\r\n  yield takeLatest(LOGIN, doLogin);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { cookies } from 'utils/cookies';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { SIGNUP, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nconst signUp = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doSignUp(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(signUp, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data;\r\n    if (cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null) {\r\n      if (response.data.error.MessageCode === 0) {\r\n        yield put({\r\n          type: request.response.success,\r\n          payload: data,\r\n        });\r\n        yield put({\r\n          type: COMMON_SHOW_NOTIFICATION,\r\n          data: {\r\n            type: 'success',\r\n            title: 'Sign Up',\r\n            content: 'Chúng tôi đã gửi cho bạn email, hãy bấm vào đường link chúng tôi gửi để kích hoạt tài khoản',\r\n            time: new Date(),\r\n          },\r\n        });\r\n      }\r\n    } else {\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'error',\r\n          title: 'Sign Up',\r\n          content: 'Đã xảy ra lỗi, vui lòng tải lại trang',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Sign Up',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSignUp() {\r\n  yield takeLatest(SIGNUP, doSignUp);\r\n}\r\n","import { takeLatest } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { IRequest, INotification } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nfunction doShowNotification(request: IRequest<INotification>) {\r\n  try {\r\n    if (request.data.type === 'error') {\r\n      toast.error(`${request.data.content === 'Error: Network Error' ? 'Mất kết nối, hãy kiểm tra lại đường truyền' : request.data.content}`, {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    } else if (request.data.type === 'success') {\r\n      toast.success(`${request.data.content}`, {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n    // toast('Wow so easy!', {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 5000,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n  } catch (err) { }\r\n}\r\n\r\nexport default function* watchShowNotification() {\r\n  yield takeLatest(COMMON_SHOW_NOTIFICATION, doShowNotification);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest, TypeAny } from 'interfaces/common';\r\nimport { GET_BRACKET_BOARD_INFO } from 'redux-saga/actions';\r\n\r\nconst queryBracketBoardInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nlet listMatchesFull: IParams[] = [];\r\nlet listWinMatchesFull: IParams[] = [];\r\nlet listLoseMatchesFull: IParams[] = [];\r\nlet listRound: IParams[] = [];\r\nlet listRRRound: IParams[] = [];\r\nlet listTableRR: IParams[] = [];\r\nlet listTableSE: IParams[] = [];\r\nlet listTableDE: IParams[] = [];\r\nlet listWinRound: IParams[] = [];\r\nlet listLoseRound: IParams[] = [];\r\n\r\nconst DFS = (node: IParams, number: number, maxRound: number, fakeId?: number) => {\r\n  if (node.left != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId! * 2);\r\n      }\r\n    } else {\r\n      DFS(node.left as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.left == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.left = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.left as unknown as IParams, number, maxRound);\r\n  }\r\n  if (node.right != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.right as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.right as unknown as IParams, number, maxRound, (fakeId! * 2) + 1);\r\n      }\r\n    } else {\r\n      DFS(node.right as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.right == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.right = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.right as unknown as IParams, number, maxRound);\r\n  }\r\n  if (number === 1) {\r\n    listMatchesFull.push(node);\r\n  } else if (number === 2) {\r\n    listWinMatchesFull.push(node);\r\n  } else if (number === 3) {\r\n    if (((node.data as unknown as IParams).name as string).includes('L')) {\r\n      listLoseMatchesFull.push({ ...node, fakeId });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* doQueryBracketBoardInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryBracketBoardInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    let tempVar: IParams = {};\r\n    let tempVar2: IParams = {};\r\n    if (response.data.error.MessageCode === 0) {\r\n      if (data.Schedule != null && data.Schedule.finalStageSchedule != null) {\r\n        if (data.Schedule.finalStageSchedule.formatName === 'Round Robin') {\r\n          let listMatches: IParams[] = [];\r\n          for (let i = 1; i <= data.Schedule.finalStageSchedule.totalRound; i++) {\r\n            for (let j = 0; j < data.Schedule.finalStageSchedule.matches.length; j++) {\r\n              if (data.Schedule.finalStageSchedule.matches[j].roundNo === i) {\r\n                listMatches.push(data.Schedule.finalStageSchedule.matches[j] as IParams);\r\n              }\r\n            }\r\n            listRRRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n            listMatches = [];\r\n          }\r\n          tempVar = { finalStage: { listRRRound } };\r\n          listRRRound = [];\r\n        } else {\r\n          if (data.Schedule.finalStageSchedule.winBranch == null) {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.bracket.root, 1, data.Schedule.finalStageSchedule.bracket.root.data.roundNo);\r\n            let listMatches: IParams[] = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.bracket.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listMatchesFull.length; j++) {\r\n                if ((listMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listMatches.push(listMatchesFull[j] as IParams);\r\n                }\r\n              }\r\n              listRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n              listMatches = [];\r\n            }\r\n            tempVar = { finalStage: { listRound } };\r\n            listRound = [];\r\n            listMatchesFull = [];\r\n          } else {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.winBranch.root, 2, data.Schedule.finalStageSchedule.winBranch.root.data.roundNo);\r\n            let listWinMatches = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.winBranch.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listWinMatches.push(listWinMatchesFull[j]);\r\n                }\r\n              }\r\n              listWinRound.push({ listWinMatches, roundName: data.Schedule.finalStageSchedule.winRoundsNaming[i - 1] } as unknown as IParams);\r\n              listWinMatches = [];\r\n            }\r\n            if (data.Schedule.finalStageSchedule.loseBranch.root != null) {\r\n              yield call(DFS, data.Schedule.finalStageSchedule.loseBranch.root, 3, data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo, 1);\r\n              let listLoseMatches = [];\r\n              for (let i = 1; i <= data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo; i++) {\r\n                for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                  if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                    listLoseMatches.push(listLoseMatchesFull[j]);\r\n                  }\r\n                }\r\n                listLoseRound.push({ listLoseMatches, roundName: data.Schedule.finalStageSchedule.loseRoundsNaming[i - 1] } as unknown as IParams);\r\n                listLoseMatches = [];\r\n              }\r\n            }\r\n            tempVar = { finalStage: { listWinRound, listLoseRound } };\r\n            listWinRound = [];\r\n            listWinMatchesFull = [];\r\n            listLoseRound = [];\r\n            listLoseMatchesFull = [];\r\n          }\r\n        }\r\n\r\n      }\r\n      if (data.Schedule != null && data.Schedule.hasGroupStage === true) {\r\n        if (data.Schedule.groupStageSchedule != null && Object.keys(data.Schedule.groupStageSchedule).length > 0) {\r\n          if (data.Schedule.groupStageSchedule.formatName === 'Round Robin') {\r\n            for (let i = 0; i < data.Schedule.groupStageSchedule.tables.length; i++) {\r\n              let listMatches: IParams[] = [];\r\n              if (data.Schedule.groupStageSchedule.tables[i].totalRound != null) {\r\n                for (let j = 1; j <= data.Schedule.groupStageSchedule.tables[i].totalRound; j++) {\r\n                  if (data.Schedule.groupStageSchedule.tables[i].matches != null) {\r\n                    for (let k = 0; k < data.Schedule.groupStageSchedule.tables[i].matches.length; k++) {\r\n                      if (data.Schedule.groupStageSchedule.tables[i].matches[k].roundNo === j) {\r\n                        listMatches.push(data.Schedule.groupStageSchedule.tables[i].matches[k] as IParams);\r\n                      }\r\n                    }\r\n                    listRRRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[i].roundsNaming[j - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n              }\r\n              listTableRR.push({ listRRRound, tableName: data.Schedule.groupStageSchedule.tables[i].tableName } as IParams);\r\n              listRRRound = [];\r\n            }\r\n            tempVar2 = { groupStage: { listTableRR } };\r\n            listTableRR = [];\r\n          } else {\r\n            if (data.Schedule.groupStageSchedule.formatName !== 'Double Elimination') {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                if (data.Schedule.groupStageSchedule.tables[k].bracket != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].bracket.root, 1, data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo);\r\n                  let listMatches: IParams[] = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listMatchesFull.length; j++) {\r\n                      if ((listMatchesFull[j].data as IParams).roundNo === i) {\r\n                        listMatches.push(listMatchesFull[j] as IParams);\r\n                      }\r\n                    }\r\n                    listRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[k].roundsNaming[i - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n                listTableSE.push({ listRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName } as IParams);\r\n                listRound = [];\r\n                listMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableSE } };\r\n              listTableSE = [];\r\n            } else {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                yield call(DFS, data.Schedule.groupStageSchedule.tables[k].winBranch.root, 2, data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo);\r\n                let listWinMatches = [];\r\n                for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo; i++) {\r\n                  for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                    if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                      listWinMatches.push(listWinMatchesFull[j]);\r\n                    }\r\n                  }\r\n                  listWinRound.push({ listWinMatches, roundName: data.Schedule.groupStageSchedule.tables[k].winRoundsNaming[i - 1] } as IParams);\r\n                  listWinMatches = [];\r\n                }\r\n                if (data.Schedule.groupStageSchedule.tables[k].loseBranch != null && data.Schedule.groupStageSchedule.tables[k].loseBranch.root != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].loseBranch.root, 3, data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo, 1);\r\n                  let listLoseMatches = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                      if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                        listLoseMatches.push(listLoseMatchesFull[j]);\r\n                      }\r\n                    }\r\n                    listLoseRound.push({ listLoseMatches, roundName: data.Schedule.groupStageSchedule.tables[k].loseRoundsNaming[i - 1] } as IParams);\r\n                    listLoseMatches = [];\r\n                  }\r\n                }\r\n                listTableDE.push({ listWinRound, listLoseRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName });\r\n                listWinRound = [];\r\n                listWinMatchesFull = [];\r\n                listLoseRound = [];\r\n                listLoseMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableDE } };\r\n              listTableDE = [];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {\r\n          ...tempVar,\r\n          ...tempVar2\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeLatest(GET_BRACKET_BOARD_INFO, doQueryBracketBoardInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_USER_INFO } from 'redux-saga/actions';\r\n\r\n\r\nconst queryUserInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryUserInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryUserInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { User: data.User, Config: response.data.config.Global },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryUserInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryUserInfo() {\r\n  yield takeLatest(QUERY_USER_INFO, doQueryUserInfo);\r\n}\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\nimport { cookies } from 'utils/cookies';\r\nimport { LOGOUT } from 'redux-saga/actions';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport history from \"utils/history\";\r\nimport { LOGIN_FAILED } from 'screens/Login/reducers';\r\n\r\nfunction* doLogOut() {\r\n  try {\r\n    yield cookies.remove(COOKIES_TYPE.AUTH_TOKEN, { path: '/' });\r\n    yield put({\r\n      type: LOGIN_FAILED,\r\n    });\r\n    yield history.push(\"/login\");\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\nexport default function* watchLogOut() {\r\n  yield takeLatest(LOGOUT, doLogOut);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_TOURNAMENT_INFO } from 'redux-saga/actions';\r\n\r\n\r\nconst queryTournamentInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryTournamentInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryTournamentInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Tournament: data.Tournament, Config: response.data.config.Global },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryTournamentInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryTournamentInfo() {\r\n  yield takeLatest(QUERY_TOURNAMENT_INFO, doQueryTournamentInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CHECK_USERNAME_EXISTED } from 'redux-saga/actions';\r\n\r\n\r\nconst isUsernameExisted = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user/getByUsername';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doIsUsernameExisted(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(isUsernameExisted, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (data.User) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: true,\r\n      });\r\n    } else {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: false,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchIsUsernameExisted() {\r\n  yield takeLatest(CHECK_USERNAME_EXISTED, doIsUsernameExisted);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_TOURNAMENT_OF_USER } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListTournamentsOfUser = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournaments/getByUserId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListTournamentsOfUser(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListTournamentsOfUser, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Tournaments: data.Tournaments, TotalPage: data.TotalPage },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListTournamentsOfUser',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListTournamentsOfUser() {\r\n  yield takeLatest(QUERY_LIST_TOURNAMENT_OF_USER, doQueryListTournamentsOfUser);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListTeams = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = param.userId != null ? 'teams/getByUserId' : 'teams/getByCompetitionId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListTeams(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListTeams, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Teams,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListTeams',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListTeams() {\r\n  yield takeLatest(QUERY_LIST_TEAM, doQueryListTeams);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CREATE_NEW_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\nimport history from \"utils/history\";\r\n\r\n\r\nconst createNewTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doCreateNewTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(createNewTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield history.push(`/tournament/${data.Tournament.id}`);\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'CreateNewTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchCreateNewTournament() {\r\n  yield takeLatest(CREATE_NEW_TOURNAMENT, doCreateNewTournament);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_USER_INFO } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst editUserInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditUserInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editUserInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditUserInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditUserInfo() {\r\n  yield takeLatest(EDIT_USER_INFO, doEditUserInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_TOURNAMENT_INFO } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\n\r\n\r\nconst editTournamentInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditTournamentInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editTournamentInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTournamentInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditTournamentInfo() {\r\n  yield takeLatest(EDIT_TOURNAMENT_INFO, doEditTournamentInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListCompetitionOfTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competitions/getByTournamentId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListCompetitionOfTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    \r\n    const response = yield call(queryListCompetitionOfTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Competitions,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListCompetitionOfTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListCompetitionOfTournament() {\r\n  yield takeLatest(QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID, doQueryListCompetitionOfTournament);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\r\n\r\nconst addACompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddACompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addACompetition, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Competition,\r\n      });\r\n      yield put({\r\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n        response: {\r\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            tournamentId: request.data.data.tournamentId,\r\n            limit: 99,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddACompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddACompetition() {\r\n  yield takeLatest(ADD_A_COMPETITION, doAddACompetition);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CHECK_EMAIL_EXISTED } from 'redux-saga/actions';\r\n\r\n\r\nconst isEmailExisted = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user/getByEmail';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doIsEmailExisted(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(isEmailExisted, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (data.User) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: true,\r\n      });\r\n    } else {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: false,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchIsEmailExisted() {\r\n  yield takeLatest(CHECK_EMAIL_EXISTED, doIsEmailExisted);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_TOURNAMENT } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListTournaments = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournaments';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListTournaments(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListTournaments, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Tournaments: data.Tournaments, TotalPage: data.TotalPage },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListTournaments',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListTournaments() {\r\n  yield takeLatest(QUERY_LIST_TOURNAMENT, doQueryListTournaments);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_PLAYER_OF_TEAM } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListPlayerOfTeam = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'players/getByTeamId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListPlayerOfTeam(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListPlayerOfTeam, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Players,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListPlayerOfTeam',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListPlayerOfTeam() {\r\n  yield takeLatest(QUERY_LIST_PLAYER_OF_TEAM, doQueryListPlayerOfTeam);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { ACTIVE_ACCOUNT } from 'redux-saga/actions';\r\n\r\nconst activeAccount = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'login/verify-authentication';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doActiveAccount(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(activeAccount, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchActiveAccount() {\r\n  yield takeLatest(ACTIVE_ACCOUNT, doActiveAccount);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { SEARCH_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\n\r\nconst searchTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournaments/getBySearchString';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doSearchTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(searchTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {Tournaments: data.Tournaments, TotalPage: data.TotalPage},\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SearchTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSearchTournament() {\r\n  yield takeLatest(SEARCH_TOURNAMENT, doSearchTournament);\r\n}\r\n","import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, USER_UPDATE_BACKGROUND } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}user/uploadBackground`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateBackground(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.User,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateBackground() {\r\n  yield takeLatest(USER_UPDATE_BACKGROUND, doUpdateBackground);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_USER } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListUsers = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'users';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListUsers(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListUsers, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Users: data.Users, TotalPage: data.TotalPage },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListUsers',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListUsers() {\r\n  yield takeLatest(QUERY_LIST_USER, doQueryListUsers);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { SEARCH_USER, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\n\r\nconst searchUsers = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'users/getBySearchString';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doSearchUsers(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(searchUsers, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Users: data.Users, TotalPage: data.TotalPage },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SearchUsers',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSearchUsers() {\r\n  yield takeLatest(SEARCH_USER, doSearchUsers);\r\n}\r\n","import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, USER_UPDATE_AVATAR } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}user/uploadAvatar`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateAvatar(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.User,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateAvatar() {\r\n  yield takeLatest(USER_UPDATE_AVATAR, doUpdateAvatar);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_SPORTS_BY_TOURNAMENT } from 'redux-saga/actions';\r\n\r\n\r\nconst querySportsByTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'sports/getByTournamentId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQuerySportsByTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(querySportsByTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Sports,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QuerySportsByTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQuerySportsByTournament() {\r\n  yield takeLatest(QUERY_SPORTS_BY_TOURNAMENT, doQuerySportsByTournament);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT } from 'redux-saga/actions';\r\n\r\n\r\nconst queryCompetitionsBySportAndTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competitions/getByTournamentIdAndSportId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryCompetitionsBySportAndTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryCompetitionsBySportAndTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Competitions,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryCompetitionsBySportAndTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryCompetitionsBySportAndTournament() {\r\n  yield takeLatest(QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, doQueryCompetitionsBySportAndTournament);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_TEAM_TO_COMPETITION, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\nconst addATeamToCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddATeamToCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addATeamToCompetition, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddATeamToCompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddATeamToCompetition() {\r\n  yield takeLatest(ADD_A_TEAM_TO_COMPETITION, doAddATeamToCompetition);\r\n}\r\n","import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, TOURNAMENT_UPDATE_AVATAR } from 'redux-saga/actions';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}tournament/uploadAvatar`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateAvatarTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Tournament,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateAvatarTournament() {\r\n  yield takeLatest(TOURNAMENT_UPDATE_AVATAR, doUpdateAvatarTournament);\r\n}\r\n","import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, TOURNAMENT_UPDATE_BACKGROUND } from 'redux-saga/actions';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}tournament/uploadAvatar`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateBackgroundTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Tournament,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateBackgroundTournament() {\r\n  yield takeLatest(TOURNAMENT_UPDATE_BACKGROUND, doUpdateBackgroundTournament);\r\n}\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport { IRequest, IParams } from 'interfaces/common';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED } from 'components/BracketTeam/reducers';\r\nimport { ADD_LIST_TEAM_SELECTING, SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nfunction* doAddListTeamSelecting(request: IRequest<IParams>) {\r\n  try {\r\n    yield put({\r\n      type: request.response.success,\r\n      payload: request.data.listTeamId,\r\n    });\r\n    if ((request.data.listTeamId as number[]).length === 2) {\r\n      yield put({\r\n        type: SWAP_TWO_TEAM_IN_BRACKET,\r\n        response: {\r\n          success: SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,\r\n          failed: SWAP_TWO_TEAM_IN_BRACKET_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            team1Id: (request.data.listTeamId as number[])[0],\r\n            team2Id: (request.data.listTeamId as number[])[1],\r\n          },\r\n          data: {\r\n            competitionId: request.data.competitionId,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTournamentInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeEvery(ADD_LIST_TEAM_SELECTING, doAddListTeamSelecting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION, DELETE_LIST_SELECTING_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\n\r\nconst swapTwoTeamInBracket = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'teams/swap';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doSwapTwoTeamInBracket(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(swapTwoTeamInBracket, request.data.data, request.data.path, request.data.param);\r\n    yield put({\r\n      type: DELETE_LIST_SELECTING_TEAM,\r\n    });\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.success,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SwapTwoTeamInBracket',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSwapTwoTeamInBracket() {\r\n  yield takeLatest(SWAP_TWO_TEAM_IN_BRACKET, doSwapTwoTeamInBracket);\r\n}\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\nimport { DELETE_LIST_SELECTING_TEAM, ADD_LIST_TEAM_SELECTING } from 'redux-saga/actions';\r\nimport { ADD_LIST_TEAM_SELECTING_SUCCESS, ADD_LIST_TEAM_SELECTING_FAILED } from 'components/BracketTeam/reducers';\r\n\r\nfunction* doDeleteListSelectingTeam() {\r\n  try {\r\n    yield put({\r\n      type: ADD_LIST_TEAM_SELECTING,\r\n      response: {\r\n        success: ADD_LIST_TEAM_SELECTING_SUCCESS,\r\n        failed: ADD_LIST_TEAM_SELECTING_FAILED,\r\n      },\r\n      data: { listTeamId: [] },\r\n    });\r\n  } catch (error) {\r\n  }\r\n}\r\n\r\nexport default function* watchDeleteListSelectingTeam() {\r\n  yield takeLatest(DELETE_LIST_SELECTING_TEAM, doDeleteListSelectingTeam);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_COMPETITION_INFO } from 'redux-saga/actions';\r\n\r\n\r\nconst queryCompetitionInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryCompetitionInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryCompetitionInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Competition: data.competition, Config: response.data.config.Global},\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryCompetitionInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryCompetitionInfo() {\r\n  yield takeLatest(QUERY_COMPETITION_INFO, doQueryCompetitionInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_SPORTS } from 'redux-saga/actions';\r\n\r\n\r\nconst queryAllSports = () => {\r\n  const uri = 'sports';\r\n  return query(uri, METHOD.GET, {}, {}, '');\r\n};\r\n\r\nfunction* doQueryAllSports(request: IRequest<null>) {\r\n  try {\r\n    const response = yield call(queryAllSports);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Sports,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryAllSports',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryAllSports() {\r\n  yield takeLatest(QUERY_ALL_SPORTS, doQueryAllSports);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_SPORT_INFO } from 'redux-saga/actions';\r\n\r\n\r\nconst querySportInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'sport';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQuerySportInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(querySportInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Sport,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QuerySportInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQuerySportInfo() {\r\n  yield takeLatest(QUERY_SPORT_INFO, doQuerySportInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\n\r\n\r\nconst editTeam = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditTeam(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editTeam, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTeam',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditTeam() {\r\n  yield takeLatest(EDIT_TEAM, doEditTeam);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_FINAL_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\n\r\nconst queryFinalStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'finalStageSetting/getByCompetitionId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryFinalStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryFinalStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.FinalStageSetting,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryFinalStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryFinalStageSetting() {\r\n  yield takeLatest(QUERY_FINAL_STAGE_SETTING, doQueryFinalStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_GROUP_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\n\r\nconst queryGroupStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'groupStageSetting/getByCompetitionId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryGroupStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryGroupStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.GroupStageSetting,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryGroupStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryGroupStageSetting() {\r\n  yield takeLatest(QUERY_GROUP_STAGE_SETTING, doQueryGroupStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_FORMATS } from 'redux-saga/actions';\r\n\r\n\r\nconst queryAllFormat = () => {\r\n  const uri = 'formats';\r\n  return query(uri, METHOD.GET, {}, {}, '');\r\n};\r\n\r\nfunction* doQueryAllFormat(request: IRequest<null>) {\r\n  try {\r\n    const response = yield call(queryAllFormat);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.CompetitionSettings,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryAllFormat',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryAllFormat() {\r\n  yield takeLatest(QUERY_ALL_FORMATS, doQueryAllFormat);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_COMPETITION_INFO_SUCCESS } from 'screens/CompetitionInfo/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_COMPETITION } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst editCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editCompetition, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_COMPETITION_INFO_SUCCESS,\r\n        payload: { ...store.getState().competitionInfo, Competition: data.Competition },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditCompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditCompetition() {\r\n  yield takeLatest(EDIT_COMPETITION, doEditCompetition);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_FINAL_STAGE_SETTING_SUCCESS } from 'screens/CompetitionInfo/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_FINAL_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\n\r\nconst editFinalStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'finalStageSetting';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditFinalStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editFinalStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_FINAL_STAGE_SETTING_SUCCESS,\r\n        payload: data.FinalStageSetting,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditFinalStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditFinalStageSetting() {\r\n  yield takeLatest(EDIT_FINAL_STAGE_SETTING, doEditFinalStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_GROUP_STAGE_SETTING_SUCCESS } from 'screens/CompetitionInfo/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_GROUP_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\n\r\nconst editGroupStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'groupStageSetting';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditGroupStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editGroupStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_GROUP_STAGE_SETTING_SUCCESS,\r\n        payload: data.GroupStageSetting,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditGroupStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditGroupStageSetting() {\r\n  yield takeLatest(EDIT_GROUP_STAGE_SETTING, doEditGroupStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, CREATE_A_FINAL_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\nconst createAFinalStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'finalStageSetting';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doCreateAFinalStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(createAFinalStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'CreateAFinalStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchCreateAFinalStageSetting() {\r\n  yield takeLatest(CREATE_A_FINAL_STAGE_SETTING, doCreateAFinalStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, CREATE_A_GROUP_STAGE_SETTING } from 'redux-saga/actions';\r\n\r\nconst createAGroupStageSetting = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'groupStageSetting';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doCreateAGroupStageSetting(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(createAGroupStageSetting, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'CreateAGroupStageSetting',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchCreateAGroupStageSetting() {\r\n  yield takeLatest(CREATE_A_GROUP_STAGE_SETTING, doCreateAGroupStageSetting);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, UPDATE_SCHEDULE } from 'redux-saga/actions';\r\n\r\nconst updateSchedule = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doUpdateSchedule(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(updateSchedule, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'UpdateSchedule',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateSchedule() {\r\n  yield takeLatest(UPDATE_SCHEDULE, doUpdateSchedule);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { GET_BRACKET_RANK_INFO } from 'redux-saga/actions';\r\n\r\nconst queryBracketRankInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryBracketRankInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryBracketRankInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {\r\n          finalStageScheduleRanking: data.Schedule.finalStageSchedule.rankingTable,\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketRankInfo() {\r\n  yield takeLatest(GET_BRACKET_RANK_INFO, doQueryBracketRankInfo);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\r\nimport { DELETE_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\n\r\nconst deleteCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.DELETE, datas, params, paths);\r\n};\r\n\r\nfunction* doDeleteCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(deleteCompetition, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n      yield put({\r\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n        response: {\r\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            tournamentId: request.data.data.tournamentId,\r\n            limit: 99,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchDeleteCompetition() {\r\n  yield takeLatest(DELETE_COMPETITION, doDeleteCompetition);\r\n}\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { IParams, IRequest, IBigRequest } from 'interfaces/common';\r\nimport store from 'redux-saga/store';\r\nimport { COMMON_SHOW_NOTIFICATION, START_TOURNAMENT } from 'redux-saga/actions';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\nimport { query, METHOD } from 'utils/socketApi';\r\n\r\nconst startTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament/start';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doStartTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(startTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'StartTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchStartTournament() {\r\n  yield takeLatest(START_TOURNAMENT, doStartTournament);\r\n}\r\n","import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, GET_MATCH_RESULT } from 'redux-saga/actions';\r\n\r\n\r\nconst getMatchResult = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'results/getByMatchId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doGetMatchResult(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(getMatchResult, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'GetMatchResult',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchGetMatchResult() {\r\n  yield takeLatest(GET_MATCH_RESULT, doGetMatchResult);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { login } from './sagas/Login';\r\nimport { signUp } from './sagas/SignUp';\r\nimport { showNotification } from './sagas/Common';\r\nimport { queryBracketBoardInfo } from './sagas/BracketBoard';\r\nimport { queryUserInfo } from './sagas/QueryUserInfo';\r\nimport { logOut } from './sagas/LogOut';\r\nimport { queryTournamentInfo } from './sagas/QueryTournamentInfo';\r\nimport { isUsernameExisted } from './sagas/IsUsernameExisted';\r\nimport { queryListTournamentsOfUser } from './sagas/QueryListTournamentsOfUser';\r\nimport { queryListTeams } from './sagas/QueryListTeams';\r\nimport { createNewTournament } from './sagas/CreateNewTournament';\r\nimport { editUserInfo } from './sagas/EditUserInfo';\r\nimport { editTournamentInfo } from './sagas/EditTournamentInfo';\r\nimport { queryListCompetitionOfTournament } from './sagas/QueryListCompetitionOfTournament';\r\nimport { addACompetition } from './sagas/AddACompetition';\r\nimport { isEmailExisted } from './sagas/IsEmailExisted';\r\nimport { queryListTournaments } from './sagas/QueryListTournament';\r\nimport { queryListPlayerOfTeam } from './sagas/QueryListPlayerOfTeam';\r\nimport { activeAccount } from './sagas/ActiveAccount';\r\nimport { searchTournament } from './sagas/SearchTournaments';\r\nimport { updateBackground } from './sagas/UpdateBackground';\r\nimport { queryListUsers } from './sagas/QueryListUsers';\r\nimport { searchUsers } from './sagas/SearchUsers';\r\nimport { updateAvatar } from './sagas/UpdateAvatar';\r\nimport { querySportsByTournament } from './sagas/QuerySportsByTournament';\r\nimport { queryCompetitionsBySportAndTournament } from './sagas/QueryCompetitionsBySportAndTournament';\r\nimport { addATeamToCompetition } from './sagas/AddATeamToCompetition';\r\nimport { updateAvatarTournament } from './sagas/UpdateAvatarTournament';\r\nimport { updateBackgroundTournament } from './sagas/UpdateBackgroundTournament';\r\nimport { addListTeamSelecting } from './sagas/AddListTeamSelecting';\r\nimport { swapTwoTeamInBracket } from './sagas/SwapTwoTeamInBracket';\r\nimport { deleteListSelectingTeam } from './sagas/DeleteListSelectingTeam';\r\nimport { queryCompetitionInfo } from './sagas/QueryCompetitionInfo';\r\nimport { queryAllSports } from './sagas/QueryAllSports';\r\nimport { querySportInfo } from './sagas/QuerySportInfo';\r\nimport { editTeam } from './sagas/EditTeam';\r\nimport { queryFinalStageSetting } from './sagas/QueryFinalStageSetting';\r\nimport { queryGroupStageSetting } from './sagas/QueryGroupStageSetting';\r\nimport { queryAllFormat } from './sagas/QueryAllFormat';\r\nimport { editCompetition } from './sagas/EditCompetition';\r\nimport { editFinalStageSetting } from './sagas/EditFinalStageSetting';\r\nimport { editGroupStageSetting } from './sagas/EditGroupStageSetting';\r\nimport { createAFinalStageSetting } from './sagas/CreateAFinalStageSetting';\r\nimport { createAGroupStageSetting } from './sagas/CreateAGroupStageSetting';\r\nimport { updateSchedule } from './sagas/UpdateSchedule';\r\nimport { queryBracketRankInfo } from './sagas/BracketRank';\r\nimport { deleteCompetition } from './sagas/DeleteCompetition';\r\nimport { startTournament } from './sagas/StartTournament';\r\nimport { getMatchResult } from './sagas/GetMatchResult';\r\n\r\nexport default function* () {\r\n  yield all([\r\n    login(),\r\n    signUp(),\r\n    showNotification(),\r\n    queryBracketBoardInfo(),\r\n    queryUserInfo(),\r\n    logOut(),\r\n    queryTournamentInfo(),\r\n    isUsernameExisted(),\r\n    isEmailExisted(),\r\n    queryListTournamentsOfUser(),\r\n    queryListTournaments(),\r\n    queryListTeams(),\r\n    createNewTournament(),\r\n    editUserInfo(),\r\n    editTournamentInfo(),\r\n    queryListCompetitionOfTournament(),\r\n    addACompetition(),\r\n    queryListPlayerOfTeam(),\r\n    activeAccount(),\r\n    searchTournament(),\r\n    updateBackground(),\r\n    updateAvatar(),\r\n    queryListUsers(),\r\n    searchUsers(),\r\n    querySportsByTournament(),\r\n    queryCompetitionsBySportAndTournament(),\r\n    addATeamToCompetition(),\r\n    updateAvatarTournament(),\r\n    updateBackgroundTournament(),\r\n    addListTeamSelecting(),\r\n    swapTwoTeamInBracket(),\r\n    deleteListSelectingTeam(),\r\n    queryCompetitionInfo(),\r\n    queryAllSports(),\r\n    querySportInfo(),\r\n    editTeam(),\r\n    queryFinalStageSetting(),\r\n    queryGroupStageSetting(),\r\n    queryAllFormat(),\r\n    editCompetition(),\r\n    editFinalStageSetting(),\r\n    editGroupStageSetting(),\r\n    createAFinalStageSetting(),\r\n    createAGroupStageSetting(),\r\n    updateSchedule(),\r\n    queryBracketRankInfo(),\r\n    deleteCompetition(),\r\n    startTournament(),\r\n    getMatchResult(),\r\n  ]);\r\n}","import {\r\n  applyMiddleware,\r\n  createStore\r\n} from 'redux';\r\nimport sagaMiddlewareFactory from 'redux-saga';\r\nimport reduxMiddleware from 'react-block-ui/lib/reduxMiddleware';\r\nimport { appReducer } from './reducers';\r\nimport sagas from './sagas';\r\n\r\nconst sagaMiddleware = sagaMiddlewareFactory();\r\n\r\nconst store = createStore(\r\n  appReducer,\r\n  applyMiddleware(sagaMiddleware, reduxMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(sagas);\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\n\r\ninterface ITextInputProps extends React.ClassAttributes<TextInput> {\r\n  label: string;\r\n  type?: string;\r\n  errorContent: string;\r\n  error: boolean;\r\n  value?: string;\r\n  defaultValue?: string;\r\n  style?: React.CSSProperties;\r\n\r\n  onChangeText(value: string): void;\r\n  onHandleSubmit?(): void;\r\n  onBlur?(): void;\r\n}\r\n\r\ninterface ITextInputState {\r\n}\r\n\r\nclass TextInput extends React.Component<ITextInputProps, ITextInputState> {\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  private onChangeValue = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChangeText(value.target.value);\r\n  }\r\n\r\n  private keyPressed = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\" && this.props.onHandleSubmit) {\r\n      this.props.onHandleSubmit();\r\n    }\r\n  }\r\n\r\n  private handleOnBlur = () => {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"omrs-input-group\">\r\n        <div className=\"TextInput-error-text-container\"><p className={`${this.props.error === true ? 'TextInput-error-text' : 'TextInput-non-error-text'}`}>{this.props.errorContent}</p></div>\r\n        <label className=\"omrs-input-underlined\">\r\n          <input style={this.props.style} required {...this.props.defaultValue && { defaultValue: this.props.defaultValue }} type={this.props.type} onChange={this.onChangeValue} onKeyPress={this.keyPressed} value={this.props.value} onBlur={this.handleOnBlur} />\r\n          <span className=\"omrs-input-label\">{this.props.label}</span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(TextInput);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport { Link } from 'react-router-dom';\r\nimport 'react-block-ui/style.css';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { LOGIN } from 'redux-saga/actions';\r\nimport { LOGIN_SUCCESS, LOGIN_FAILED } from 'screens/Login/reducers';\r\nimport { login } from './actions';\r\nimport './styles.css';\r\n\r\ninterface ILoginProps extends React.ClassAttributes<Login> {\r\n  login(params: IBigRequest): void;\r\n}\r\n\r\ninterface ILoginState {\r\n  username: string;\r\n  rememberMe: boolean;\r\n  password: string;\r\n  usernameError: boolean;\r\n  passwordError: boolean;\r\n  usernameErrorContent: string;\r\n  passwordErrorContent: string;\r\n}\r\n\r\nclass Login extends React.Component<ILoginProps, ILoginState> {\r\n  constructor(props: ILoginProps) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      usernameError: false,\r\n      usernameErrorContent: '',\r\n      passwordError: false,\r\n      rememberMe: false,\r\n      passwordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  private onChangeUserName = (value: string) => {\r\n    this.setState({ username: value, });\r\n  }\r\n\r\n  private onChangePassword = (value: string) => {\r\n    this.setState({ password: value, });\r\n  }\r\n\r\n  private onChangeRememberMe = (value: string) => {\r\n    this.setState({ rememberMe: !this.state.rememberMe, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let passwordError = false;\r\n    let passwordErrorContent = '';\r\n    let usernameErrorContent = '';\r\n    let usernameError = false;\r\n    if (this.state.password.includes(' ') || this.state.password.trim() === '') {\r\n      passwordError = true;\r\n      passwordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (this.state.username.trim() === '') {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống';\r\n    }\r\n\r\n    return { passwordError, passwordErrorContent, usernameErrorContent, usernameError };\r\n  }\r\n\r\n  private handleLogin = () => {\r\n    const { passwordError, passwordErrorContent, usernameErrorContent, usernameError } = this.validate();\r\n    this.setState({\r\n      passwordError,\r\n      passwordErrorContent,\r\n      usernameErrorContent,\r\n      usernameError,\r\n    });\r\n    if (passwordError === true || usernameError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n        rememberMe: this.state.rememberMe,\r\n      },\r\n    };\r\n\r\n    this.props.login(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={LOGIN}\r\n        unblock={[LOGIN_SUCCESS, LOGIN_FAILED]}\r\n      >\r\n        <div className=\"Container-login-container\">\r\n          <div className=\"Container-login\">\r\n            <div className=\"Container-login-middle\">\r\n              <h2>Đăng nhập</h2>\r\n              <p className=\"Long-introduction\">Chào mừng! Vui lòng nhập thông tin đăng nhập của bạn!</p>\r\n\r\n              <TextInput label={'Tên đăng nhập'} onChangeText={this.onChangeUserName} error={this.state.usernameError} errorContent={this.state.usernameErrorContent} onHandleSubmit={this.handleLogin} />\r\n              <TextInput label={'Mật khẩu'} type={'password'} onChangeText={this.onChangePassword} error={this.state.passwordError} errorContent={this.state.passwordErrorContent} onHandleSubmit={this.handleLogin} />\r\n              <div className=\"Login-option-container\">\r\n                <div className=\"Login-option-container-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.rememberMe}\r\n                      onChange={() => this.onChangeRememberMe}\r\n                    />\r\n            Nhớ tài khoản trên thiết bị này\r\n          </label>\r\n                </div>\r\n                <div className=\"Login-option-container-item Login-option-container-item1\">\r\n                  <Link to={'/forgotPassword'} style={{ textDecoration: 'none' }}>\r\n                    <p className=\"Forgot-password2\">Quên mật khẩu</p>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"Button-login-container\">\r\n                <div className=\"Button-login\" onClick={this.handleLogin}>\r\n                  <h4 className=\"Button-login-text\">Đăng nhập</h4>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    login,\r\n  }\r\n)(Login);","import { IBigRequest } from \"interfaces/common\";\r\nimport { LOGIN } from \"redux-saga/actions\";\r\nimport { LOGIN_SUCCESS, LOGIN_FAILED } from \"./reducers\";\r\n\r\nexport const login = (data: IBigRequest) => ({\r\n  type: LOGIN,\r\n  response: {\r\n    success: LOGIN_SUCCESS,\r\n    failed: LOGIN_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { CHECK_USERNAME_EXISTED } from \"redux-saga/actions\";\r\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED, CHECK_USERNAME_EXISTED_DEFAULT } from \"../global-reducers/IsUsernameExisted-reducer\";\r\n\r\nexport const checkUsernameExisted = (data: IBigRequest) => ({\r\n  type: CHECK_USERNAME_EXISTED,\r\n  response: {\r\n    success: CHECK_USERNAME_EXISTED_SUCCESS,\r\n    failed: CHECK_USERNAME_EXISTED_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const setUsernameExistedDefault = () => ({\r\n  type: CHECK_USERNAME_EXISTED_DEFAULT,\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport config from 'config';\r\nimport { checkUsernameExisted, setUsernameExistedDefault } from 'redux-saga/global-actions/CheckUsernameExisted-action';\r\nimport { checkEmailExisted, setEmailExistedDefault } from 'redux-saga/global-actions/CheckEmailExisted-action';\r\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED } from 'redux-saga/global-reducers/IsUsernameExisted-reducer';\r\nimport { CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS } from 'redux-saga/global-reducers/IsEmailExisted-reducer';\r\nimport { CHECK_USERNAME_EXISTED, CHECK_EMAIL_EXISTED, SIGNUP } from 'redux-saga/actions';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { signUp } from './actions';\r\nimport { SIGNUP_FAILED, SIGNUP_SUCCESS } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ISignUpProps extends React.ClassAttributes<SignUp> {\r\n  isUsernameExisted: boolean | null | {};\r\n  isEmailExisted: boolean | null | {};\r\n\r\n  signUp(param: IBigRequest): void;\r\n  checkUsernameExisted(param: IBigRequest): void;\r\n  checkEmailExisted(param: IBigRequest): void;\r\n  setUsernameExistedDefault(): void;\r\n  setEmailExistedDefault(): void;\r\n}\r\n\r\ninterface ISignUpState {\r\n  username: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  password: string;\r\n  email: string;\r\n  reConfirmPassword: string;\r\n  usernameError: boolean;\r\n  firstNameError: boolean;\r\n  passwordError: boolean;\r\n  lastNameError: boolean;\r\n  usernameErrorContent: string;\r\n  firstNameErrorContent: string;\r\n  passwordErrorContent: string;\r\n  lastNameErrorContent: string;\r\n  emailError: boolean;\r\n  reconfirmPasswordError: boolean;\r\n  emailErrorContent: string;\r\n  reconfirmPasswordErrorContent: string;\r\n}\r\n\r\nclass SignUp extends React.Component<ISignUpProps, ISignUpState> {\r\n  constructor(props: ISignUpProps) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      password: '',\r\n      email: '',\r\n      reConfirmPassword: '',\r\n      usernameError: false,\r\n      passwordError: false,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      usernameErrorContent: '',\r\n      lastNameErrorContent: '',\r\n      firstNameErrorContent: '',\r\n      passwordErrorContent: '',\r\n      emailError: false,\r\n      reconfirmPasswordError: false,\r\n      emailErrorContent: '',\r\n      reconfirmPasswordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ISignUpProps, nextState: ISignUpState) {\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === true) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Tài khoản này đã tồn tại',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === false) {\r\n      this.setState({\r\n        usernameError: false,\r\n        usernameErrorContent: 'Tên đăng nhập có thể sử dụng được',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === null) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === true) {\r\n      this.setState({\r\n        emailError: true,\r\n        emailErrorContent: 'Email này đã được sử dụng',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === false) {\r\n      this.setState({\r\n        emailError: false,\r\n        emailErrorContent: 'Email có thể sử dụng được',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === null) {\r\n      this.setState({\r\n        emailError: true,\r\n        emailErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    // if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === {}) {\r\n    //   this.setState({\r\n    //     usernameError: false,\r\n    //     usernameErrorContent: '',\r\n    //   });\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  private onChangeUserName = (value: string) => {\r\n    this.setState({ username: value, });\r\n  }\r\n\r\n  private onChangeFirstName = (value: string) => {\r\n    this.setState({ firstName: value, });\r\n  }\r\n\r\n  private onChangeLastName = (value: string) => {\r\n    this.setState({ lastName: value, });\r\n  }\r\n\r\n  private validateUsername = () => {\r\n    let usernameError = false;\r\n    let usernameErrorContent = '';\r\n    if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          username: this.state.username,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkUsernameExisted(params);\r\n    }\r\n\r\n    return { usernameError, usernameErrorContent };\r\n  }\r\n\r\n  private onBlurUserName = () => {\r\n    const { usernameError, usernameErrorContent } = this.validateUsername();\r\n    this.setState({\r\n      usernameError,\r\n      usernameErrorContent,\r\n    });\r\n    this.props.setUsernameExistedDefault();\r\n  }\r\n\r\n  private validateEmail = () => {\r\n    let emailError = false;\r\n    let emailErrorContent = '';\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          email: this.state.email,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkEmailExisted(params);\r\n    }\r\n\r\n    return { emailError, emailErrorContent };\r\n  }\r\n\r\n  private onBlurEmail = () => {\r\n    const { emailError, emailErrorContent } = this.validateEmail();\r\n    this.setState({\r\n      emailError,\r\n      emailErrorContent,\r\n    });\r\n    this.props.setEmailExistedDefault();\r\n  }\r\n\r\n  private onChangePassword = (value: string) => {\r\n    this.setState({ password: value, });\r\n  }\r\n\r\n  private onChangeEmail = (value: string) => {\r\n    this.setState({ email: value, });\r\n  }\r\n\r\n  private onChangeReconfirmPassword = (value: string) => {\r\n    this.setState({ reConfirmPassword: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let passwordError = false;\r\n    let passwordErrorContent = '';\r\n    let firstNameError = false;\r\n    let firstNameErrorContent = '';\r\n    let lastNameError = false;\r\n    let lastNameErrorContent = '';\r\n    let usernameErrorContent = '';\r\n    let usernameError = false;\r\n    let emailErrorContent = '';\r\n    let emailError = false;\r\n    let reconfirmPasswordErrorContent = '';\r\n    let reconfirmPasswordError = false;\r\n    if (this.state.password.includes(' ') || !config.regex.password.test(this.state.password) || this.state.password.trim() === '') {\r\n      passwordError = true;\r\n      passwordErrorContent = 'Mật khẩu không được trống, không chứa dấu cách, và phải chứa từ 8 đến 32 kí tự';\r\n    }\r\n    if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\r\n    }\r\n    if (this.state.firstName.trim() === '') {\r\n      firstNameError = true;\r\n      firstNameErrorContent = 'Tên không được trống';\r\n    }\r\n    if (this.state.lastName.trim() === '') {\r\n      lastNameError = true;\r\n      lastNameErrorContent = 'Họ không được trống';\r\n    }\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    }\r\n    if (this.state.reConfirmPassword !== this.state.password) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Nhập lại mật khẩu phải giống mật khẩu';\r\n    }\r\n\r\n    return { passwordError, passwordErrorContent, usernameErrorContent, usernameError, emailErrorContent, emailError, reconfirmPasswordErrorContent, reconfirmPasswordError, firstNameError, firstNameErrorContent, lastNameError, lastNameErrorContent };\r\n  }\r\n\r\n  private handleSignUp = () => {\r\n    const { passwordError, passwordErrorContent, usernameErrorContent, usernameError, emailErrorContent, emailError, reconfirmPasswordErrorContent, reconfirmPasswordError, firstNameError, firstNameErrorContent, lastNameError, lastNameErrorContent } = this.validate();\r\n    this.setState({\r\n      passwordError,\r\n      passwordErrorContent,\r\n      usernameErrorContent,\r\n      usernameError,\r\n      emailErrorContent,\r\n      emailError,\r\n      reconfirmPasswordErrorContent,\r\n      reconfirmPasswordError,\r\n      firstNameError,\r\n      firstNameErrorContent,\r\n      lastNameError,\r\n      lastNameErrorContent\r\n    });\r\n    if (passwordError === true || usernameError === true || reconfirmPasswordError === true || emailError === true || firstNameError === true || lastNameError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n        email: this.state.email,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n      },\r\n    };\r\n\r\n    this.props.signUp(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHECK_USERNAME_EXISTED}\r\n        unblock={[CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={CHECK_EMAIL_EXISTED}\r\n          unblock={[CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS]}\r\n        >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={SIGNUP}\r\n          unblock={[SIGNUP_FAILED, SIGNUP_SUCCESS]}\r\n        >\r\n          <div className=\"Container-login\">\r\n            <div className=\"Container-login-middle\">\r\n              <h2>Đăng ký</h2>\r\n              <p className=\"Long-introduction\">Bắt đầu dễ dàng bằng cách đăng ký để quản lý các giải đấu</p>\r\n\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Tên đăng nhập'} onChangeText={this.onChangeUserName} error={this.state.usernameError} errorContent={this.state.usernameErrorContent} onBlur={this.onBlurUserName} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Họ'} onChangeText={this.onChangeFirstName} error={this.state.firstNameError} errorContent={this.state.firstNameErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Tên'} onChangeText={this.onChangeLastName} error={this.state.lastNameError} errorContent={this.state.lastNameErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Email'} onChangeText={this.onChangeEmail} error={this.state.emailError} errorContent={this.state.emailErrorContent} onBlur={this.onBlurEmail} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Mật khẩu'} type={'password'} onChangeText={this.onChangePassword} error={this.state.passwordError} errorContent={this.state.passwordErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Xác nhận mật khẩu'} type={'password'} onChangeText={this.onChangeReconfirmPassword} error={this.state.reconfirmPasswordError} errorContent={this.state.reconfirmPasswordErrorContent} />\r\n\r\n              <div className=\"Button-login-container\" onClick={this.handleSignUp}>\r\n                <div className=\"Button-login\">\r\n                  <h4 className=\"Button-login-text\">Đăng ký</h4>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </ReduxBlockUi>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    isUsernameExisted: state.isUsernameExisted,\r\n    isEmailExisted: state.isEmailExisted,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { signUp, checkUsernameExisted, setUsernameExistedDefault, checkEmailExisted, setEmailExistedDefault }\r\n)(SignUp);","import { IBigRequest } from \"interfaces/common\";\r\nimport { SIGNUP } from \"redux-saga/actions\";\r\nimport { SIGNUP_SUCCESS, SIGNUP_FAILED } from \"./reducers\";\r\n\r\nexport const signUp = (data: IBigRequest) => ({\r\n  type: SIGNUP,\r\n  response: {\r\n    success: SIGNUP_SUCCESS,\r\n    failed: SIGNUP_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { CHECK_EMAIL_EXISTED } from \"redux-saga/actions\";\r\nimport { CHECK_EMAIL_EXISTED_SUCCESS, CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_DEFAULT } from \"../global-reducers/IsEmailExisted-reducer\";\r\n\r\nexport const checkEmailExisted = (data: IBigRequest) => ({\r\n  type: CHECK_EMAIL_EXISTED,\r\n  response: {\r\n    success: CHECK_EMAIL_EXISTED_SUCCESS,\r\n    failed: CHECK_EMAIL_EXISTED_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const setEmailExistedDefault = () => ({\r\n  type: CHECK_EMAIL_EXISTED_DEFAULT,\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport config from 'config';\r\nimport { forgotPassword } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IForgotPasswordProps extends React.ClassAttributes<ForgotPassword> {\r\n  forgotPassword(param: IBigRequest): void;\r\n}\r\n\r\ninterface IForgotPasswordState {\r\n  email: string;\r\n  emailError: boolean;\r\n  emailErrorContent: string;\r\n}\r\n\r\nclass ForgotPassword extends React.Component<IForgotPasswordProps, IForgotPasswordState> {\r\n  constructor(props: IForgotPasswordProps) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      emailError: false,\r\n      emailErrorContent: '',\r\n    };\r\n  }\r\n\r\n  private onChangeEmail = (value: string) => {\r\n    this.setState({ email: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let emailError = false;\r\n    let emailErrorContent = '';\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    }\r\n\r\n    return { emailError, emailErrorContent };\r\n  }\r\n\r\n  private handleSubmitForm = () => {\r\n    const { emailError, emailErrorContent, } = this.validate();\r\n    this.setState({\r\n      emailError,\r\n      emailErrorContent,\r\n    });\r\n    if (emailError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        email: this.state.email,\r\n      },\r\n    };\r\n\r\n    this.props.forgotPassword(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container-login\">\r\n        <div className=\"Container-login-middle\">\r\n          <h2>Quên mật khẩu</h2>\r\n          <p className=\"Long-introduction\">Nhập địa chỉ email của bạn và chúng tôi sẽ gửi cho bạn một liên kết để đặt lại mật khẩu của bạn.</p>\r\n\r\n          <TextInput onHandleSubmit={this.handleSubmitForm} label={'Email của bạn'} onChangeText={this.onChangeEmail} error={this.state.emailError} errorContent={this.state.emailErrorContent} />\r\n          <div className=\"Button-login-container\">\r\n            <div className=\"Button-login\" onClick={this.handleSubmitForm}>\r\n              <h4 className=\"Button-login-text\">Gửi</h4>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { forgotPassword, }\r\n)(ForgotPassword);","import { IBigRequest } from \"interfaces/common\";\r\nimport { FORGOT_PASSWORD } from \"redux-saga/actions\";\r\nimport { FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAILED } from \"./reducers\";\r\n\r\nexport const forgotPassword = (data: IBigRequest) => ({\r\n  type: FORGOT_PASSWORD,\r\n  response: {\r\n    success: FORGOT_PASSWORD_SUCCESS,\r\n    failed: FORGOT_PASSWORD_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\n\r\ninterface IHomeProps extends React.ClassAttributes<Home> {\r\n}\r\n\r\ninterface IHomeState {\r\n}\r\n\r\nclass Home extends React.Component<IHomeProps, IHomeState> {\r\n  constructor(props: IHomeProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container-login\">\r\n        <div className=\"Container-login-middle\">\r\n          <h1>Quản lý giải đấu đơn giản</h1>\r\n          {/* <BracketBoard /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(Home);","import { IParams } from \"interfaces/common\";\r\nimport { SET_HOVERING_TEAM, ON_EDIT_BRACKET_MODE, ADD_LIST_TEAM_SELECTING, DELETE_LIST_SELECTING_TEAM } from \"redux-saga/actions\";\r\nimport { ADD_LIST_TEAM_SELECTING_SUCCESS, ADD_LIST_TEAM_SELECTING_FAILED } from \"./reducers\";\r\n\r\nexport const setHoveringTeam = (data: number | null) => ({\r\n  type: SET_HOVERING_TEAM,\r\n  payload: data,\r\n});\r\n\r\nexport const onEditBracketMode = (data: boolean) => ({\r\n  type: ON_EDIT_BRACKET_MODE,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteListSelectingTeam = () => ({\r\n  type: DELETE_LIST_SELECTING_TEAM,\r\n});\r\n\r\nexport const addListTeamSelecting = (data: IParams) => ({\r\n  type: ADD_LIST_TEAM_SELECTING,\r\n  response: {\r\n    success: ADD_LIST_TEAM_SELECTING_SUCCESS,\r\n    failed: ADD_LIST_TEAM_SELECTING_FAILED,\r\n  },\r\n  data: data,\r\n});","import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Tabs, TabList, Tab, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport { onEditBracketMode, deleteListSelectingTeam } from 'components/BracketTeam/actions';\r\nimport './styles.css';\r\n\r\ninterface ICustomTabProps extends React.ClassAttributes<CustomTab> {\r\n  tabList: string[];\r\n  componentList: ReactNode[];\r\n  selectedIndex: number;\r\n\r\n  onEditBracketMode(status: boolean): void;\r\n  deleteListSelectingTeam(): void;\r\n}\r\n\r\ninterface IModalState {\r\n}\r\n\r\nclass CustomTab extends React.Component<ICustomTabProps, IModalState> {\r\n  constructor(props: ICustomTabProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Tabs\r\n        defaultIndex={this.props.selectedIndex}\r\n        onSelect={() => {\r\n          this.props.onEditBracketMode(false);\r\n          this.props.deleteListSelectingTeam();\r\n        }}\r\n        className={'Tabs-color'}\r\n      >\r\n        <TabList>\r\n          {this.props.tabList.map((item, index) => {\r\n            return (<Tab key={index}>{item}</Tab>);\r\n          })}\r\n        </TabList>\r\n        {this.props.componentList.map((item, index) => {\r\n          return (<TabPanel key={index}>{item}</TabPanel>);\r\n        })}\r\n      </Tabs>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { onEditBracketMode, deleteListSelectingTeam }\r\n)(CustomTab);","import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Modal, { Styles } from 'react-modal';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport './styles.css';\r\n\r\ninterface ICustomModalProps extends React.ClassAttributes<CustomModal> {\r\n  children?: ReactNode;\r\n  showModal: boolean;\r\n  customStyles: Styles;\r\n  confirmButtonVisible?: boolean;\r\n\r\n  handleCloseModal(): void;\r\n  handleConfirmModal(): void;\r\n}\r\n\r\ninterface IModalState {\r\n}\r\n\r\nclass CustomModal extends React.Component<ICustomModalProps, IModalState> {\r\n  constructor(props: ICustomModalProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    this.props.handleCloseModal();\r\n  }\r\n\r\n  private handleConfirmModal = () => {\r\n    this.props.handleConfirmModal();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.showModal}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={this.handleCloseModal}\r\n        style={this.props.customStyles}\r\n        ariaHideApp={false}\r\n      >\r\n        <div className=\"Modal-content-container\">\r\n        {this.props.children}\r\n        </div>\r\n        {this.props.confirmButtonVisible !== false && <div className=\"Modal-button-container\">\r\n          <div className=\"Modal-button\" onClick={this.handleConfirmModal}>\r\n            <p>Confirm</p>\r\n          </div>\r\n        </div>}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(CustomModal);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Teams from 'components/Teams';\r\nimport './styles.css';\r\n\r\ninterface ITournamentListTeamProps extends React.ClassAttributes<TournamentListTeam> {\r\n  id: number;\r\n}\r\n\r\ninterface ITournamentListTeamState {\r\n}\r\n\r\nclass TournamentListTeam extends React.Component<ITournamentListTeamProps, ITournamentListTeamState> {\r\n  constructor(props: ITournamentListTeamProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TournamentListTeam-container\">\r\n        {/* <Teams id={this.props.id} type={'competition'} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(TournamentListTeam);","import * as dateFns from 'date-fns';\r\n\r\nexport function formatDateToString(date: Date | null, formatOutput = 'yyyyMMdd') {\r\n  if (date == null) {\r\n    return null;\r\n  }\r\n  return dateFns.format(date, formatOutput);\r\n}\r\n\r\nexport function formatTimeToDisplay(\r\n  stringInput?: string,\r\n  formatOutput = 'HH:mm:ss',\r\n  formatInput = 'yyyyMMddHHmmss',\r\n  ignoreTimeZone?: boolean\r\n) {\r\n  try {\r\n    if (!stringInput) {\r\n      return null;\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    if (ignoreTimeZone !== true) {\r\n      time = dateFns.addHours(time, 7);\r\n    }\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatDateToDisplay(stringInput?: string, formatOutput = 'dd/MM/yyyy', formatInput = 'yyyyMMdd') {\r\n  try {\r\n    if (!stringInput) {\r\n      return '';\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    // time = dateFns.addHours(time, 7);\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatStringToDate(stringInput: string | undefined, formatInput = 'yyyyMMdd') {\r\n  if (stringInput == null) {\r\n    return new Date();\r\n  }\r\n\r\n  return dateFns.parse(stringInput, formatInput, new Date());\r\n}\r\n\r\nexport function addDays(date: Date, day: number) {\r\n  return dateFns.addDays(date, day);\r\n}\r\n","export const EDIT_TOURNAMENT_INFO_SUCCESS = 'EDIT_TOURNAMENT_INFO_SUCCESS';\r\nexport const EDIT_TOURNAMENT_INFO_FAILED = 'EDIT_TOURNAMENT_INFO_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport { isAfter, isBefore } from 'date-fns';\r\nimport DatePicker from \"react-datepicker\";\r\nimport 'react-block-ui/style.css';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { formatStringToDate } from 'utils/datetime';\r\nimport { checkUsernameExisted, setUsernameExistedDefault } from 'redux-saga/global-actions/CheckUsernameExisted-action';\r\nimport { CHECK_USERNAME_EXISTED, EDIT_TOURNAMENT_INFO } from 'redux-saga/actions';\r\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED } from 'redux-saga/global-reducers/IsUsernameExisted-reducer';\r\nimport { editTournamentInfo } from './actions';\r\nimport { EDIT_TOURNAMENT_INFO_SUCCESS, EDIT_TOURNAMENT_INFO_FAILED } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ITournamentSettingProps extends React.ClassAttributes<TournamentSetting> {\r\n  isUsernameExisted: boolean | null | {};\r\n  tournamentInfo: IParams;\r\n  tournamentId: number;\r\n\r\n  checkUsernameExisted(param: IBigRequest): void;\r\n  editTournamentInfo(param: IBigRequest): void;\r\n  setUsernameExistedDefault(): void;\r\n}\r\n\r\ninterface ITournamentSettingState {\r\n  listManager: string[];\r\n  username: string;\r\n  usernameError: boolean;\r\n  usernameErrorContent: string;\r\n  tournamentName: string;\r\n  tournamentNameError: boolean;\r\n  tournamentNameErrorContent: string;\r\n  tournamentShortName: string;\r\n  tournamentShortNameError: boolean;\r\n  tournamentShortNameErrorContent: string;\r\n  description: string;\r\n  descriptionError: boolean;\r\n  descriptionErrorContent: string;\r\n  startLocation: string;\r\n  startLocationError: boolean;\r\n  startLocationErrorContent: string;\r\n  endLocation: string;\r\n  endLocationError: boolean;\r\n  endLocationErrorContent: string;\r\n  donor: string;\r\n  donorError: boolean;\r\n  donorErrorContent: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  endFormDate: Date;\r\n  startFormDate: Date;\r\n}\r\n\r\nclass TournamentSetting extends React.Component<ITournamentSettingProps, ITournamentSettingState> {\r\n  constructor(props: ITournamentSettingProps) {\r\n    super(props);\r\n    const { tournamentInfo } = props;\r\n    this.state = {\r\n      listManager: ['Phạm Minh Hiếu', 'Phan Trọng Nhân', 'Đỗ Văn Công', '4', '5', '6', '7'],\r\n      donor: tournamentInfo.donor as string,\r\n      donorError: false,\r\n      donorErrorContent: '',\r\n      endLocation: tournamentInfo.closingLocation as string,\r\n      endLocationError: false,\r\n      endLocationErrorContent: '',\r\n      startLocation: tournamentInfo.openingLocation as string,\r\n      startLocationError: false,\r\n      startLocationErrorContent: '',\r\n      description: tournamentInfo.description as string,\r\n      descriptionError: false,\r\n      descriptionErrorContent: '',\r\n      tournamentShortName: tournamentInfo.shortName as string,\r\n      tournamentShortNameError: false,\r\n      tournamentShortNameErrorContent: '',\r\n      tournamentName: tournamentInfo.fullName as string,\r\n      tournamentNameError: false,\r\n      tournamentNameErrorContent: '',\r\n      username: '',\r\n      usernameError: false,\r\n      usernameErrorContent: '',\r\n      startDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n      endDate: formatStringToDate(tournamentInfo.closingTime as string, 'yyyy-MM-dd'),\r\n      endFormDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n      startFormDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ITournamentSettingProps, nextState: ITournamentSettingState) {\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === true) {\r\n      this.addManager(this.state.username);\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === false) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Tài khoản không hợp lệ',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === null) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === {}) {\r\n      this.setState({\r\n        usernameError: false,\r\n        usernameErrorContent: '',\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private addManager = (username: string) => {\r\n    this.setState({\r\n      listManager: this.state.listManager.concat(username),\r\n    });\r\n  }\r\n\r\n  private onDeleteManager = (itemm: string) => {\r\n    this.setState({\r\n      listManager: this.state.listManager.filter((item) => item !== itemm),\r\n    });\r\n  }\r\n\r\n  private onChangeUsername = (value: string) => {\r\n    this.setState({ username: value, });\r\n  }\r\n\r\n  private onChangeTournamentName = (value: string) => {\r\n    this.setState({ tournamentName: value, });\r\n  }\r\n\r\n  private onChangeTournamentShortName = (value: string) => {\r\n    this.setState({ tournamentShortName: value, });\r\n  }\r\n\r\n  private onChangeDescription = (value: string) => {\r\n    this.setState({ description: value, });\r\n  }\r\n\r\n  private onChangeStartLocation = (value: string) => {\r\n    this.setState({ startLocation: value, });\r\n  }\r\n\r\n  private onChangeEndLocation = (value: string) => {\r\n    this.setState({ endLocation: value, });\r\n  }\r\n\r\n  private onChangeDonor = (value: string) => {\r\n    this.setState({ donor: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let usernameError = false;\r\n    let usernameErrorContent = '';\r\n    if (this.state.username.trim() === '') {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống';\r\n    } else if (this.state.listManager.includes(this.state.username.trim())) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Người dùng này đã là quản lý';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          username: this.state.username,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkUsernameExisted(params);\r\n    }\r\n\r\n    return { usernameError, usernameErrorContent };\r\n  }\r\n\r\n  private handleAddManager = () => {\r\n    const { usernameError, usernameErrorContent } = this.validate();\r\n    this.setState({\r\n      usernameError,\r\n      usernameErrorContent,\r\n    });\r\n    this.props.setUsernameExistedDefault();\r\n  }\r\n\r\n  private handleChangeStartDate = (value: Date) => {\r\n    if (isAfter(value, this.state.endDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endDate: value,\r\n      });\r\n    } else if (isBefore(value, this.state.startFormDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else if (isBefore(value, this.state.endFormDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeStartFormDate = (value: Date) => {\r\n    if (isAfter(value, this.state.endFormDate)) {\r\n      this.setState({\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startFormDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeEndDate = (value: Date) => {\r\n    if (isBefore(value, this.state.startDate)) {\r\n      if (isBefore(value, this.state.startFormDate)) {\r\n        this.setState({\r\n          startFormDate: value,\r\n          endFormDate: value,\r\n          endDate: value,\r\n          startDate: value,\r\n        });\r\n      } else if (isBefore(value, this.state.endFormDate)) {\r\n        this.setState({\r\n          endFormDate: value,\r\n          endDate: value,\r\n          startDate: value,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          startDate: value,\r\n          endDate: value,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        endDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeEndFormDate = (value: Date) => {\r\n    if (isBefore(value, this.state.startFormDate)) {\r\n      this.setState({\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        endFormDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validateInfo = () => {\r\n    let tournamentNameError = false;\r\n    let tournamentNameErrorContent = '';\r\n    let tournamentShortNameErrorContent = '';\r\n    let tournamentShortNameError = false;\r\n    let descriptionErrorContent = '';\r\n    let descriptionError = false;\r\n    let startLocationErrorContent = '';\r\n    let startLocationError = false;\r\n    let endLocationErrorContent = '';\r\n    let endLocationError = false;\r\n    let donorErrorContent = '';\r\n    let donorError = false;\r\n    if (this.state.tournamentName.trim() === '') {\r\n      tournamentNameError = true;\r\n      tournamentNameErrorContent = 'Tên giải không được trống';\r\n    }\r\n    if (this.state.tournamentShortName.trim() === '') {\r\n      tournamentShortNameError = true;\r\n      tournamentShortNameErrorContent = 'Tên ngắn giải không được trống';\r\n    }\r\n\r\n    return { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError, descriptionError, descriptionErrorContent, startLocationError, startLocationErrorContent, endLocationError, endLocationErrorContent, donorError, donorErrorContent };\r\n  }\r\n\r\n  private handleSave = () => {\r\n    const { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError, descriptionError, descriptionErrorContent, startLocationError, startLocationErrorContent, endLocationError, endLocationErrorContent, donorError, donorErrorContent } = this.validateInfo();\r\n    this.setState({\r\n      tournamentNameError,\r\n      tournamentNameErrorContent,\r\n      tournamentShortNameErrorContent,\r\n      tournamentShortNameError,\r\n      descriptionError,\r\n      descriptionErrorContent,\r\n      startLocationError,\r\n      startLocationErrorContent,\r\n      endLocationError,\r\n      endLocationErrorContent,\r\n      donorError,\r\n      donorErrorContent\r\n    });\r\n    if (tournamentNameError === true || tournamentShortNameError === true || descriptionError === true || startLocationError === true || endLocationError === true || donorError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.tournamentId,\r\n      },\r\n      data: {\r\n        fullName: this.state.tournamentName,\r\n        shortName: this.state.tournamentShortName,\r\n        description: this.state.description,\r\n        creatorId: this.props.tournamentInfo.creatorId,\r\n        openingLocation: this.state.startLocation,\r\n        closingLocation: this.state.endLocation,\r\n        openingTime: this.state.startDate,\r\n        closingTime: this.state.endDate,\r\n        donor: this.state.donor,\r\n        url: '',\r\n      },\r\n    };\r\n\r\n    this.props.editTournamentInfo(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHECK_USERNAME_EXISTED}\r\n        unblock={[CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={EDIT_TOURNAMENT_INFO}\r\n          unblock={[EDIT_TOURNAMENT_INFO_SUCCESS, EDIT_TOURNAMENT_INFO_FAILED]}\r\n        >\r\n          <div className=\"TournamentSetting-container\">\r\n            <div className=\"TournamentSetting-tournament-container\">\r\n              <p className=\"TournamentSetting-header-text\">Thông tin giải đấu</p>\r\n              {/* <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Danh sách quản trị viên: </p>\r\n                <div className={'TournamentSetting-listManager-container-container'}>\r\n                  {this.state.listManager.map((item, index) => <div className={'TournamentSetting-manager-container'} key={index}>\r\n                    <p className={'TournamentSetting-manager-text'}>{item}</p>\r\n                    <div className={'TournamentSetting-icon-container'} onClick={() => { this.onDeleteManager(item) }}>\r\n                      <AiOutlineClose />\r\n                    </div>\r\n                  </div>)}\r\n                  <TextInput label='nhập username để thêm quản trị viên' error={this.state.usernameError} errorContent={this.state.usernameErrorContent} onChangeText={this.onChangeUsername} onHandleSubmit={this.handleAddManager} />\r\n                </div>\r\n              </div> */}\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Tên giải:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.tournamentName} label='Nhập tên của giải' error={this.state.tournamentNameError} errorContent={this.state.tournamentNameErrorContent} onChangeText={this.onChangeTournamentName} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Tên ngắn:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.tournamentShortName} label='Nhập tên ngắn của giải' error={this.state.tournamentShortNameError} errorContent={this.state.tournamentShortNameErrorContent} onChangeText={this.onChangeTournamentShortName} />\r\n                  {/*defaultValue */}\r\n                </div>\r\n              </div>\r\n              {/* <div className={'TournamentSetting-checkBox-container'}>\r\n              <label className=\"Checkbox-label\">\r\n                <input type=\"checkbox\" />\r\n            Đăng kí qua form\r\n          </label>\r\n            </div>\r\n            <div className={'TournamentSetting-checkBox-container'}>\r\n              <label className=\"Checkbox-label\">\r\n                <input type=\"checkbox\" />\r\n            Xắp xếp lịch cho 2 giải so le\r\n          </label>\r\n            </div> */}\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Mô tả:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.description} label='Nhập mô tả' error={this.state.descriptionError} errorContent={this.state.descriptionErrorContent} onChangeText={this.onChangeDescription} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Địa điểm khai mạc:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.startLocation} label='Nhập địa điểm' error={this.state.startLocationError} errorContent={this.state.startLocationErrorContent} onChangeText={this.onChangeStartLocation} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày khai mạc: </p>\r\n                <DatePicker\r\n                  selected={this.state.startDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeStartDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Địa điểm bế mạc:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.endLocation} label='Nhập địa điểm' error={this.state.endLocationError} errorContent={this.state.endLocationErrorContent} onChangeText={this.onChangeEndLocation} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày bế mạc: </p>\r\n                <DatePicker\r\n                  selected={this.state.endDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeEndDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày mở form đăng ký: </p>\r\n                <DatePicker\r\n                  selected={this.state.startFormDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeStartFormDate}\r\n                  maxDate={this.state.startDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày đóng form đăng ký: </p>\r\n                <DatePicker\r\n                  selected={this.state.endFormDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeEndFormDate}\r\n                  maxDate={this.state.startDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Nhà tài trợ:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.donor} label='Nhập tên nhà tài trợ' error={this.state.donorError} errorContent={this.state.donorErrorContent} onChangeText={this.onChangeDonor} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"TournamentSetting-competition-container\">\r\n              <div className=\"TournamentSetting-button-container\">\r\n                <div className=\"TournamentSetting-button\" onClick={this.handleSave}>\r\n                  <h4 className=\"TournamentSetting-button-text\">Lưu cài đặt</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    isUsernameExisted: state.isUsernameExisted,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { checkUsernameExisted, setUsernameExistedDefault, editTournamentInfo }\r\n)(TournamentSetting);","import { IBigRequest } from \"interfaces/common\";\r\nimport { EDIT_TOURNAMENT_INFO } from \"redux-saga/actions\";\r\nimport { EDIT_TOURNAMENT_INFO_SUCCESS, EDIT_TOURNAMENT_INFO_FAILED } from \"./reducers\";\r\n\r\nexport const editTournamentInfo = (data: IBigRequest) => ({\r\n  type: EDIT_TOURNAMENT_INFO,\r\n  response: {\r\n    success: EDIT_TOURNAMENT_INFO_SUCCESS,\r\n    failed: EDIT_TOURNAMENT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport './styles.css';\r\nimport { deleteCompetition } from './actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface ICompetitionSettingCompetitionsItemProps extends React.ClassAttributes<CompetitionSettingCompetitionsItem> {\r\n  info: IParams;\r\n  index: number;\r\n  listCompetition: IParams[] | null;\r\n  tournamentId: number;\r\n  tournamentInfo: IParams | null;\r\n\r\n  deleteCompetition(params: IBigRequest): void;\r\n}\r\n\r\ninterface ICompetitionSettingCompetitionsItemState {\r\n  // seeMoreInfo: boolean;\r\n  // maxAmountOfTeam: number;\r\n  // maxAmountOfTeamError: boolean;\r\n  // maxAmountOfTeamErrorContent: string;\r\n  // competitionName: string;\r\n  // competitionNameError: boolean;\r\n  // competitionNameErrorContent: string;\r\n  // maxAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamErrorContent: string;\r\n  // minAmountMemberOfTeamErrorContent: string;\r\n  // maxAmountTeamOfGroup: number;\r\n  // maxAmountTeamOfGroupError: boolean;\r\n  // maxAmountTeamOfGroupErrorContent: string;\r\n  // limitAmountOfTeamchecked: boolean;\r\n  // onePhase: boolean;\r\n  // twoPhase: boolean;\r\n  // competitionFormatError: boolean;\r\n  // competitionFormatErrorContent: string;\r\n  // competitionSportError: boolean;\r\n  // competitionSportErrorContent: string;\r\n}\r\n\r\nclass CompetitionSettingCompetitionsItem extends React.Component<ICompetitionSettingCompetitionsItemProps, ICompetitionSettingCompetitionsItemState> {\r\n  constructor(props: ICompetitionSettingCompetitionsItemProps) {\r\n    super(props);\r\n    this.state = {\r\n      // competitionFormatError: false,\r\n      // competitionFormatErrorContent: '',\r\n      // competitionSportError: false,\r\n      // competitionSportErrorContent: '',\r\n      // competitionName: this.props.info.name as string,\r\n      // competitionNameError: false,\r\n      // competitionNameErrorContent: '',\r\n      // maxAmountTeamOfGroup: 0,\r\n      // maxAmountTeamOfGroupError: false,\r\n      // maxAmountTeamOfGroupErrorContent: '',\r\n      // seeMoreInfo: false,\r\n      // maxAmountOfTeamError: false,\r\n      // maxAmountOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeamError: false,\r\n      // maxAmountMemberOfTeamErrorContent: '',\r\n      // minAmountMemberOfTeamError: false,\r\n      // minAmountMemberOfTeamErrorContent: '',\r\n      // maxAmountOfTeam: 0,\r\n      // maxAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeam: 0,\r\n      // limitAmountOfTeamchecked: false,\r\n      // onePhase: this.props.info.groupStage === false,\r\n      // twoPhase: this.props.info.groupStage === true,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionSettingCompetitionsItemProps, nextState: ICompetitionSettingCompetitionsItemState) {\r\n    // if (this.props.info !== nextProps.info) {\r\n    //   this.setState({\r\n    //     onEditMode: false,\r\n    //   });\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  // private handleSeeMore = () => {\r\n  //   if (this.state.onEditMode === true) {\r\n  //     return;\r\n  //   }\r\n  //   this.setState({\r\n  //     seeMoreInfo: !this.state.seeMoreInfo,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeLimitAmountOfTeam = () => {\r\n  //   this.setState({\r\n  //     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\r\n  //   });\r\n  // };\r\n\r\n  // private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n  //   this.setState({\r\n  //     selectedSport: value,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeCompetitionName = (value: string) => {\r\n  //   this.setState({\r\n  //     competitionName: value,\r\n  //   });\r\n  // }\r\n\r\n  // private startEditMode = () => {\r\n  //   this.setState({\r\n  //     onEditMode: true,\r\n  //   });\r\n  // }\r\n\r\n  // private handleConfirmModal = () => {\r\n  // }\r\n\r\n  // private validate = () => {\r\n  //   let competitionNameError = false;\r\n  //   let competitionNameErrorContent = '';\r\n  //   let competitionFormatError = false;\r\n  //   let competitionFormatErrorContent = '';\r\n  //   let competitionSportError = false;\r\n  //   let competitionSportErrorContent = '';\r\n  //   if (this.state.competitionName.trim() === '') {\r\n  //     competitionNameError = true;\r\n  //     competitionNameErrorContent = 'Tên cuộc thi không được trống';\r\n  //   }\r\n  //   if (this.props.listCompetition!.filter((item) => item !== this.props.info).find(element => element.name === this.state.competitionName)) {\r\n  //     competitionNameError = true;\r\n  //     competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n  //   }\r\n  //   if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\r\n  //     competitionFormatError = true;\r\n  //     competitionFormatErrorContent = 'Thể thức không được trống';\r\n  //   }\r\n  //   if (this.state.selectedSport == null) {\r\n  //     competitionSportError = true;\r\n  //     competitionSportErrorContent = 'Thể thức không được trống';\r\n  //   }\r\n\r\n  //   return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent, competitionSportError, competitionSportErrorContent };\r\n  // }\r\n\r\n  // private handleCloseModal = () => {\r\n  //   this.setState({\r\n  //     showModal: false,\r\n  //   });\r\n  // }\r\n\r\n  private onDeleteCompetition = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    event.stopPropagation();\r\n    const confirm = window.confirm('Bạn có chắc chắn muốn xóa cuộc thi này?');\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: this.props.info.id,\r\n        },\r\n        data: {\r\n          tournamentId: this.props.tournamentId,\r\n        },\r\n      }\r\n      this.props.deleteCompetition(params);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CompetitionSettingCompetitionsItem-info-container\">\r\n        <div className=\"CompetitionSettingCompetitionsItem-info-container-container\">\r\n          <div className=\"CompetitionSettingCompetitionsItem-container\">\r\n            <Link to={`/competition/${this.props.info.id}`} style={{ textDecoration: 'none', color: 'white' }} target={'_blank'} >\r\n              <div className=\"CompetitionSettingCompetitionsItem-container-container\">\r\n                <div className=\"CompetitionSettingCompetitionsItem-order-number-container\">\r\n                  <div className=\"CompetitionSettingCompetitionsItem-order-number-box\">\r\n                    <p>{this.props.index + 1}</p>\r\n                  </div>\r\n                </div>\r\n                <div className={`CompetitionSettingCompetitionsItem-team-name-container`}>\r\n                  <p>{this.props.info.name}</p>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n          <div className=\"CompetitionSettingCompetitionsItem-team-setting-container\">\r\n            <div className=\"CompetitionSettingCompetitionsItem-team-setting-container-container\" onClick={this.onDeleteCompetition}>\r\n              <MdDelete className=\"CompetitionSettingCompetitionsItem-team-setting-icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <CustomModal\r\n          customStyles={customStyles}\r\n          handleCloseModal={this.handleCloseModal}\r\n          showModal={this.state.showModal}\r\n          handleConfirmModal={this.handleConfirmModal}\r\n          confirmButtonVisible={false}\r\n        >\r\n          <Teams competitionInfo={this.props.info} tournamentInfo={this.props.tournamentInfo} id={this.props.info.id as number} type={'competition'} />\r\n        </CustomModal> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteCompetition, }\r\n)(CompetitionSettingCompetitionsItem);","import { IBigRequest } from \"interfaces/common\";\r\nimport { DELETE_COMPETITION } from \"redux-saga/actions\";\r\nimport { DELETE_COMPETITION_SUCCESS, DELETE_COMPETITION_FAILED } from \"./reducers\";\r\n\r\nexport const deleteCompetition = (data: IBigRequest) => ({\r\n  type: DELETE_COMPETITION,\r\n  response: {\r\n    success: DELETE_COMPETITION_SUCCESS,\r\n    failed: DELETE_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","export const DELETE_COMPETITION_SUCCESS = 'DELETE_COMPETITION_SUCCESS';\r\nexport const DELETE_COMPETITION_FAILED = 'DELETE_COMPETITION_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FaPlusSquare } from 'react-icons/fa';\r\nimport './styles.css';\r\n\r\ninterface ICompetitionSettingCompetitionsAddItemProps extends React.ClassAttributes<CompetitionSettingCompetitionsAddItem> {\r\n  handleAddACompetition(): void;\r\n}\r\n\r\ninterface ICompetitionSettingCompetitionsAddItemState {\r\n}\r\n\r\nclass CompetitionSettingCompetitionsAddItem extends React.Component<ICompetitionSettingCompetitionsAddItemProps, ICompetitionSettingCompetitionsAddItemState> {\r\n  constructor(props: ICompetitionSettingCompetitionsAddItemProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  private handleAddACompetition = () => {\r\n    if (this.props.handleAddACompetition) {\r\n      this.props.handleAddACompetition();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CompetitionSettingCompetitionsAddItem-info-container\">\r\n        <div className=\"CompetitionSettingCompetitionsAddItem-container\">\r\n          <div className=\"CompetitionSettingCompetitionsAddItem-container-container\"\r\n            onClick={this.handleAddACompetition}\r\n          >\r\n            <div className=\"CompetitionSettingCompetitionsAddItem-order-number-container\">\r\n              <div className=\"CompetitionSettingCompetitionsAddItem-order-number-box\">\r\n                <FaPlusSquare size={20} className=\"CompetitionSettingCompetitionsAddItem-team-setting-icon\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"CompetitionSettingCompetitionsAddItem-team-name-container\">\r\n              <p>Thêm một cuộc thi</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(CompetitionSettingCompetitionsAddItem);","import { IBigRequest } from \"interfaces/common\";\r\nimport {\r\n  QUERY_COMPETITION_INFO,\r\n  QUERY_ALL_FORMATS, QUERY_ALL_SPORTS,\r\n  QUERY_SPORT_INFO,\r\n  QUERY_FINAL_STAGE_SETTING,\r\n  QUERY_GROUP_STAGE_SETTING,\r\n  EDIT_COMPETITION,\r\n  EDIT_FINAL_STAGE_SETTING,\r\n  EDIT_GROUP_STAGE_SETTING,\r\n  UPDATE_SCHEDULE\r\n} from \"redux-saga/actions\";\r\nimport {\r\n  QUERY_ALL_FORMATS_SUCCESS,\r\n  QUERY_ALL_FORMATS_FAILED,\r\n  QUERY_GROUP_STAGE_SETTING_FAILED,\r\n  QUERY_GROUP_STAGE_SETTING_SUCCESS,\r\n  QUERY_FINAL_STAGE_SETTING_FAILED,\r\n  QUERY_FINAL_STAGE_SETTING_SUCCESS,\r\n  QUERY_COMPETITION_INFO_SUCCESS,\r\n  QUERY_COMPETITION_INFO_FAILED,\r\n  QUERY_ALL_SPORTS_SUCCESS,\r\n  QUERY_ALL_SPORTS_FAILED,\r\n  QUERY_SPORT_INFO_SUCCESS,\r\n  QUERY_SPORT_INFO_FAILED,\r\n  EDIT_COMPETITION_SUCCESS,\r\n  EDIT_COMPETITION_FAILED,\r\n  EDIT_FINAL_STAGE_SETTING_SUCCESS,\r\n  EDIT_FINAL_STAGE_SETTING_FAILED,\r\n  EDIT_GROUP_STAGE_SETTING_SUCCESS,\r\n  EDIT_GROUP_STAGE_SETTING_FAILED,\r\n  UPDATE_SCHEDULE_SUCCESS,\r\n  UPDATE_SCHEDULE_FAILED\r\n} from \"./reducers\";\r\n\r\nexport const queryCompetition = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITION_INFO,\r\n  response: {\r\n    success: QUERY_COMPETITION_INFO_SUCCESS,\r\n    failed: QUERY_COMPETITION_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editCompetition = (data: IBigRequest) => ({\r\n  type: EDIT_COMPETITION,\r\n  response: {\r\n    success: EDIT_COMPETITION_SUCCESS,\r\n    failed: EDIT_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editFinalStageSetting = (data: IBigRequest) => ({\r\n  type: EDIT_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: EDIT_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: EDIT_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editGroupStageSetting = (data: IBigRequest) => ({\r\n  type: EDIT_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: EDIT_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: EDIT_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateSchedule = (data: IBigRequest) => ({\r\n  type: UPDATE_SCHEDULE,\r\n  response: {\r\n    success: UPDATE_SCHEDULE_SUCCESS,\r\n    failed: UPDATE_SCHEDULE_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryFinalStageSetting = (data: IBigRequest) => ({\r\n  type: QUERY_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: QUERY_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: QUERY_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryGroupStageSetting = (data: IBigRequest) => ({\r\n  type: QUERY_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: QUERY_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: QUERY_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportInfo = (data: IBigRequest) => ({\r\n  type: QUERY_SPORT_INFO,\r\n  response: {\r\n    success: QUERY_SPORT_INFO_SUCCESS,\r\n    failed: QUERY_SPORT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryAllSports = () => ({\r\n  type: QUERY_ALL_SPORTS,\r\n  response: {\r\n    success: QUERY_ALL_SPORTS_SUCCESS,\r\n    failed: QUERY_ALL_SPORTS_FAILED,\r\n  },\r\n});\r\n\r\nexport const queryAllFormats = () => ({\r\n  type: QUERY_ALL_FORMATS,\r\n  response: {\r\n    success: QUERY_ALL_FORMATS_SUCCESS,\r\n    failed: QUERY_ALL_FORMATS_FAILED,\r\n  },\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID, ADD_A_COMPETITION, CREATE_A_FINAL_STAGE_SETTING, CREATE_A_GROUP_STAGE_SETTING } from \"redux-saga/actions\";\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED, ADD_A_COMPETITION_SUCCESS, ADD_A_COMPETITION_FAILED, CREATE_A_FINAL_STAGE_SETTING_SUCCESS, CREATE_A_FINAL_STAGE_SETTING_FAILED, CREATE_A_GROUP_STAGE_SETTING_SUCCESS, CREATE_A_GROUP_STAGE_SETTING_FAILED } from \"./reducers\";\r\n\r\nexport const queryAllCompetitionsByTournamentId = (data: IBigRequest) => ({\r\n  type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n  response: {\r\n    success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n    failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const addACompetition = (data: IBigRequest) => ({\r\n  type: ADD_A_COMPETITION,\r\n  response: {\r\n    success: ADD_A_COMPETITION_SUCCESS,\r\n    failed: ADD_A_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const createAFinalStageSetting = (data: IBigRequest) => ({\r\n  type: CREATE_A_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: CREATE_A_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: CREATE_A_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const createAGroupStageSetting = (data: IBigRequest) => ({\r\n  type: CREATE_A_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: CREATE_A_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: CREATE_A_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Styles } from 'react-modal';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport 'react-block-ui/style.css';\r\nimport CompetitionSettingCompetitionsItem from 'components/CompetitionSettingCompetitionsItem';\r\nimport CompetitionSettingCompetitionsAddItem from 'components/CompetitionSettingCompetitionsAddItem';\r\nimport CustomModal from 'components/CustomModal';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport {\r\n  queryAllFormats,\r\n  queryAllSports\r\n} from 'screens/CompetitionInfo/actions';\r\nimport { queryAllCompetitionsByTournamentId, addACompetition, createAFinalStageSetting, createAGroupStageSetting } from './actions';\r\nimport './styles.css';\r\n\r\ninterface ICompetitionSettingProps extends React.ClassAttributes<CompetitionSetting> {\r\n  tournamentId: number;\r\n  tournamentInfo: IParams | null;\r\n  newCompetition: IParams | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n  allSports: IParams[];\r\n  allFormats: IParams[];\r\n\r\n  onChangeCompetitionSetting(): void;\r\n  queryAllCompetitionsByTournamentId(param: IBigRequest): void;\r\n  addACompetition(param: IBigRequest): void;\r\n  createAFinalStageSetting(param: IBigRequest): void;\r\n  createAGroupStageSetting(param: IBigRequest): void;\r\n  queryAllSports(): void;\r\n  queryAllFormats(): void;\r\n}\r\n\r\ninterface ICompetitionSettingState {\r\n  showModal: boolean;\r\n  competitionName: string;\r\n  competitionNameError: boolean;\r\n  competitionNameErrorContent: string;\r\n  competitionFormatError: boolean;\r\n  competitionFormatErrorContent: string;\r\n  selectedSport: ValueType<OptionTypeBase>;\r\n  onePhase: boolean;\r\n  twoPhase: boolean;\r\n  selectedCompetitionFormatPhase1: ValueType<OptionTypeBase>;\r\n  selectedCompetitionFormatPhase2: ValueType<OptionTypeBase>;\r\n  // maxAmountTeamOfGroup: number;\r\n  // maxAmountTeamOfGroupError: boolean;\r\n  // maxAmountTeamOfGroupErrorContent: string;\r\n  // limitAmountOfTeamchecked: boolean;\r\n  // maxAmountOfTeam: number;\r\n  // maxAmountOfTeamError: boolean;\r\n  // maxAmountOfTeamErrorContent: string;\r\n  // maxAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamErrorContent: string;\r\n  // minAmountMemberOfTeamErrorContent: string;\r\n  homeWayPhase2: boolean;\r\n  homeWayPhase1: boolean;\r\n  amountOfTeamsInAGroup: number;\r\n  amountOfTeamsInAGroupError: boolean;\r\n  amountOfTeamsInAGroupErrorContent: string;\r\n  amountOfTeamsGoOnInAGroup: number;\r\n  amountOfTeamsGoOnInAGroupError: boolean;\r\n  amountOfTeamsGoOnInAGroupErrorContent: string;\r\n}\r\n\r\nlet competitionFormatOptions: IParams[] = [];\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '15%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '15%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nlet sportOptions: IParams[] = [];\r\n\r\nclass CompetitionSetting extends React.Component<ICompetitionSettingProps, ICompetitionSettingState> {\r\n  constructor(props: ICompetitionSettingProps) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n      competitionName: '',\r\n      competitionNameError: false,\r\n      competitionNameErrorContent: '',\r\n      competitionFormatError: false,\r\n      competitionFormatErrorContent: '',\r\n      selectedSport: null,\r\n      onePhase: true,\r\n      twoPhase: false,\r\n      selectedCompetitionFormatPhase1: null,\r\n      selectedCompetitionFormatPhase2: null,\r\n      // limitAmountOfTeamchecked: false,\r\n      // maxAmountTeamOfGroup: 0,\r\n      // maxAmountTeamOfGroupError: false,\r\n      // maxAmountTeamOfGroupErrorContent: '',\r\n      // maxAmountOfTeam: 0,\r\n      // maxAmountOfTeamError: false,\r\n      // maxAmountOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeamError: false,\r\n      // maxAmountMemberOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeamError: false,\r\n      // minAmountMemberOfTeamErrorContent: '',\r\n      homeWayPhase2: false,\r\n      homeWayPhase1: false,\r\n      amountOfTeamsInAGroup: 2,\r\n      amountOfTeamsInAGroupError: false,\r\n      amountOfTeamsInAGroupErrorContent: '',\r\n      amountOfTeamsGoOnInAGroup: 1,\r\n      amountOfTeamsGoOnInAGroupError: false,\r\n      amountOfTeamsGoOnInAGroupErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionSettingProps, nextState: ICompetitionSettingState) {\r\n    if (this.props.allSports !== nextProps.allSports) {\r\n      sportOptions = [];\r\n      nextProps.allSports.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n      if (nextProps.allSports.length > 0) {\r\n        this.setState({\r\n          selectedSport: { value: nextProps.allSports[0].id, label: nextProps.allSports[0].fullName },\r\n        });\r\n      }\r\n    }\r\n    if (this.props.newCompetition !== nextProps.newCompetition && nextProps.newCompetition !== null) {\r\n      let params: IBigRequest = {\r\n        path: '',\r\n        param: {},\r\n        data: {\r\n          competitionId: nextProps.newCompetition.id,\r\n          formatId: nextState.twoPhase === true ? (nextState.selectedCompetitionFormatPhase2 as IParams).value : (nextState.selectedCompetitionFormatPhase1 as IParams).value,\r\n          hasHomeMatch: nextState.twoPhase === true ? nextState.homeWayPhase2 : nextState.homeWayPhase1,\r\n        },\r\n      };\r\n      this.props.createAFinalStageSetting(params);\r\n      if (nextState.twoPhase === false) {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      } else {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n            formatId: (this.state.selectedCompetitionFormatPhase1 as IParams).value,\r\n            hasHomeMatch: this.state.homeWayPhase1,\r\n            advanceTeamPerTable: this.state.amountOfTeamsGoOnInAGroup,\r\n            maxTeamPerTable: this.state.amountOfTeamsInAGroup,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      }\r\n    }\r\n    if (this.props.allFormats !== nextProps.allFormats) {\r\n      competitionFormatOptions = [];\r\n      nextProps.allFormats.map((item, index) => competitionFormatOptions.push({ value: item.id, label: item.description }));\r\n      if (nextProps.allFormats.length > 0) {\r\n        this.setState({\r\n          selectedCompetitionFormatPhase1: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n          selectedCompetitionFormatPhase2: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n        });\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        tournamentId: this.props.tournamentId,\r\n        limit: 99,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryAllCompetitionsByTournamentId(params);\r\n    this.props.queryAllSports();\r\n    this.props.queryAllFormats();\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private handleOpenModal = () => {\r\n    this.setState({\r\n      showModal: true,\r\n    });\r\n  }\r\n\r\n  private validate = () => {\r\n    let competitionNameError = false;\r\n    let competitionNameErrorContent = '';\r\n    let competitionFormatError = false;\r\n    let competitionFormatErrorContent = '';\r\n    if (this.state.competitionName.trim() === '') {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống, môn thể thao không được trống';\r\n      } else {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống';\r\n      }\r\n    } else {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Môn thể thao không được trống';\r\n      }\r\n    }\r\n    if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\r\n      competitionFormatError = true;\r\n      competitionFormatErrorContent = 'Thể thức không được trống';\r\n    }\r\n    if (this.props.allCompetitionByTournamentId!.find(element => element.name === this.state.competitionName)) {\r\n      competitionNameError = true;\r\n      competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n    }\r\n\r\n    return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent };\r\n  }\r\n\r\n  // private onChangeMaxAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  // private onChangeMinAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ minAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  private handleConfirmModal = () => {\r\n    const { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent } = this.validate();\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      competitionNameError,\r\n      competitionNameErrorContent,\r\n      competitionFormatError,\r\n      competitionFormatErrorContent,\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent,\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (competitionNameError === true || competitionFormatError === true || amountOfTeamsGoOnInAGroupError === true || amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        name: this.state.competitionName,\r\n        tournamentId: this.props.tournamentId,\r\n        sportId: (this.state.selectedSport as IParams).value,\r\n        description: '',\r\n        hasGroupStage: this.state.twoPhase === true,\r\n      },\r\n    };\r\n    this.props.addACompetition(params);\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private onChangeHomeWayPhase1 = () => {\r\n    this.setState({\r\n      homeWayPhase1: !this.state.homeWayPhase1,\r\n    });\r\n  };\r\n\r\n  private onChangeHomeWayPhase2 = () => {\r\n    this.setState({\r\n      homeWayPhase2: !this.state.homeWayPhase2,\r\n    });\r\n  };\r\n\r\n  private onChangeCompetitionName = (value: string) => {\r\n    this.setState({ competitionName: value, });\r\n  }\r\n\r\n  private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedSport: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeLimitAmountOfTeam = () => {\r\n  //   this.setState({\r\n  //     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\r\n  //   });\r\n  // };\r\n\r\n  // private onChangeMaxAmountOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountOfTeam: tempValue, });\r\n  // }\r\n\r\n  private OnChoose1 = () => {\r\n    this.setState({\r\n      onePhase: true,\r\n      twoPhase: false,\r\n    });\r\n  }\r\n\r\n  private OnChoose2 = () => {\r\n    this.setState({\r\n      onePhase: false,\r\n      twoPhase: true,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase1 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase1: value,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase2 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase2: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeMaxAmountTeamOfGroup = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountTeamOfGroup: tempValue, });\r\n  // }\r\n\r\n  private onChangeAmountOfTeamsInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsInAGroup: tempValue, });\r\n  }\r\n\r\n  private onChangeAmountOfTeamsGoOnInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsGoOnInAGroup: tempValue, });\r\n  }\r\n\r\n  private onBlurAmountOfTeamsInAGroup = () => {\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private onBlurAmountOfTeamsGoOnInAGroup = () => {\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    this.setState({\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsGoOnInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private validateAmountOfTeamsGoOnInAGroup = () => {\r\n    let amountOfTeamsGoOnInAGroupError = false;\r\n    let amountOfTeamsGoOnInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsGoOnInAGroup < 1 || this.state.amountOfTeamsGoOnInAGroup >= this.state.amountOfTeamsInAGroup) {\r\n      amountOfTeamsGoOnInAGroupError = true;\r\n      amountOfTeamsGoOnInAGroupErrorContent = 'Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';\r\n    }\r\n\r\n    return { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent };\r\n  }\r\n\r\n  private validateAmountOfTeamsInAGroup = () => {\r\n    let amountOfTeamsInAGroupError = false;\r\n    let amountOfTeamsInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsInAGroup < 2) {\r\n      amountOfTeamsInAGroupError = true;\r\n      amountOfTeamsInAGroupErrorContent = 'Số đội tối đa trong 1 bảng phải lớn hơn 1';\r\n    }\r\n\r\n    return { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.allCompetitionByTournamentId != null) {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n          {this.props.allCompetitionByTournamentId.map((item, index) => {\r\n            return (<CompetitionSettingCompetitionsItem tournamentInfo={this.props.tournamentInfo} info={item} index={index} key={index} listCompetition={this.props.allCompetitionByTournamentId} tournamentId={this.props.tournamentId} />);\r\n          })}\r\n          <CompetitionSettingCompetitionsAddItem handleAddACompetition={this.handleOpenModal} />\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}\r\n          >\r\n            <div className=\"CompetitionSetting-header-name-container\">\r\n              <h2>Tạo một cuộc thi mới trong giải</h2>\r\n            </div>\r\n            <div className=\"CompetitionSetting-tournament-name-container\">\r\n              <TextInput label={'Nhập tên cuộc thi'} value={this.state.competitionName} error={this.state.competitionNameError} errorContent={this.state.competitionNameErrorContent} onChangeText={this.onChangeCompetitionName} />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Bộ môn</p>\r\n              <Select\r\n                options={sportOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedSport}\r\n                value={this.state.selectedSport}\r\n                onChange={this.onChangeSport}\r\n                maxMenuHeight={140}\r\n              />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Cách tổ chức giải:</p>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose1} checked={this.state.onePhase} readOnly />\r\n              <label onClick={this.OnChoose1}>1 giai đoạn</label>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose2} checked={this.state.twoPhase} readOnly />\r\n              <label onClick={this.OnChoose2}>2 giai đoạn</label>\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">{`Thể thức${this.state.onePhase === true ? '' : ' vòng bảng'}`}</p>\r\n              <Select\r\n                options={competitionFormatOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedCompetitionFormatPhase1}\r\n                value={this.state.selectedCompetitionFormatPhase1}\r\n                onChange={this.onChangeCompetitionFormatPhase1}\r\n                menuPlacement={'top'}\r\n              />\r\n            </div>\r\n            {(this.state.selectedCompetitionFormatPhase1 != null &&\r\n              (this.state.selectedCompetitionFormatPhase1 as IParams).value !== 2 &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase1}\r\n                      onChange={this.onChangeHomeWayPhase1}\r\n                    />\r\n                    {`${(this.state.selectedCompetitionFormatPhase1 as IParams).value === 3 ? `${this.state.twoPhase === true ? 'Chơi lượt đi lượt về vòng bảng' : 'Chơi lượt đi lượt về'}` : `${this.state.twoPhase === true ? 'Có trận tranh hạng 3 vòng bảng' : 'Có trận tranh hạng 3'}`}`}\r\n                  </label>\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 250 }}\r\n                    label={'Số đội trong 1 bảng (lớn hơn 1)'}\r\n                    value={this.state.amountOfTeamsInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsInAGroup}\r\n                    error={this.state.amountOfTeamsInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 300 }}\r\n                    label={'Số đội đi tiếp trong 1 bảng (lớn hơn 0)'}\r\n                    value={this.state.amountOfTeamsGoOnInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsGoOnInAGroup}\r\n                    error={this.state.amountOfTeamsGoOnInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsGoOnInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsGoOnInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {this.state.twoPhase === true && <p className=\"TournamentInfo-text\">Thể thức vòng chung kết</p>}\r\n            {this.state.twoPhase === true && <Select\r\n              options={competitionFormatOptions}\r\n              className=\"Select\"\r\n              defaultValue={this.state.selectedCompetitionFormatPhase2}\r\n              value={this.state.selectedCompetitionFormatPhase2}\r\n              onChange={this.onChangeCompetitionFormatPhase2}\r\n              menuPlacement={'top'}\r\n            />}\r\n            {(this.state.twoPhase === true && (this.state.selectedCompetitionFormatPhase2 as IParams).value !== 2 && ((this.state.selectedCompetitionFormatPhase2 as IParams).value === 3 ?\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Chơi lượt đi lượt về vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div> : <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Có trận tranh hạng 3 vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div>))}\r\n            {this.state.competitionFormatError === true && <div className=\"TournamentInfo-info-item\">\r\n              <p className={'TextInput-error-text'}>{this.state.competitionFormatErrorContent}</p>\r\n            </div>}\r\n            {/* {this.state.selectedCompetitionFormatPhase1 && (this.state.selectedCompetitionFormatPhase1 as IParams).value === 2 && <div className=\"TournamentInfo-info-item\">\r\n              <TextInput value={this.state.maxAmountTeamOfGroup as unknown as string} label={`Giới hạn số lượng đội trong 1 bảng${this.state.twoPhase ? ' của giai đoạn 1' : ''}`} onChangeText={this.onChangeMaxAmountTeamOfGroup} error={this.state.maxAmountTeamOfGroupError} errorContent={this.state.maxAmountTeamOfGroupErrorContent} />\r\n            </div>} */}\r\n            {/* <div className=\"TournamentInfo-info-item\">\r\n              <div className=\"CompetitionSettingCompetitionsItem-option-container-item\">\r\n                <label className=\"Checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.limitAmountOfTeamchecked}\r\n                    onChange={this.onChangeLimitAmountOfTeam}\r\n                  />\r\n            Giới hạn số đội tối đa\r\n          </label>\r\n              </div>\r\n            </div> */}\r\n            {/* {this.state.limitAmountOfTeamchecked === true && <TextInput value={this.state.maxAmountOfTeam as unknown as string} label={'Số lượng đội tối đa'} onChangeText={this.onChangeMaxAmountOfTeam} error={this.state.maxAmountOfTeamError} errorContent={this.state.maxAmountOfTeamErrorContent} />} */}\r\n          </CustomModal>\r\n        </div >\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n    allFormats: state.allFormats,\r\n    allSports: state.allSports,\r\n    newCompetition: state.newCompetition,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    queryAllCompetitionsByTournamentId,\r\n    addACompetition,\r\n    queryAllFormats,\r\n    queryAllSports,\r\n    createAFinalStageSetting,\r\n    createAGroupStageSetting\r\n  }\r\n)(CompetitionSetting);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TiDelete } from 'react-icons/ti';\r\nimport { IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport './styles.css';\r\n\r\ninterface IPlayerProps extends React.ClassAttributes<Player> {\r\n  info: IParams;\r\n  freeToEdit: boolean;\r\n  index: number;\r\n\r\n  onDelete(index: number): void;\r\n}\r\n\r\ninterface IPlayerState {\r\n  // onEditMode: boolean;\r\n  // name: string;\r\n  // nameError: boolean;\r\n  // nameErrorContent: string;\r\n  // email: string;\r\n  // emailError: boolean;\r\n  // emailErrorContent: string;\r\n  // age: string;\r\n  // gender: ValueType<OptionTypeBase>;\r\n}\r\n\r\n// const genderOptions = [\r\n//   { value: true, label: 'Nam' },\r\n//   { value: false, label: 'Nữ' },\r\n// ];\r\n\r\nclass Player extends React.Component<IPlayerProps, IPlayerState> {\r\n  constructor(props: IPlayerProps) {\r\n    super(props);\r\n    this.state = {\r\n      // onEditMode: false,\r\n      // name: this.props.info.name as string,\r\n      // nameError: false,\r\n      // nameErrorContent: '',\r\n      // email: this.props.info.email as string,\r\n      // emailError: false,\r\n      // emailErrorContent: '',\r\n      // age: this.props.info.age as string,\r\n      // gender: this.props.info.gender === true ? { value: true, label: 'Nam' } : { value: false, label: 'Nữ' },\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IPlayerProps, nextState: IPlayerState) {\r\n    return true;\r\n  }\r\n\r\n  // private startEditMode = () => {\r\n  //   this.setState({\r\n  //     onEditMode: true,\r\n  //   });\r\n  // }\r\n\r\n  private deletePlayer = () => {\r\n    this.props.onDelete(this.props.index);\r\n  }\r\n\r\n  // private onChangeName = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   this.setState({\r\n  //     name: value.target.value,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeEmail = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   this.setState({\r\n  //     email: value.target.value,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeAge = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value.target.value as unknown as number)) {\r\n  //     tempValue = Number(value.target.value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({\r\n  //     age: `${tempValue}`,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeGender = (value: ValueType<OptionTypeBase>) => {\r\n  //   this.setState({ gender: value, });\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Player-container\">\r\n        <div className=\"Player-item1\">\r\n          <p>{this.props.info.name}</p>\r\n        </div>\r\n        <div className=\"Player-item2\">\r\n          <p>{this.props.info.gender}</p>\r\n        </div>\r\n        <div className=\"Player-item2\">\r\n          <p>{this.props.info.age}</p>\r\n        </div>\r\n        <div className=\"Player-item1\">\r\n          <p>{this.props.info.email}</p>\r\n        </div>\r\n        <div className=\"Player-setting\">\r\n          {this.props.freeToEdit === true && <TiDelete color={'white'} size={25} style={{ marginLeft: '3px', marginRight: '3px' }} onClick={this.deletePlayer} />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Player);","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND } from \"redux-saga/actions\";\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED } from \"./reducers\";\r\n\r\nexport const queryTournamentInfo = (data: IBigRequest) => ({\r\n  type: QUERY_TOURNAMENT_INFO,\r\n  response: {\r\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n    failed: QUERY_TOURNAMENT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportsByTournament = (data: IBigRequest) => ({\r\n  type: QUERY_SPORTS_BY_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryCompetitionsBySportAndTournament = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const startTournament = (data: IBigRequest) => ({\r\n  type: START_TOURNAMENT,\r\n  response: {\r\n    success: START_TOURNAMENT_SUCCESS,\r\n    failed: START_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const finishTournament = (data: IBigRequest) => ({\r\n  type: FINISH_TOURNAMENT,\r\n  response: {\r\n    success: FINISH_TOURNAMENT_SUCCESS,\r\n    failed: FINISH_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateAvatarTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_AVATAR,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateBackgroundTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_BACKGROUND,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IoMdAddCircleOutline } from 'react-icons/io';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as H from 'history';\r\nimport { StaticContext } from 'react-router';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { Styles } from 'react-modal';\r\nimport { AiFillCamera } from 'react-icons/ai';\r\nimport BracketBoard from 'components/BracketBoard';\r\nimport CustomTab from 'components/CustomTab';\r\nimport CustomModal from 'components/CustomModal';\r\nimport BracketSchedule from 'components/BracketSchedule';\r\nimport BracketRank from 'components/BracketRank';\r\nimport TournamentListTeam from 'components/TournamentListTeam';\r\nimport TournamentSetting from 'components/TournamentSetting';\r\nimport CompetitionsSetting from 'components/CompetitionsSetting';\r\nimport Player from 'components/Player';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { cookies } from 'utils/cookies';\r\nimport { formatDateToDisplay } from 'utils/datetime';\r\nimport config from 'config';\r\nimport { onEditBracketMode, deleteListSelectingTeam } from 'components/BracketTeam/actions';\r\nimport { queryAllCompetitionsByTournamentId } from 'components/CompetitionsSetting/actions';\r\nimport { updateBackgroundTournament, updateAvatarTournament, queryTournamentInfo, querySportsByTournament, finishTournament, queryCompetitionsBySportAndTournament, startTournament } from './actions';\r\nimport { START_TOURNAMENT, FINISH_TOURNAMENT } from 'redux-saga/actions';\r\nimport { START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ITournamentInfoProps extends React.ClassAttributes<TournamentInfo> {\r\n  routerInfo: RouteComponentProps<any, StaticContext, H.LocationState>;\r\n  tournamentInfo: IParams | null;\r\n  listSportsByTournament: IParams[] | null;\r\n  listCompetitionsBySportAndTournament: IParams[] | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n\r\n  queryTournamentInfo(param: IBigRequest): void;\r\n  querySportsByTournament(param: IBigRequest): void;\r\n  queryCompetitionsBySportAndTournament(param: IBigRequest): void;\r\n  startTournament(param: IBigRequest): void;\r\n  finishTournament(param: IBigRequest): void;\r\n  updateAvatarTournament(param: IBigRequest): void;\r\n  updateBackgroundTournament(param: IBigRequest): void;\r\n  onEditBracketMode(status: boolean): void;\r\n  deleteListSelectingTeam(): void;\r\n  queryAllCompetitionsByTournamentId(param: IBigRequest): void;\r\n}\r\n\r\ninterface ITournamentInfoState {\r\n  selectedCompetitionInForm: ValueType<OptionTypeBase>;\r\n  selectedCompetitionInFormError: boolean;\r\n  selectedCompetitionInFormErrorContent: string;\r\n  showJoinModal: boolean;\r\n  teamNameInForm: string;\r\n  teamNameInFormError: boolean;\r\n  teamNameInFormErrorContent: string;\r\n  playerNameInForm: string;\r\n  playerNameInFormError: boolean;\r\n  playerNameInFormErrorContent: string;\r\n  playerEmailInForm: string;\r\n  playerEmailInFormError: boolean;\r\n  playerEmailInFormErrorContent: string;\r\n  playerAgeInForm: number;\r\n  teamShortNameInForm: string;\r\n  teamShortNameInFormError: boolean;\r\n  teamShortNameInFormErrorContent: string;\r\n  listPlayerInForm: IParams[];\r\n  playerGenderInForm: ValueType<OptionTypeBase>;\r\n}\r\n\r\nlet allCompetitionOptions: IParams[] = [\r\n];\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '5%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '5%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: true, label: 'Nam' },\r\n  { value: false, label: 'Nữ' },\r\n];\r\n\r\nclass TournamentInfo extends React.Component<ITournamentInfoProps, ITournamentInfoState> {\r\n  private tabList: string[] = [];\r\n  private componentList: ReactNode[] = [];\r\n\r\n  constructor(props: ITournamentInfoProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedCompetitionInForm: null,\r\n      showJoinModal: false,\r\n      teamNameInForm: '',\r\n      playerEmailInForm: '',\r\n      teamNameInFormError: false,\r\n      teamNameInFormErrorContent: '',\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n      selectedCompetitionInFormError: false,\r\n      selectedCompetitionInFormErrorContent: '',\r\n      playerEmailInFormError: false,\r\n      playerEmailInFormErrorContent: '',\r\n      playerNameInFormError: false,\r\n      playerNameInFormErrorContent: '',\r\n      teamShortNameInForm: '',\r\n      teamShortNameInFormError: false,\r\n      teamShortNameInFormErrorContent: '',\r\n      listPlayerInForm: [\r\n        {\r\n          name: 'Phan Trọng Nhân',\r\n          gender: 'Nam',\r\n          age: 23,\r\n          email: 'caulamgithelol.lmht@gmail.com',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ITournamentInfoProps, nextState: ITournamentInfoState) {\r\n    if (this.props.tournamentInfo !== nextProps.tournamentInfo) {\r\n      // if (nextProps.tournamentInfo == null || nextProps.tournamentInfo.Tournament == null) {\r\n      //   this.tabList = [];\r\n      //   this.componentList = [];\r\n      // } else if (nextState.selectedCompetition != null) {\r\n      //   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\r\n      //     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội', 'Cài đặt', 'Các cuộc thi trong giải'];\r\n      //     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />, <TournamentSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\r\n      //   } else {\r\n      //     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội'];\r\n      //     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />];\r\n      //   }\r\n      // } else {\r\n      //   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\r\n      //     this.tabList = ['Cài đặt', 'Các cuộc thi trong giải'];\r\n      //     this.componentList = [<TournamentSetting tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\r\n      //   } else {\r\n      //     this.tabList = [];\r\n      //     this.componentList = [];\r\n      //   }\r\n      // }\r\n      this.tabList = [];\r\n      this.componentList = [];\r\n      if (nextProps.tournamentInfo != null) {\r\n        if ((nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true) {\r\n          this.tabList = [\r\n            'Các cuộc thi trong giải',\r\n            'Các đội tham gia giải',\r\n            'Cài đặt'\r\n          ];\r\n          this.componentList = [\r\n            <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />,\r\n            <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />,\r\n            <TournamentSetting tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} />\r\n          ];\r\n        } else {\r\n          this.tabList = [\r\n            'Các cuộc thi trong giải',\r\n            'Các đội tham gia giải',\r\n          ];\r\n          this.componentList = [\r\n            <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />,\r\n            <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />,\r\n          ];\r\n        }\r\n      }\r\n    }\r\n    // if (this.state.selectedSport !== nextState.selectedSport || this.state.selectedCompetition !== nextState.selectedCompetition) {\r\n    //   this.props.onEditBracketMode(false);\r\n    //   this.props.deleteListSelectingTeam();\r\n    // }\r\n    // if (this.props.listSportsByTournament !== nextProps.listSportsByTournament) {\r\n    //   sportOptions = [];\r\n    //   if (nextProps.listSportsByTournament != null) {\r\n    //     nextProps.listSportsByTournament.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n    //   }\r\n    //   sportOptions.unshift({\r\n    //     value: null, label: '(Tất cả)',\r\n    //   });\r\n    // }\r\n    // if (this.props.listCompetitionsBySportAndTournament !== nextProps.listCompetitionsBySportAndTournament) {\r\n    //   competitionOptions = [];\r\n    //   if (nextProps.listCompetitionsBySportAndTournament != null) {\r\n    //     nextProps.listCompetitionsBySportAndTournament.map((item, index) => competitionOptions.push({ value: item.id, label: item.name }));\r\n    //   }\r\n    // }\r\n    if (this.props.allCompetitionByTournamentId !== nextProps.allCompetitionByTournamentId) {\r\n      allCompetitionOptions = [];\r\n      if (nextProps.allCompetitionByTournamentId != null) {\r\n        nextProps.allCompetitionByTournamentId.map((item, index) => allCompetitionOptions.push({ value: item.id, label: item.name }));\r\n      }\r\n    }\r\n    // if (this.state.selectedSport !== nextState.selectedSport && nextState.selectedSport != null) {\r\n    //   competitionOptions = [];\r\n    //   this.setState({\r\n    //     selectedCompetition: null,\r\n    //   });\r\n    //   const params = {\r\n    //     path: '',\r\n    //     param: {\r\n    //       tournamentId: Number(this.props.routerInfo.match.params.tournamentId),\r\n    //       sportId: (nextState.selectedSport as IParams).value,\r\n    //     },\r\n    //     data: {},\r\n    //   };\r\n    //   this.props.queryCompetitionsBySportAndTournament(params);\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        id: Number(this.props.routerInfo.match.params.tournamentId),\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryTournamentInfo(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        tournamentId: Number(this.props.routerInfo.match.params.tournamentId),\r\n        limit: 99,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryAllCompetitionsByTournamentId(params);\r\n  }\r\n\r\n  private onChangeCompetitionSetting = () => {\r\n    this.setState({\r\n      selectedCompetitionInForm: null,\r\n    });\r\n  }\r\n\r\n  private onChangeSelectedCompetitionInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionInForm: value,\r\n    });\r\n  }\r\n\r\n  private updateBackground = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateBackgroundTournament(params);\r\n    }\r\n  };\r\n\r\n  private updateAvatar = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateAvatarTournament(params);\r\n    }\r\n  };\r\n\r\n  private handleStartTournament = () => {\r\n    const confirm = window.confirm('Khi bắt đầu giải bạn sẽ không thể thay đổi thông tin các cuộc thi và các đội nữa, bạn có chắc chắn?')\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.startTournament(params);\r\n    }\r\n  };\r\n\r\n  private handleJoinTournament = () => {\r\n    this.setState({\r\n      showJoinModal: true,\r\n    });\r\n  };\r\n\r\n  private handleCloseModal = () => {\r\n    const confirm = window.confirm('Bạn có chắc chắn muốn hủy form đăng ký?');\r\n    if (confirm === true) {\r\n      this.setState({\r\n        showJoinModal: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validateForm = () => {\r\n    let selectedCompetitionInFormError = false;\r\n    let selectedCompetitionInFormErrorContent = '';\r\n    let teamNameInFormError = false;\r\n    let teamNameInFormErrorContent = '';\r\n    let teamShortNameInFormErrorContent = '';\r\n    let teamShortNameInFormError = false;\r\n    if (this.state.selectedCompetitionInForm == null) {\r\n      selectedCompetitionInFormError = true;\r\n      selectedCompetitionInFormErrorContent = 'Bạn phải chọn giải đấu muốn tham gia';\r\n    }\r\n    if (this.state.teamNameInForm.trim() === '') {\r\n      teamNameInFormError = true;\r\n      teamNameInFormErrorContent = 'Tên đội không được trống';\r\n    }\r\n    if (this.state.teamShortNameInForm.trim() === '') {\r\n      teamShortNameInFormError = true;\r\n      teamShortNameInFormErrorContent = 'Tên ngắn đội không được trống';\r\n    }\r\n\r\n    return {\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    };\r\n  }\r\n\r\n  private validateAddPlayer = () => {\r\n    let playerEmailInFormErrorContent = '';\r\n    let playerEmailInFormError = false;\r\n    let playerNameInFormErrorContent = '';\r\n    let playerNameInFormError = false;\r\n    if (this.state.playerNameInForm.trim() === '') {\r\n      playerNameInFormError = true;\r\n      playerNameInFormErrorContent = 'Tên người chơi không được trống';\r\n    }\r\n    if (!config.regex.email.test(this.state.playerEmailInForm)) {\r\n      playerEmailInFormError = true;\r\n      playerEmailInFormErrorContent = 'Email không hợp lệ';\r\n    }\r\n\r\n    return {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    };\r\n  }\r\n\r\n  private handleConfirmModal = () => {\r\n    const {\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    } = this.validateForm();\r\n    this.setState({\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    });\r\n    if (teamNameInFormError === true || selectedCompetitionInFormError === true || teamShortNameInFormError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        competitionId: (this.state.selectedCompetitionInForm as IParams).value,\r\n        TeamDTO: {\r\n          fullName: this.state.teamNameInForm,\r\n          shortName: this.state.teamShortNameInForm,\r\n        },\r\n        ListPlayer: this.state.listPlayerInForm,\r\n      },\r\n    }\r\n    // this.props.registTeam(params);\r\n  };\r\n\r\n  private handleFinishTournament = () => {\r\n    const confirm = window.confirm('Khi Kết thúc giải đồng nghĩa với việc tất cả các cuộc thi cũng sẽ kết thúc, bạn có chắc chắn?')\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.finishTournament(params);\r\n    }\r\n  };\r\n\r\n  private onChangeTeamNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onChangeTeamShortNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamShortNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onDeletePlayer = (indexx: number) => {\r\n    this.setState({\r\n      listPlayerInForm: this.state.listPlayerInForm.filter((item, index) => index !== indexx),\r\n    });\r\n  }\r\n\r\n  private onChangePlayerNameInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerNameInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerEmailInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerEmailInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerGenderInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({ playerGenderInForm: value, });\r\n  }\r\n\r\n  private addPlayer = () => {\r\n    const {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    } = this.validateAddPlayer();\r\n    this.setState({\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    });\r\n    if (playerNameInFormError === true || playerEmailInFormError === true) {\r\n      return;\r\n    }\r\n    const listTemp = this.state.listPlayerInForm;\r\n    listTemp.push({\r\n      name: this.state.playerNameInForm,\r\n      age: this.state.playerAgeInForm,\r\n      email: this.state.playerEmailInForm,\r\n      gender: (this.state.playerGenderInForm as IParams).label,\r\n    });\r\n    this.setState({\r\n      listPlayerInForm: listTemp,\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerEmailInForm: '',\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n    });\r\n  }\r\n\r\n  private onChangePlayerAgeInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value.target.value as unknown as number)) {\r\n      tempValue = Number(value.target.value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({\r\n      playerAgeInForm: tempValue,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={START_TOURNAMENT}\r\n        unblock={[START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={FINISH_TOURNAMENT}\r\n          unblock={[FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED]}\r\n        >\r\n          <div className=\"TournamentInfo-Container\">\r\n            <div className=\"TournamentInfo-background-image-container\">\r\n              <img className={'TournamentInfo-background-image'} src={require('../../assets/38155584462_74d5f1cc1d_b.jpg')} alt={'logo'} />\r\n              {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'TournamentInfo-change-image-icon'} />}\r\n              {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'TournamentInfo-Overlay'}>\r\n                <input type=\"file\" onChange={(e) => this.updateBackground(e.target.files)} />\r\n              </div>}\r\n            </div>\r\n            <div className=\"TournamentInfo-content-container\">\r\n              <div className=\"TournamentInfo-content-info-container\">\r\n                <div className=\"TournamentInfo-content-info-basic-info-container\">\r\n                  <div className=\"TournamentInfo-content-info-basic-info-container-container\">\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <p className=\"TournamentInfo-name-text\">{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? (this.props.tournamentInfo.Tournament as unknown as IParams).fullName : <Skeleton width={400} height={30} />}</p>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Tên ngắn: ${(this.props.tournamentInfo.Tournament as unknown as IParams).shortName}` : <Skeleton width={200} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Nhà tài trợ: ${(this.props.tournamentInfo.Tournament as unknown as IParams).donor}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Trạng thái: ${((this.props.tournamentInfo.Tournament as unknown as IParams).status === 'processing' ? 'Đang diễn ra' : (this.props.tournamentInfo.status == null ? 'Chưa diễn ra' : 'Đã kết thúc'))}` : <Skeleton width={225} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Ngày bắt đầu: ${formatDateToDisplay((this.props.tournamentInfo.Tournament as unknown as IParams).openingTime as string | undefined, 'dd/MM/yyyy', 'yyyy-MM-dd')}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Địa điểm khai mạc: ${(this.props.tournamentInfo.Tournament as unknown as IParams).openingLocation}` : <Skeleton width={275} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Ngày kết thúc: ${formatDateToDisplay((this.props.tournamentInfo.Tournament as unknown as IParams).closingTime as string | undefined, 'dd/MM/yyyy', 'yyyy-MM-dd')}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Địa điểm bế mạc: ${(this.props.tournamentInfo.Tournament as unknown as IParams).closingLocation}` : <Skeleton width={275} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Mô tả: ${(this.props.tournamentInfo.Tournament as unknown as IParams).description}` : <Skeleton width={300} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <img className={'TournamentInfo-avatar-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n                  {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'TournamentInfo-change-avatar-icon'} />}\r\n                  {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'TournamentInfo-Overlay2'}>\r\n                    <input type=\"file\" onChange={(e) => this.updateAvatar(e.target.files)} />\r\n                  </div>}\r\n                </div>\r\n                {this.props.tournamentInfo != null && this.props.tournamentInfo.Config != null && this.props.tournamentInfo.Tournament != null &&\r\n                  ((this.props.tournamentInfo.Config as IParams).canEdit === true ?\r\n                    ((this.props.tournamentInfo.Tournament as IParams).status === 'initializing' ?\r\n                      <div className=\"TournamentInfo-login-container\">\r\n                        <div\r\n                          className=\"TournamentInfo-login\"\r\n                          onClick={this.handleStartTournament}\r\n                        >\r\n                          <h4 className=\"TournamentInfo-login-text\">Bắt đầu giải</h4>\r\n                        </div>\r\n                      </div> : ((this.props.tournamentInfo.Tournament as IParams).status === 'processing' ?\r\n                        <div className=\"TournamentInfo-login-container\">\r\n                          <div\r\n                            className=\"TournamentInfo-login\"\r\n                            onClick={this.handleFinishTournament}\r\n                          >\r\n                            <h4 className=\"TournamentInfo-login-text\">Kết thúc giải</h4>\r\n                          </div>\r\n                        </div> : null)) : (cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && (this.props.tournamentInfo.Tournament as IParams).status === 'opening' && <div className=\"TournamentInfo-login-container\">\r\n                          <div\r\n                            className=\"TournamentInfo-login\"\r\n                            onClick={this.handleJoinTournament}\r\n                          >\r\n                            <h4 className=\"TournamentInfo-login-text\">Tham gia giải</h4>\r\n                          </div>\r\n                        </div>))\r\n                }\r\n                {/* {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null &&\r\n              (((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true ?\r\n                (this.props.tournamentInfo.Tournament != null && (\r\n                  (this.props.tournamentInfo.Tournament as unknown as IParams).status === 'initializing' ?\r\n                    <div className=\"TournamentInfo-login-container\">\r\n                      <div\r\n                        className=\"TournamentInfo-login\"\r\n                        onClick={this.handleStartTournament}\r\n                      >\r\n                        <h4 className=\"TournamentInfo-login-text\">Bắt đầu giải</h4>\r\n                      </div>\r\n                    </div> : ((this.props.tournamentInfo.Tournament as unknown as IParams).status === 'processing' ?\r\n                      <div className=\"TournamentInfo-login-container\">\r\n                        <div\r\n                          className=\"TournamentInfo-login\"\r\n                          onClick={this.handleFinishTournament}\r\n                        >\r\n                          <h4 className=\"TournamentInfo-login-text\">Kết thúc giải</h4>\r\n                        </div>\r\n                      </div> : null))) :\r\n                (cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && (this.props.tournamentInfo.Tournament as unknown as IParams).status === 'opening' &&\r\n                (<div className=\"TournamentInfo-login-container\">\r\n                  <div\r\n                    className=\"TournamentInfo-login\"\r\n                    onClick={this.handleJoinTournament}\r\n                  >\r\n                    <h4 className=\"TournamentInfo-login-text\">Tham gia giải</h4>\r\n                  </div>\r\n                </div>)\r\n              ))\r\n            } */}\r\n                {this.props.tournamentInfo != null &&\r\n                  <div className=\"TournamentInfo-content-info-advanced-info-container\">\r\n                    <CustomTab tabList={this.tabList} componentList={this.componentList} selectedIndex={0}></CustomTab>\r\n                  </div>\r\n                }\r\n              </div>\r\n            </div>\r\n            <CustomModal\r\n              customStyles={customStyles}\r\n              handleCloseModal={this.handleCloseModal}\r\n              showModal={this.state.showJoinModal}\r\n              handleConfirmModal={this.handleConfirmModal}\r\n            >\r\n              <div className={'TournamentInfo-join-tournament-form-competition-header'}>\r\n                <h3>Form đăng ký dự thi</h3>\r\n              </div>\r\n              <div className={'TournamentInfo-join-tournament-form-competition-option'}>\r\n                <p>Chọn cuộc thi</p>\r\n                <Select\r\n                  options={allCompetitionOptions}\r\n                  className=\"Select\"\r\n                  defaultValue={this.state.selectedCompetitionInForm}\r\n                  value={this.state.selectedCompetitionInForm}\r\n                  onChange={this.onChangeSelectedCompetitionInForm}\r\n                  maxMenuHeight={140}\r\n                />\r\n                {this.state.selectedCompetitionInFormError === true && <p style={{ color: 'red' }}>{this.state.selectedCompetitionInFormErrorContent}</p>}\r\n              </div>\r\n              <TextInput label={'Tên đội'} value={this.state.teamNameInForm} onChangeText={this.onChangeTeamNameInForm} error={this.state.teamNameInFormError} errorContent={this.state.teamNameInFormErrorContent} />\r\n              <TextInput label={'Tên ngắn đội'} value={this.state.teamShortNameInForm} onChangeText={this.onChangeTeamShortNameInForm} error={this.state.teamShortNameInFormError} errorContent={this.state.teamShortNameInFormErrorContent} />\r\n              <div className=\"TournamentInfo-join-tournament-container\">\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <p>Tên</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <p>Giới tính</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <p>Tuổi</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <p>Email</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-setting\">\r\n                </div>\r\n              </div>\r\n              {this.state.listPlayerInForm.map((item, index) => <Player onDelete={this.onDeletePlayer} info={item} freeToEdit={true} key={index} index={index} />)}\r\n              <div className=\"TournamentInfo-join-tournament-container\">\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <input type={'text'} onChange={this.onChangePlayerNameInForm} value={this.state.playerNameInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <Select\r\n                    options={genderOptions}\r\n                    className=\"Select\"\r\n                    defaultValue={this.state.playerGenderInForm}\r\n                    value={this.state.playerGenderInForm}\r\n                    onChange={this.onChangePlayerGenderInForm}\r\n                  />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <input style={{ width: '70px' }} type={'text'} onChange={this.onChangePlayerAgeInForm} value={this.state.playerAgeInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <input type={'text'} onChange={this.onChangePlayerEmailInForm} value={this.state.playerEmailInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-setting\">\r\n                  <IoMdAddCircleOutline color={'white'} size={25} style={{ marginLeft: '3px', marginRight: '3px' }} onClick={this.addPlayer} />\r\n                </div>\r\n              </div>\r\n              {this.state.playerNameInFormError === true && <p style={{ color: 'red' }}>{this.state.playerNameInFormErrorContent}</p>}\r\n              {this.state.playerEmailInFormError === true && <p style={{ color: 'red' }}>{this.state.playerEmailInFormErrorContent}</p>}\r\n            </CustomModal>\r\n          </div>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    tournamentInfo: state.tournamentInfo,\r\n    listSportsByTournament: state.listSportsByTournament,\r\n    listCompetitionsBySportAndTournament: state.listCompetitionsBySportAndTournament,\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryAllCompetitionsByTournamentId, deleteListSelectingTeam, onEditBracketMode, updateBackgroundTournament, updateAvatarTournament, queryTournamentInfo, querySportsByTournament, queryCompetitionsBySportAndTournament, startTournament, finishTournament }\r\n)(TournamentInfo);","import { SET_GLOBAL_SEARCH_STRING } from \"redux-saga/actions\";\r\n\r\nexport const setGlobalSearchString = (data: string) => ({\r\n  type: SET_GLOBAL_SEARCH_STRING,\r\n  payload: data,\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { LOGOUT, SEARCH_TOURNAMENT, SEARCH_USER } from \"redux-saga/actions\";\r\nimport { QUERY_LIST_TOURNAMENT_SUCCESS, QUERY_LIST_TOURNAMENT_FAILED } from \"components/AllTournaments/reducers\";\r\nimport { QUERY_LIST_USER_SUCCESS, QUERY_LIST_USER_FAILED } from \"components/AllUsers/reducers\";\r\n\r\nexport const logOut = () => ({\r\n  type: LOGOUT,\r\n});\r\n\r\nexport const searchTournaments = (data: IBigRequest) => ({\r\n  type: SEARCH_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_LIST_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_LIST_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const searchUsers = (data: IBigRequest) => ({\r\n  type: SEARCH_USER,\r\n  response: {\r\n    success: QUERY_LIST_USER_SUCCESS,\r\n    failed: QUERY_LIST_USER_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport { FaChevronDown, FaChevronUp, FaSearch } from 'react-icons/fa';\r\nimport { RiCloseLine } from 'react-icons/ri';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport history from \"utils/history\";\r\nimport { cookies } from 'utils/cookies';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { setGlobalSearchString } from 'redux-saga/global-actions/SetGlobalSearchString-actions';\r\nimport { logOut, searchTournaments, searchUsers } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IHeaderProps extends React.ClassAttributes<Header> {\r\n  currentPage: 'competitionInfo' | 'login' | 'signUp' | 'tournaments' | 'tournamentInfo' | 'users' | 'userInfo' | 'home' | 'forgotPassword' | 'newTournament' | 'changePassword' | 'active';\r\n  currentUserInfo: IParams | null;\r\n\r\n  logOut(): void;\r\n  searchTournaments(params: IBigRequest): void;\r\n  searchUsers(params: IBigRequest): void;\r\n  setGlobalSearchString(params: string): void;\r\n}\r\n\r\ninterface IHeaderState {\r\n  showUserOption: boolean;\r\n  searchText: string;\r\n  selectedSearchOption: ValueType<OptionTypeBase>;\r\n  errorLoadImage: boolean;\r\n}\r\n\r\nconst searchOption = [\r\n  { value: 1, label: 'Tìm Giải' },\r\n  { value: 2, label: 'Tìm Người dùng' },\r\n];\r\n\r\nclass Header extends React.Component<IHeaderProps, IHeaderState> {\r\n  constructor(props: IHeaderProps) {\r\n    super(props);\r\n    this.state = {\r\n      showUserOption: false,\r\n      searchText: '',\r\n      selectedSearchOption: { value: 1, label: 'Tìm Giải' },\r\n      errorLoadImage: false,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IHeaderProps, nextState: IHeaderState) {\r\n    if (this.props.currentPage !== nextProps.currentPage) {\r\n      this.setState({\r\n        showUserOption: false,\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private handleShowUserOption = () => {\r\n    this.setState({\r\n      showUserOption: !this.state.showUserOption,\r\n    });\r\n  }\r\n\r\n\r\n  private hideUserOption = () => {\r\n    this.setState({\r\n      showUserOption: false,\r\n    });\r\n  }\r\n\r\n  private logOut = () => {\r\n    this.hideUserOption();\r\n    this.props.logOut();\r\n  }\r\n\r\n  private handleSearch = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        page: 1,\r\n        limit: 3,\r\n        searchString: this.state.searchText,\r\n      },\r\n      data: {},\r\n    };\r\n\r\n    this.props.setGlobalSearchString(this.state.searchText.trim());\r\n    if ((this.state.selectedSearchOption as IParams).value === 1) {\r\n      this.props.searchTournaments(params);\r\n      history.push(\"/tournaments\");\r\n    } else {\r\n      this.props.searchUsers(params);\r\n      history.push(\"/users\");\r\n    }\r\n  }\r\n\r\n  private onChangeSearchOption = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedSearchOption: value,\r\n    });\r\n  }\r\n\r\n  private clearSearchText = () => {\r\n    this.setState({\r\n      searchText: '',\r\n    });\r\n  }\r\n\r\n  private onChangeSearchText = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      searchText: value.target.value,\r\n    });\r\n  }\r\n\r\n  private keyPressed = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      this.handleSearch();\r\n    }\r\n  }\r\n\r\n  private onImageError = () => {\r\n    this.setState({\r\n      errorLoadImage: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const currentUserInfo = this.props.currentUserInfo;\r\n    return (\r\n      <div className=\"Header-container\">\r\n        <div className=\"Logo-container\">\r\n          <Link to=\"/\" style={{ height: 50 }}>\r\n            <img style={{ width: '100%', height: '100%' }} src={require('../../assets/logo.png')} alt={'logo'} />\r\n          </Link>\r\n        </div>\r\n        <div className={`Option-container ${this.props.currentPage === 'tournaments' ? 'Option-container1' : ''}`}>\r\n          <Link to=\"/tournaments\" style={{ textDecoration: 'none' }} onClick={() => { this.props.setGlobalSearchString('') }}>\r\n            <div className=\"Link\"><p className={`Link-text ${this.props.currentPage === 'tournaments' ? 'Link-text-selected' : ''}`}>Các giải đấu</p></div>\r\n          </Link>\r\n          {/* <Link to=\"/news\" style={{ textDecoration: 'none' }}>\r\n            <div className=\"Link\"><p className=\"Link-text\">Tin tức</p></div>\r\n          </Link>\r\n          <Link to=\"/events\" style={{ textDecoration: 'none' }}>\r\n            <div className=\"Link\"><p className=\"Link-text\">Sự kiện</p></div>\r\n          </Link> */}\r\n        </div>\r\n        <div className=\"SearchBar-container\">\r\n          <Select\r\n            options={searchOption}\r\n            className=\"Select Select1\"\r\n            defaultValue={this.state.selectedSearchOption}\r\n            value={this.state.selectedSearchOption}\r\n            onChange={this.onChangeSearchOption}\r\n            menuPlacement={'top'}\r\n          />\r\n          <input type={'text'} onKeyPress={this.keyPressed} className={'Header-text-input'} onChange={this.onChangeSearchText} value={this.state.searchText} />\r\n          {this.state.searchText !== '' && <div className={'Header-icon-container'} onClick={this.clearSearchText}>\r\n            <RiCloseLine className={'Header-icon'} size={30} />\r\n          </div>}\r\n          <div className={'Header-icon-container'} onClick={this.handleSearch}>\r\n            <FaSearch className={'Header-icon'} size={25} />\r\n          </div>\r\n        </div>\r\n        {this.props.currentPage !== 'newTournament' && this.props.currentPage !== 'login' && <Link to=\"/newTournament\" style={{ textDecoration: 'none' }}>\r\n          <div className=\"SignUp-Button-container\"><p className=\"Button\">Tạo giải ngay</p></div>\r\n        </Link>}\r\n        {currentUserInfo != null && cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ?\r\n          <div className=\"Right-container Right-container-hover\">\r\n            <div className={'UserOption-container'} onClick={this.handleShowUserOption}>\r\n              <div className={'UserOption-avatar-container'}>\r\n                <img className={'UserOption-avatar-image'} src={require(\r\n                  // `${this.state.errorLoadImage === false ?\r\n                    '../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png'\r\n                    // :\r\n                    // '../../assets/avatar-man-icon-profile-placeholder-260nw-1229862502.jpg'}`\r\n                    )\r\n                  } alt={'logo'} onError={this.onImageError} />\r\n              </div>\r\n              <p className={'UserOption-name-text'}>{`${currentUserInfo.firstName}`}</p>\r\n              {this.state.showUserOption === true ? <FaChevronDown color={'white'} /> : <FaChevronUp color={'white'} />}\r\n            </div>\r\n            {this.state.showUserOption === true &&\r\n              <div\r\n                className={'UserOption-dropdown-container'}\r\n              >\r\n                <Link to={`/user/${currentUserInfo.id}`} style={{ textDecoration: 'none' }}>\r\n                  <div className={'UserOption-dropdown-item-container UserOption-dropdown-item-container1'}>\r\n                    <p>Thông tin</p>\r\n                  </div>\r\n                </Link>\r\n                <Link to={`/changePassword`} style={{ textDecoration: 'none' }}>\r\n                  <div className={'UserOption-dropdown-item-container UserOption-dropdown-item-container2'}>\r\n                    <p>Đổi mật khẩu</p>\r\n                  </div>\r\n                </Link>\r\n                <div className={'UserOption-dropdown-item-container UserOption-dropdown-item-container1'} onClick={this.logOut}>\r\n                  <p>Đăng xuất</p>\r\n                </div>\r\n              </div>\r\n            }\r\n          </div>\r\n          : <div className=\"Right-container\">\r\n            {this.props.currentPage === 'login' && <div className=\"Link-text-no-hover-container\"><p className=\"Link-text-no-hover\">Bạn chưa có tài khoản?</p></div>}\r\n            {this.props.currentPage === 'login' ?\r\n              <Link to=\"/signUp\" style={{ textDecoration: 'none' }}>\r\n                <div className=\"SignUp-Button-container\"><p className=\"Button\">Đăng ký</p></div>\r\n              </Link> :\r\n              <Link to=\"/login\" style={{ textDecoration: 'none' }}>\r\n                <div className=\"SignUp-Button-container\"><p className=\"Button\">Đăng nhập</p></div>\r\n              </Link>}\r\n          </div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    currentUserInfo: state.currentUserInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logOut, searchTournaments, setGlobalSearchString, searchUsers }\r\n)(Header);","import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\n\r\ninterface IContentProps extends React.ClassAttributes<Content> {\r\n  children: ReactNode;\r\n  transparent?: boolean;\r\n}\r\n\r\ninterface IContentState {\r\n}\r\n\r\nclass Content extends React.Component<IContentProps, IContentState> {\r\n  render() {\r\n    return (\r\n      <div className=\"Content-container Background-transparent\">\r\n        <div className={`Content ${this.props.transparent === true ? 'Background-transparent' : 'Content-background'}`}>\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(Content);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FaTrophy } from 'react-icons/fa';\r\nimport './styles.css';\r\n\r\ninterface IUserInfoOverviewProps extends React.ClassAttributes<UserInfoOverview> {\r\n}\r\n\r\ninterface IUserInfoOverviewState {\r\n}\r\n\r\nclass UserInfoOverview extends React.Component<IUserInfoOverviewProps, IUserInfoOverviewState> {\r\n  constructor(props: IUserInfoOverviewProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"UserInfoOverview-container\">\r\n        <p className=\"UserInfoOverview-header-text\">Tổng quan chỉ số</p>\r\n        <div className=\"UserInfoOverview-overview-info-container\">\r\n          <div className=\"UserInfoOverview-overview-info-item\">\r\n            <p className=\"UserInfoOverview-number-text\">1</p>\r\n            <p>Giải đấu đã tạo</p>\r\n          </div>\r\n          <div className=\"UserInfoOverview-overview-info-item\">\r\n            <p className=\"UserInfoOverview-number-text\">2</p>\r\n            <p>Đội đã lập</p>\r\n          </div>\r\n          <div className=\"UserInfoOverview-overview-info-item\">\r\n            <p className=\"UserInfoOverview-number-text\">3</p>\r\n            <p>Tin đã viết</p>\r\n          </div>\r\n          <div className=\"UserInfoOverview-overview-info-item\">\r\n            <p className=\"UserInfoOverview-number-text\">2</p>\r\n            <p>Số lượt comment</p>\r\n          </div>\r\n        </div>\r\n        <p className=\"UserInfoOverview-header-text\">Tổng quan thứ hạng</p>\r\n        <div className=\"UserInfoOverview-overview-info-container\">\r\n          <div className=\"UserInfoOverview-top-info-item\">\r\n            <div className=\"UserInfoOverview-top-info-item-left\">\r\n              <FaTrophy className=\"UserInfoOverview-top1-icon\" size={30} />\r\n              <p>1st</p>\r\n            </div>\r\n            <div className=\"UserInfoOverview-top-info-item-right\">\r\n              <p className=\"UserInfoOverview-number-text\">1</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"UserInfoOverview-top-info-item\">\r\n            <div className=\"UserInfoOverview-top-info-item-left\">\r\n              <FaTrophy className=\"UserInfoOverview-top2-icon\" size={30} />\r\n              <p>2nd</p>\r\n            </div>\r\n            <div className=\"UserInfoOverview-top-info-item-right\">\r\n              <p className=\"UserInfoOverview-number-text\">1</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"UserInfoOverview-top-info-item\">\r\n            <div className=\"UserInfoOverview-top-info-item-left\">\r\n              <FaTrophy className=\"UserInfoOverview-top3-icon\" size={30} />\r\n              <p>3rd</p>\r\n            </div>\r\n            <div className=\"UserInfoOverview-top-info-item-right\">\r\n              <p className=\"UserInfoOverview-number-text\">1</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"UserInfoOverview-top-info-item\">\r\n            <div className=\"UserInfoOverview-top-info-item-left\">\r\n              <p>Top 10</p>\r\n            </div>\r\n            <div className=\"UserInfoOverview-top-info-item-right\">\r\n              <p className=\"UserInfoOverview-number-text\">1</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(UserInfoOverview);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { FaRunning } from 'react-icons/fa';\r\nimport { IoIosPeople } from 'react-icons/io';\r\nimport { IParams } from 'interfaces/common';\r\nimport './styles.css';\r\n\r\ninterface ITournamentOverviewProps extends React.ClassAttributes<TournamentOverview> {\r\n  info: IParams;\r\n  index: number;\r\n}\r\n\r\ninterface ITournamentOverviewState {\r\n}\r\n\r\nclass TournamentOverview extends React.Component<ITournamentOverviewProps, ITournamentOverviewState> {\r\n  constructor(props: ITournamentOverviewProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const info = this.props.info.Tournament;\r\n    const moreInfo = this.props.info.OtherInformation;\r\n    return (\r\n      <Link to={`/tournament/${(info as unknown as IParams).id}`} style={{ textDecoration: 'none' }}>\r\n        <div className=\"TournamentOverview-container\">\r\n          <div className=\"TournamentOverview-background-image-container\">\r\n            <img className={'TournamentOverview-background-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n          </div>\r\n          <div className=\"TournamentOverview-avatar-image-container\">\r\n            <div className=\"TournamentOverview-avatar-container\">\r\n              <img className={'TournamentOverview-avatar-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n            </div>\r\n            <div className=\"TournamentOverview-name-container\">\r\n              <p className=\"TournamentOverview-name-text\">{(info as unknown as IParams).fullName}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"TournamentOverview-info-container\">\r\n            <div className=\"TournamentOverview-info-item\">\r\n              <FaRunning size={25} color={'white'} />\r\n              <p className=\"TournamentOverview-text\">{((moreInfo as unknown as IParams).sportsName as unknown as IParams[]).map((item, index) => `${index > 0 ? `, ${item}` : item}`)}</p>\r\n            </div>\r\n            <div className=\"TournamentOverview-info-item\">\r\n              <IoIosPeople size={25} color={'white'} />\r\n              <p className=\"TournamentOverview-text\">{(moreInfo as unknown as IParams).countPlayer} Đội tham gia</p>\r\n            </div>\r\n            <div className=\"TournamentOverview-info-item\">\r\n              <p>Khai mạc ngày: {(info as unknown as IParams).openingTime}</p>\r\n            </div>\r\n            <div className=\"TournamentOverview-info-item\">\r\n              <p>Bế mạc ngày: {(info as unknown as IParams).closingTime}</p>\r\n            </div>\r\n            <div className=\"TournamentOverview-info-item\">\r\n              <p>Tiến trình giải: {(moreInfo as unknown as IParams).process}%</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(TournamentOverview);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport './styles.css';\r\n\r\ninterface IPagingProps extends React.ClassAttributes<Paging> {\r\n  currentPage: number;\r\n  totalPage: number;\r\n\r\n  onChangeSelectedPage(page: number): void;\r\n}\r\n\r\ninterface IPagingState {\r\n  currentPage: number;\r\n}\r\n\r\nclass Paging extends React.Component<IPagingProps, IPagingState> {\r\n  constructor(props: IPagingProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage: this.props.currentPage,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IPagingProps, nextState: IPagingState) {\r\n    if (this.props.currentPage !== nextProps.currentPage) {\r\n      this.setState({ currentPage: nextProps.currentPage });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private onChangeCurrentPageText = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tempValue = 1;\r\n    if (!isNaN(value.target.value as unknown as number)) {\r\n      tempValue = Number(value.target.value);\r\n      if (tempValue < 1) {\r\n        tempValue = 1;\r\n      } else if (tempValue > this.props.totalPage) {\r\n        tempValue = this.props.totalPage;\r\n      }\r\n    } else {\r\n      tempValue = 1;\r\n    }\r\n    this.setState({ currentPage: tempValue, });\r\n  }\r\n\r\n  private onSelectPage = (page: number) => {\r\n    this.props.onChangeSelectedPage(page);\r\n  }\r\n\r\n  private keyPressed = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      this.onSelectPage(this.state.currentPage);\r\n    }\r\n  }\r\n\r\n  private renderListPage = () => {\r\n    const listPage = [];\r\n    if (this.props.totalPage >= 7) {\r\n      let distance = 0;\r\n      if (this.props.currentPage > 3) {\r\n        if (this.props.currentPage < this.props.totalPage - 2) {\r\n          distance = 3;\r\n        } else {\r\n          if (this.props.totalPage - this.props.currentPage === 2) {\r\n            distance = (this.props.totalPage - this.props.currentPage) * 2;\r\n          } else if (this.props.totalPage - this.props.currentPage === 1) {\r\n            distance = this.props.totalPage - this.props.currentPage + 4;\r\n          } else {\r\n            distance = this.props.totalPage - this.props.currentPage + 6;\r\n          }\r\n        }\r\n      } else {\r\n        distance = this.props.currentPage - 1;\r\n      }\r\n      for (let i = 0; i < 7; i++) {\r\n        listPage.push(\r\n          <div className=\"Paging-each-page\" onClick={() => { if (i !== distance) { this.onSelectPage(this.props.currentPage - distance + i) } }} key={i}>\r\n            <p className={`Paging-each-page-text ${i === distance && 'Paging-each-page-text-selected'}`}>{this.props.currentPage - distance + i}</p>\r\n          </div>\r\n        );\r\n      }\r\n      if (this.props.currentPage > 1) {\r\n        listPage.unshift(\r\n          <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(this.props.currentPage - 1)} key={'<'}>\r\n            <p className={`Paging-each-page-icon1`}>{'<'}</p>\r\n          </div>\r\n        );\r\n        if (this.props.totalPage > 7 && this.props.currentPage > 4) {\r\n          listPage.unshift(\r\n            <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(1)} key={'<<'}>\r\n              <p className={`Paging-each-page-icon2`}>{'<<'}</p>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      if (this.props.currentPage < this.props.totalPage) {\r\n        listPage.push(\r\n          <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(this.props.currentPage + 1)} key={'>'}>\r\n            <p className={`Paging-each-page-icon1`}>{'>'}</p>\r\n          </div>\r\n        );\r\n        if (this.props.totalPage > 7 && this.props.currentPage < this.props.totalPage - 3) {\r\n          listPage.push(\r\n            <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(this.props.totalPage)} key={'>>'}>\r\n              <p className={`Paging-each-page-icon2`}>{'>>'}</p>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.props.totalPage; i++) {\r\n        listPage.push(\r\n          <div className=\"Paging-each-page\" onClick={() => { if (i !== this.props.currentPage - 1) { this.onSelectPage(1 + i) } }} key={i}>\r\n            <p className={`Paging-each-page-text ${i === this.props.currentPage - 1 && 'Paging-each-page-text-selected'}`}>{1 + i}</p>\r\n          </div>\r\n        );\r\n      }\r\n      if (this.props.currentPage > 1) {\r\n        listPage.unshift(\r\n          <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(this.props.currentPage - 1)} key={'<'}>\r\n            <p className={`Paging-each-page-icon1`}>{'<'}</p>\r\n          </div>\r\n        );\r\n      }\r\n      if (this.props.currentPage < this.props.totalPage) {\r\n        listPage.push(\r\n          <div className=\"Paging-each-page\" onClick={() => this.onSelectPage(this.props.currentPage + 1)} key={'>'}>\r\n            <p className={`Paging-each-page-icon1`}>{'>'}</p>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return listPage;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.totalPage < 2) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"Paging-container\">\r\n        <input style={{ width: 30 }} type={'text'} onChange={this.onChangeCurrentPageText} onKeyPress={this.keyPressed} value={this.state.currentPage} />\r\n        <p>/{this.props.totalPage}</p>\r\n        <div className=\"Paging-bar\">\r\n          {this.renderListPage()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Paging);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport TournamentOverview from 'components/TournamentOverview';\r\nimport Paging from 'components/Paging';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { queryListTournamentsOfUser } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IUserInfoTournamentProps extends React.ClassAttributes<UserInfoTournament> {\r\n  userId: number;\r\n  listTournamentOfUser: IParams | null;\r\n\r\n  queryListTournamentsOfUser(param: IBigRequest): void;\r\n}\r\n\r\ninterface IUserInfoTournamentState {\r\n  currentPage: number;\r\n}\r\n\r\nclass UserInfoTournament extends React.Component<IUserInfoTournamentProps, IUserInfoTournamentState> {\r\n  constructor(props: IUserInfoTournamentProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage: 1,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        userId: this.props.userId,\r\n        page: this.state.currentPage,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryListTournamentsOfUser(params);\r\n  }\r\n\r\n  private onChangeSelectedPage = (pageNumber: number) => {\r\n    this.setState({ currentPage: pageNumber }, () => this.requestData());\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.listTournamentOfUser);\r\n    return (\r\n      <div className=\"UserInfoTournament-container\">\r\n        <div className=\"UserInfoTournament-container-container\">\r\n          {this.props.listTournamentOfUser && this.props.listTournamentOfUser.Tournaments ? ((this.props.listTournamentOfUser.Tournaments as unknown as IParams[]).length > 0 ? (this.props.listTournamentOfUser.Tournaments as unknown as IParams[]).map(\r\n            (item, index) => <TournamentOverview info={item} index={index} key={index} />) : <p>Không tìm thấy kết quả nào!</p>) :\r\n            <Skeleton />\r\n          }\r\n        </div>\r\n        <Paging currentPage={this.state.currentPage} totalPage={this.props.listTournamentOfUser != null ? this.props.listTournamentOfUser.TotalPage as number : 0} onChangeSelectedPage={this.onChangeSelectedPage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTournamentOfUser: state.listTournamentOfUser,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryListTournamentsOfUser, }\r\n)(UserInfoTournament);","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_LIST_TOURNAMENT_OF_USER } from \"redux-saga/actions\";\r\nimport { QUERY_LIST_TOURNAMENT_OF_USER_SUCCESS, QUERY_LIST_TOURNAMENT_OF_USER_FAILED } from \"./reducers\";\r\n\r\nexport const queryListTournamentsOfUser = (data: IBigRequest) => ({\r\n  type: QUERY_LIST_TOURNAMENT_OF_USER,\r\n  response: {\r\n    success: QUERY_LIST_TOURNAMENT_OF_USER_SUCCESS,\r\n    failed: QUERY_LIST_TOURNAMENT_OF_USER_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_USER_INFO, EDIT_USER_INFO, USER_UPDATE_BACKGROUND, USER_UPDATE_AVATAR } from \"redux-saga/actions\";\r\nimport { QUERY_USER_INFO_SUCCESS, QUERY_USER_INFO_FAILED, EDIT_USER_INFO_SUCCESS, EDIT_USER_INFO_FAILED, USER_UPDATE_BACKGROUND_SUCCESS, USER_UPDATE_BACKGROUND_FAILED, USER_UPDATE_AVATAR_SUCCESS, USER_UPDATE_AVATAR_FAILED } from \"./reducers\";\r\n\r\nexport const queryUserInfo = (data: IBigRequest) => ({\r\n  type: QUERY_USER_INFO,\r\n  response: {\r\n    success: QUERY_USER_INFO_SUCCESS,\r\n    failed: QUERY_USER_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editUserInfo = (data: IBigRequest) => ({\r\n  type: EDIT_USER_INFO,\r\n  response: {\r\n    success: EDIT_USER_INFO_SUCCESS,\r\n    failed: EDIT_USER_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateBackground = (data: IBigRequest) => ({\r\n  type: USER_UPDATE_BACKGROUND,\r\n  response: {\r\n    success: USER_UPDATE_BACKGROUND_SUCCESS,\r\n    failed: USER_UPDATE_BACKGROUND_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateAvatar = (data: IBigRequest) => ({\r\n  type: USER_UPDATE_AVATAR,\r\n  response: {\r\n    success: USER_UPDATE_AVATAR_SUCCESS,\r\n    failed: USER_UPDATE_AVATAR_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as H from 'history';\r\nimport { StaticContext } from 'react-router';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport { AiFillCamera } from \"react-icons/ai\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport CustomTab from 'components/CustomTab';\r\nimport UserInfoOverview from 'components/UserInfoOverview';\r\nimport UserInfoTournament from 'components/UserInfoTournament';\r\nimport Teams from 'components/Teams';\r\nimport TextInput from 'components/TextInput';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { formatGender } from 'utils/common';\r\nimport { formatStringToDate, formatDateToString, formatDateToDisplay } from 'utils/datetime';\r\nimport config from 'config';\r\nimport { EDIT_USER_INFO } from 'redux-saga/actions';\r\nimport { EDIT_USER_INFO_SUCCESS, EDIT_USER_INFO_FAILED } from './reducers';\r\nimport { queryUserInfo, editUserInfo, updateBackground, updateAvatar } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IUserInfoProps extends React.ClassAttributes<UserInfo> {\r\n  routerInfo: RouteComponentProps<any, StaticContext, H.LocationState>;\r\n  userInfo: IParams | null;\r\n\r\n  queryUserInfo(param: IBigRequest): void;\r\n  editUserInfo(param: IBigRequest): void;\r\n  updateBackground(param: IBigRequest): void;\r\n  updateAvatar(param: IBigRequest): void;\r\n}\r\n\r\ninterface IUserInfoState {\r\n  editMode: boolean;\r\n  firstName: string;\r\n  firstNameErrorContent: string;\r\n  firstNameError: boolean;\r\n  lastName: string;\r\n  lastNameErrorContent: string;\r\n  lastNameError: boolean;\r\n  email: string;\r\n  emailErrorContent: string;\r\n  emailError: boolean;\r\n  address: string;\r\n  addressErrorContent: string;\r\n  addressError: boolean;\r\n  phoneNumberErrorContent: string;\r\n  phoneNumberError: boolean;\r\n  gender: ValueType<OptionTypeBase>;\r\n  dateOfBirth: Date;\r\n  phoneNumber: string;\r\n}\r\n\r\nconst genderOptions = [\r\n  { value: true, label: 'Nam' },\r\n  { value: false, label: 'Nữ' },\r\n];\r\n\r\nclass UserInfo extends React.Component<IUserInfoProps, IUserInfoState> {\r\n  constructor(props: IUserInfoProps) {\r\n    super(props);\r\n    this.state = {\r\n      editMode: false,\r\n      firstName: '',\r\n      firstNameErrorContent: '',\r\n      firstNameError: false,\r\n      lastName: '',\r\n      lastNameErrorContent: '',\r\n      lastNameError: false,\r\n      email: '',\r\n      emailErrorContent: '',\r\n      emailError: false,\r\n      address: '',\r\n      addressErrorContent: '',\r\n      addressError: false,\r\n      phoneNumber: '',\r\n      phoneNumberErrorContent: '',\r\n      phoneNumberError: false,\r\n      gender: { value: true, label: 'Nam' },\r\n      dateOfBirth: new Date(),\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IUserInfoProps, nextState: IUserInfoState) {\r\n    if (this.props.userInfo !== nextProps.userInfo) {\r\n      this.setState({\r\n        editMode: false,\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        id: Number(this.props.routerInfo.match.params.userId),\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryUserInfo(params);\r\n  }\r\n\r\n  private handleOpenEditUserInfo = () => {\r\n    this.setState({\r\n      editMode: true,\r\n      firstName: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).firstName != null ? (this.props.userInfo.User as unknown as IParams).firstName as string : '',\r\n      lastName: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).lastName != null ? (this.props.userInfo.User as unknown as IParams).lastName as string : '',\r\n      email: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).email != null ? (this.props.userInfo.User as unknown as IParams).email as string : '',\r\n      address: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).address != null ? (this.props.userInfo.User as unknown as IParams).address as string : '',\r\n      phoneNumber: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).phoneNumber != null ? (this.props.userInfo.User as unknown as IParams).phoneNumber as string : '',\r\n      gender: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).gender === true ? { value: true, label: 'Nam' } : { value: false, label: 'Nữ' },\r\n      dateOfBirth: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).dob != null ? formatStringToDate((this.props.userInfo.User as unknown as IParams).dob as string, 'yyyy-MM-dd') : new Date(),\r\n    });\r\n  }\r\n\r\n  private validate = () => {\r\n    let firstNameError = false;\r\n    let firstNameErrorContent = '';\r\n    let lastNameErrorContent = '';\r\n    let lastNameError = false;\r\n    let emailErrorContent = '';\r\n    let emailError = false;\r\n    let addressErrorContent = '';\r\n    let addressError = false;\r\n    let phoneNumberErrorContent = '';\r\n    let phoneNumberError = false;\r\n    if (this.state.firstName.trim() === '') {\r\n      firstNameError = true;\r\n      firstNameErrorContent = 'Tên không được trống';\r\n    }\r\n    if (this.state.lastName.trim() === '') {\r\n      lastNameError = true;\r\n      lastNameErrorContent = 'Họ không được trống';\r\n    }\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    }\r\n    if (!config.regex.phoneNumber.test(this.state.phoneNumber)) {\r\n      phoneNumberError = true;\r\n      phoneNumberErrorContent = 'Số điện thoại không hợp lệ';\r\n    }\r\n\r\n    return {\r\n      firstNameError,\r\n      firstNameErrorContent,\r\n      lastNameErrorContent,\r\n      lastNameError,\r\n      emailError,\r\n      emailErrorContent,\r\n      addressError,\r\n      addressErrorContent,\r\n      phoneNumberError,\r\n      phoneNumberErrorContent\r\n    };\r\n  }\r\n\r\n  private handleCloseEditUserInfo = () => {\r\n    const { firstNameError,\r\n      firstNameErrorContent,\r\n      lastNameErrorContent,\r\n      lastNameError,\r\n      emailError,\r\n      emailErrorContent,\r\n      addressError,\r\n      addressErrorContent,\r\n      phoneNumberError,\r\n      phoneNumberErrorContent } = this.validate();\r\n    this.setState({\r\n      firstNameError,\r\n      firstNameErrorContent,\r\n      lastNameErrorContent,\r\n      lastNameError,\r\n      emailError,\r\n      emailErrorContent,\r\n      addressError,\r\n      addressErrorContent,\r\n      phoneNumberError,\r\n      phoneNumberErrorContent\r\n    });\r\n    if (firstNameError === true || lastNameError === true || emailError === true || addressError === true || phoneNumberError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        id: Number(this.props.routerInfo.match.params.userId),\r\n      },\r\n      data: {\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        dob: formatDateToString(this.state.dateOfBirth, 'yyyy-MM-dd'),\r\n        email: this.state.email,\r\n        gender: (this.state.gender as IParams).value,\r\n        address: this.state.address,\r\n        username: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).username,\r\n        phoneNumber: this.state.phoneNumber,\r\n        roleId: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).roleId,\r\n        status: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).status,\r\n        url: this.props.userInfo != null && (this.props.userInfo.User as unknown as IParams).url,\r\n      },\r\n    };\r\n\r\n    this.props.editUserInfo(params)\r\n  }\r\n\r\n  private onChangeFirstName = (value: string) => {\r\n    this.setState({ firstName: value, });\r\n  }\r\n\r\n  private onChangeLastName = (value: string) => {\r\n    this.setState({ lastName: value, });\r\n  }\r\n\r\n  private onChangeAddress = (value: string) => {\r\n    this.setState({ address: value, });\r\n  }\r\n\r\n  private onChangePhoneNumber = (value: string) => {\r\n    this.setState({ phoneNumber: value, });\r\n  }\r\n\r\n  private onChangeGender = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({ gender: value, });\r\n  }\r\n\r\n  private handleChangeDateOfBirth = (value: Date) => {\r\n    this.setState({\r\n      dateOfBirth: value,\r\n    });\r\n  };\r\n\r\n  private updateBackground = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.userId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateBackground(params);\r\n    }\r\n  };\r\n\r\n  private updateAvatar = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.userId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateAvatar(params);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const tabList = [\r\n      'Tổng quan',\r\n      'Giải đấu',\r\n      // 'Đội đang quản lý'\r\n    ];\r\n    const componentList = [\r\n      <UserInfoOverview />,\r\n      <UserInfoTournament userId={Number(this.props.routerInfo.match.params.userId)} />,\r\n      // <Teams id={Number(this.props.routerInfo.match.params.userId)} type={'user'} />\r\n    ];\r\n    return (\r\n      <div className=\"UserInfo-Container\">\r\n        <div className=\"UserInfo-background-image-container UserInfo-background-image-container2\">\r\n          <img className={'UserInfo-background-image'} src={require('../../assets/image-384.png')} alt={'logo'} />\r\n          {this.props.userInfo != null && (this.props.userInfo as IParams).Config != null && ((this.props.userInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'UserInfo-change-image-icon'} />}\r\n          {this.props.userInfo != null && (this.props.userInfo as IParams).Config != null && ((this.props.userInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'Overlay'}>\r\n            <input type=\"file\" onChange={(e) => this.updateBackground(e.target.files)} />\r\n          </div>}\r\n        </div>\r\n        <div className=\"UserInfo-content-container\">\r\n          <div className=\"UserInfo-content-info-container\">\r\n            <ReduxBlockUi\r\n              tag=\"div\"\r\n              block={EDIT_USER_INFO}\r\n              unblock={[EDIT_USER_INFO_SUCCESS, EDIT_USER_INFO_FAILED]}\r\n            >\r\n              <img className={'UserInfo-avatar-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n              {this.props.userInfo != null && (this.props.userInfo as IParams).Config != null && ((this.props.userInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'UserInfo-change-avatar-icon'} />}\r\n              {this.props.userInfo != null && (this.props.userInfo as IParams).Config != null && ((this.props.userInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'Overlay2'}>\r\n                <input type=\"file\" onChange={(e) => this.updateAvatar(e.target.files)} />\r\n              </div>}\r\n              <div className=\"UserInfo-content-info-basic-info-container\">\r\n                {this.state.editMode !== false &&\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <h4>Sửa thông tin cơ bản</h4>\r\n                  </div>}\r\n                {this.state.editMode === false ?\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-name-text\">{this.props.userInfo != null && this.props.userInfo.User != null && (this.props.userInfo.User as unknown as IParams).firstName != null && (this.props.userInfo.User as unknown as IParams).lastName != null ? `${(this.props.userInfo.User as unknown as IParams).firstName} ${(this.props.userInfo.User as unknown as IParams).lastName}` : <Skeleton width={250} height={30} />}</p>\r\n                  </div> :\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <TextInput style={{ width: 300 }} label={'Tên'} value={this.state.firstName} onChangeText={this.onChangeFirstName} error={this.state.firstNameError} errorContent={this.state.firstNameErrorContent} />\r\n                  </div>}\r\n                {this.state.editMode !== false &&\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <TextInput style={{ width: 300 }} label={'Họ'} value={this.state.lastName} onChangeText={this.onChangeLastName} error={this.state.lastNameError} errorContent={this.state.lastNameErrorContent} />\r\n                  </div>}\r\n                {this.state.editMode === false ?\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-otherInfo-text\">{this.props.userInfo != null && this.props.userInfo.User != null ? `Giới tính: ${formatGender((this.props.userInfo.User as unknown as IParams).gender as boolean | null)}` : <Skeleton width={100} height={20} />}</p>\r\n                  </div> :\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p>Giới tính</p>\r\n                    <Select\r\n                      options={genderOptions}\r\n                      className=\"Select\"\r\n                      defaultValue={this.state.gender}\r\n                      value={this.state.gender}\r\n                      onChange={this.onChangeGender}\r\n                      menuPlacement={'top'}\r\n                    />\r\n                  </div>}\r\n                {this.state.editMode === false ?\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-otherInfo-text\">{this.props.userInfo != null && this.props.userInfo.User != null ? `Ngày sinh: ${formatDateToDisplay((this.props.userInfo.User as unknown as IParams).dob as string, 'dd/MM/yyyy', 'yyyy-MM-dd')}` : <Skeleton width={200} height={20} />}</p>\r\n                  </div> :\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-otherInfo-text\">Ngày sinh</p>\r\n                    <DatePicker\r\n                      selected={this.state.dateOfBirth}\r\n                      dateFormat=\"dd/MM/yyyy\"\r\n                      onChange={this.handleChangeDateOfBirth}\r\n                      maxDate={new Date()}\r\n                    />\r\n                  </div>}\r\n                {this.state.editMode === false &&\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                  <p className=\"UserInfo-otherInfo-text\">{this.props.userInfo != null && this.props.userInfo.User != null ? `Email: ${(this.props.userInfo.User as unknown as IParams).email != null ? (this.props.userInfo.User as unknown as IParams).email : ''}` : <Skeleton width={200} height={20} />}</p>\r\n                  </div>}\r\n                {this.state.editMode === false ?\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-otherInfo-text\">{this.props.userInfo != null && this.props.userInfo.User != null ? `Địa chỉ: ${(this.props.userInfo.User as unknown as IParams).address != null ? (this.props.userInfo.User as unknown as IParams).address : ''}` : <Skeleton width={300} height={20} />}</p>\r\n                  </div> :\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <TextInput style={{ width: 500 }} label={'Địa chỉ'} value={this.state.address} onChangeText={this.onChangeAddress} error={this.state.addressError} errorContent={this.state.addressErrorContent} />\r\n                  </div>}\r\n                {this.state.editMode === false ?\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <p className=\"UserInfo-otherInfo-text\">{this.props.userInfo != null && this.props.userInfo.User != null ? `Số điện thoại: ${(this.props.userInfo.User as unknown as IParams).phoneNumber != null ? (this.props.userInfo.User as unknown as IParams).phoneNumber : ''}` : <Skeleton width={200} height={20} />}</p>\r\n                  </div> :\r\n                  <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                    <TextInput style={{ width: 500 }} label={'Số điện thoại'} value={this.state.phoneNumber} onChangeText={this.onChangePhoneNumber} error={this.state.phoneNumberError} errorContent={this.state.phoneNumberErrorContent} />\r\n                  </div>}\r\n                <div className=\"UserInfo-content-info-basic-info-container-singleRow\">\r\n                  {this.props.userInfo != null && this.props.userInfo.Config != null && (this.props.userInfo as IParams).Config != null && ((this.props.userInfo as IParams).Config as unknown as IParams).canEdit === true && (this.state.editMode === false ? <div className=\"UserInfo-button-container\">\r\n                    <div className=\"UserInfo-button\" onClick={this.handleOpenEditUserInfo}>\r\n                      <h4 className=\"UserInfo-button-text\">Chỉnh sửa thông tin</h4>\r\n                    </div>\r\n                  </div> : <div className=\"UserInfo-button-container\">\r\n                      <div className=\"UserInfo-button\" onClick={this.handleCloseEditUserInfo}>\r\n                        <h4 className=\"UserInfo-button-text\">Lưu</h4>\r\n                      </div>\r\n                    </div>)}\r\n                </div>\r\n              </div>\r\n            </ReduxBlockUi>\r\n            {this.props.userInfo != null && this.props.userInfo.User != null && <div className=\"UserInfo-content-info-advanced-info-container\">\r\n              <CustomTab tabList={tabList} componentList={componentList} selectedIndex={0}></CustomTab>\r\n            </div>}\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    userInfo: state.userInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    queryUserInfo,\r\n    editUserInfo,\r\n    updateBackground,\r\n    updateAvatar\r\n  }\r\n)(UserInfo);","export function formatGender(value: boolean | null) {\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  if (value === true) {\r\n    return 'Nam';\r\n  } else {\r\n    return 'Nữ';\r\n  }\r\n}\r\n\r\nexport function formatTournamentStatus(value: string) {\r\n  if (value === 'initializing') {\r\n    return 'Đang khởi tạo';\r\n  } else if (value === 'opening') {\r\n    return 'Đang mở đăng kí';\r\n  } else if (value === 'processing') {\r\n    return 'Đang diễn ra';\r\n  } else if (value === 'stopped') {\r\n    return 'Đang bị ngưng bởi quản trị viên';\r\n  } else {\r\n    return 'Đã kết thúc';\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { CHANGE_PASSWORD } from 'redux-saga/actions';\r\nimport { CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED } from 'screens/ChangePassword/reducers';\r\nimport { changePassword } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IChangePasswordProps extends React.ClassAttributes<ChangePassword> {\r\n  changePassword(params: IBigRequest): void;\r\n}\r\n\r\ninterface IChangePasswordState {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n  reconfirmPassword: string;\r\n  oldPasswordError: boolean;\r\n  newPasswordError: boolean;\r\n  reconfirmPasswordError: boolean;\r\n  oldPasswordErrorContent: string;\r\n  newPasswordErrorContent: string;\r\n  reconfirmPasswordErrorContent: string;\r\n}\r\n\r\nclass ChangePassword extends React.Component<IChangePasswordProps, IChangePasswordState> {\r\n  constructor(props: IChangePasswordProps) {\r\n    super(props);\r\n    this.state = {\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      reconfirmPassword: '',\r\n      oldPasswordError: false,\r\n      oldPasswordErrorContent: '',\r\n      newPasswordError: false,\r\n      reconfirmPasswordError: false,\r\n      newPasswordErrorContent: '',\r\n      reconfirmPasswordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  private onChangeOldPassword = (value: string) => {\r\n    this.setState({ oldPassword: value, });\r\n  }\r\n\r\n  private onChangeNewPassword = (value: string) => {\r\n    this.setState({ newPassword: value, });\r\n  }\r\n\r\n  private onChangeReconfirmPassword = (value: string) => {\r\n    this.setState({ reconfirmPassword: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let newPasswordError = false;\r\n    let newPasswordErrorContent = '';\r\n    let oldPasswordErrorContent = '';\r\n    let oldPasswordError = false;\r\n    let reconfirmPasswordErrorContent = '';\r\n    let reconfirmPasswordError = false;\r\n    if (this.state.newPassword.includes(' ') || this.state.newPassword.trim() === '') {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (this.state.oldPassword.trim() === '' || this.state.oldPassword.includes(' ')) {\r\n      oldPasswordError = true;\r\n      oldPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (newPasswordError !== true && oldPasswordError !== true && this.state.newPassword === this.state.oldPassword) {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu mới không được giống mật khẩu cũ';\r\n    }\r\n    if (this.state.reconfirmPassword.trim() === '' || this.state.reconfirmPassword.includes(' ')) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    } else if (this.state.reconfirmPassword !== this.state.newPassword && newPasswordError !== true) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Xác nhận mật khẩu không hợp lệ';\r\n    }\r\n\r\n    return { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError };\r\n  }\r\n\r\n  private handleChangePassword = () => {\r\n    const { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError } = this.validate();\r\n    this.setState({\r\n      newPasswordError,\r\n      newPasswordErrorContent,\r\n      oldPasswordErrorContent,\r\n      oldPasswordError,\r\n      reconfirmPasswordErrorContent,\r\n      reconfirmPasswordError\r\n    });\r\n    if (newPasswordError === true || oldPasswordError === true || reconfirmPasswordError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        oldPassword: this.state.oldPassword,\r\n        password: this.state.newPassword,\r\n      },\r\n    };\r\n\r\n    this.props.changePassword(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHANGE_PASSWORD}\r\n        unblock={[CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED]}\r\n      >\r\n        <div className=\"Container-changePassword\">\r\n          <div className=\"Container-changePassword-middle\">\r\n            <h2>Đổi mật khẩu</h2>\r\n            <TextInput label={'Mật khẩu cũ'} type={'password'} onChangeText={this.onChangeOldPassword} error={this.state.oldPasswordError} errorContent={this.state.oldPasswordErrorContent} />\r\n            <TextInput label={'Mật khẩu mới'} type={'password'} onChangeText={this.onChangeNewPassword} error={this.state.newPasswordError} errorContent={this.state.newPasswordErrorContent} />\r\n            <TextInput label={'Xác nhận mật khẩu'} type={'password'} onChangeText={this.onChangeReconfirmPassword} error={this.state.reconfirmPasswordError} errorContent={this.state.reconfirmPasswordErrorContent} />\r\n            <div className=\"Button-changePassword-container\">\r\n              <div className=\"Button-changePassword\" onClick={this.handleChangePassword}>\r\n                <h4 className=\"Button-changePassword-text\">Đổi mật khẩu</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    changePassword,\r\n  }\r\n)(ChangePassword);","export const CHANGE_PASSWORD_SUCCESS = 'CHANGE_PASSWORD_SUCCESS';\r\nexport const CHANGE_PASSWORD_FAILED = 'CHANGE_PASSWORD_FAILED';","import { IBigRequest } from \"interfaces/common\";\r\nimport { CHANGE_PASSWORD } from \"redux-saga/actions\";\r\nimport { CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED } from \"./reducers\";\r\n\r\nexport const changePassword = (data: IBigRequest) => ({\r\n  type: CHANGE_PASSWORD,\r\n  response: {\r\n    success: CHANGE_PASSWORD_SUCCESS,\r\n    failed: CHANGE_PASSWORD_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport 'pagination.css';\r\nimport TournamentOverview from 'components/TournamentOverview';\r\nimport Paging from 'components/Paging';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { searchTournaments } from 'components/Header/actions';\r\nimport { queryListTournament } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IAllTournamentsProps extends React.ClassAttributes<AllTournaments> {\r\n  listTournament: IParams | null;\r\n  globalSearchString: string;\r\n\r\n  queryListTournament(param: IBigRequest): void;\r\n  searchTournaments(param: IBigRequest): void;\r\n}\r\n\r\ninterface IAllTournamentsState {\r\n  activePage: number;\r\n}\r\n\r\nclass AllTournaments extends React.Component<IAllTournamentsProps, IAllTournamentsState> {\r\n  constructor(props: IAllTournamentsProps) {\r\n    super(props);\r\n    this.state = {\r\n      activePage: 1,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IAllTournamentsProps, nextState: IAllTournamentsState) {\r\n    if (this.props.globalSearchString !== nextProps.globalSearchString && nextProps.globalSearchString === '') {\r\n      this.requestData();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.globalSearchString === '') {\r\n      this.requestData();\r\n    }\r\n  }\r\n\r\n  private requestData = (page = 1) => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        page,\r\n        limit: 3,\r\n      },\r\n      data: {},\r\n    }\r\n    this.props.queryListTournament(params);\r\n  }\r\n\r\n  private onChangeSelectedPage = (pageNumber: number) => {\r\n    if (this.props.globalSearchString !== '') {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          page: pageNumber,\r\n          limit: 3,\r\n          searchString: this.props.globalSearchString,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.searchTournaments(params);\r\n    } else {\r\n      this.requestData(pageNumber);\r\n    }\r\n    this.setState({ activePage: pageNumber });\r\n  }\r\n\r\n  render() {\r\n    console.log('this.props.listTournament', this.props.listTournament);\r\n    return (\r\n      <div className=\"AllTournaments-container-container\">\r\n        <p className=\"AllTournaments-header-text\">Tất cả các giải đấu</p>\r\n        {this.props.globalSearchString !== '' && <p className=\"AllTournaments-search-text\">Kết quả tìm kiếm cho: \"{this.props.globalSearchString}\"</p>}\r\n        <div className=\"AllTournaments-container\">\r\n          {this.props.listTournament && this.props.listTournament.Tournaments ? ((this.props.listTournament.Tournaments as unknown as IParams[]).length > 0 ? (this.props.listTournament.Tournaments as unknown as IParams[]).map(\r\n            (item, index) => <TournamentOverview info={item} index={index} key={index} />) : <p>Không tìm thấy kết quả nào!</p>) :\r\n            <Skeleton />\r\n          }\r\n        </div>\r\n        {/* <ReactPaginate\r\n          previousLabel={'<<'}\r\n          nextLabel={'>>'}\r\n          breakLabel={'...'}\r\n          breakClassName={'break-me'}\r\n          pageCount={15}\r\n          marginPagesDisplayed={2}\r\n          pageRangeDisplayed={5}\r\n          // onPageChange={this.handlePageClick}\r\n          containerClassName={'pagination'}\r\n          activeClassName={'active'}\r\n          disabledClassName={'disabled'}\r\n        /> */}\r\n        <Paging currentPage={this.state.activePage} totalPage={this.props.listTournament != null ? this.props.listTournament.TotalPage as number : 0} onChangeSelectedPage={this.onChangeSelectedPage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTournament: state.listTournament,\r\n    globalSearchString: state.globalSearchString,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryListTournament, searchTournaments }\r\n)(AllTournaments);","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_LIST_TOURNAMENT } from \"redux-saga/actions\";\r\nimport { QUERY_LIST_TOURNAMENT_SUCCESS, QUERY_LIST_TOURNAMENT_FAILED } from \"./reducers\";\r\n\r\nexport const queryListTournament = (data: IBigRequest) => ({\r\n  type: QUERY_LIST_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_LIST_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_LIST_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { isAfter, isBefore } from 'date-fns';\r\nimport 'react-block-ui/style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport TextInput from 'components/TextInput';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { cookies } from 'utils/cookies';\r\nimport { createNewTournament } from './actions';\r\nimport './styles.css';\r\n\r\ninterface ICreateNewTournamentProps extends React.ClassAttributes<CreateNewTournament> {\r\n  createNewTournament(param: IBigRequest): void;\r\n}\r\n\r\ninterface ICreateNewTournamentState {\r\n  tournamentName: string;\r\n  tournamentNameError: boolean;\r\n  tournamentNameErrorContent: string;\r\n  tournamentShortName: string;\r\n  tournamentShortNameError: boolean;\r\n  tournamentShortNameErrorContent: string;\r\n  tournamentDescription: string;\r\n  tournamentDescriptionError: boolean;\r\n  tournamentDescriptionErrorContent: string;\r\n  tournamentStartLocation: string;\r\n  tournamentStartLocationError: boolean;\r\n  tournamentStartLocationErrorContent: string;\r\n  tournamentEndLocation: string;\r\n  tournamentEndLocationError: boolean;\r\n  tournamentEndLocationErrorContent: string;\r\n  donor: string;\r\n  donorError: boolean;\r\n  donorErrorContent: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n\r\nclass CreateNewTournament extends React.Component<ICreateNewTournamentProps, ICreateNewTournamentState> {\r\n  constructor(props: ICreateNewTournamentProps) {\r\n    super(props);\r\n    this.state = {\r\n      tournamentName: '',\r\n      tournamentNameError: false,\r\n      tournamentNameErrorContent: '',\r\n      tournamentShortName: '',\r\n      tournamentShortNameError: false,\r\n      tournamentShortNameErrorContent: '',\r\n      tournamentDescription: '',\r\n      tournamentDescriptionError: false,\r\n      tournamentDescriptionErrorContent: '',\r\n      tournamentStartLocation: '',\r\n      tournamentStartLocationError: false,\r\n      tournamentStartLocationErrorContent: '',\r\n      tournamentEndLocation: '',\r\n      tournamentEndLocationError: false,\r\n      tournamentEndLocationErrorContent: '',\r\n      donor: '',\r\n      donorError: false,\r\n      donorErrorContent: '',\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n    };\r\n  }\r\n\r\n  private onChangeTournamentname = (value: string) => {\r\n    this.setState({ tournamentName: value, });\r\n  }\r\n\r\n  private onChangeTournamentShortName = (value: string) => {\r\n    this.setState({ tournamentShortName: value, });\r\n  }\r\n\r\n  private onChangeTournamentDescription = (value: string) => {\r\n    this.setState({ tournamentDescription: value, });\r\n  }\r\n\r\n  private onChangeTournamentDonor = (value: string) => {\r\n    this.setState({ donor: value, });\r\n  }\r\n\r\n  private onChangeTournamentStartLocation = (value: string) => {\r\n    this.setState({ tournamentStartLocation: value, });\r\n  }\r\n\r\n  private onChangeTournamentEndLocation = (value: string) => {\r\n    this.setState({ tournamentEndLocation: value, });\r\n  }\r\n\r\n  private handleChangeStartDate = (value: Date) => {\r\n    if (isAfter(value, this.state.endDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeEndDate = (value: Date) => {\r\n    if (isBefore(value, this.state.startDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        endDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validate = () => {\r\n    let tournamentNameError = false;\r\n    let tournamentNameErrorContent = '';\r\n    let tournamentShortNameErrorContent = '';\r\n    let tournamentShortNameError = false;\r\n    if (this.state.tournamentName.trim() === '') {\r\n      tournamentNameError = true;\r\n      tournamentNameErrorContent = 'Tên giải không được trống';\r\n    }\r\n    if (this.state.tournamentShortName.trim() === '') {\r\n      tournamentShortNameError = true;\r\n      tournamentShortNameErrorContent = 'Tên ngắn của giải không được trống';\r\n    }\r\n\r\n    return { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError };\r\n  }\r\n\r\n  private handleCreateNewTournament = () => {\r\n    const { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError } = this.validate();\r\n    this.setState({\r\n      tournamentNameError,\r\n      tournamentNameErrorContent,\r\n      tournamentShortNameErrorContent,\r\n      tournamentShortNameError\r\n    });\r\n    if (tournamentNameError === true || tournamentShortNameError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        fullName: this.state.tournamentName,\r\n        shortName: this.state.tournamentShortName,\r\n        description: this.state.tournamentDescription,\r\n        creatorId: cookies.get(COOKIES_TYPE.AUTH_TOKEN).User.id,\r\n        openingLocation: this.state.tournamentStartLocation,\r\n        openingTime: this.state.startDate,\r\n        closingLocation: this.state.tournamentEndLocation,\r\n        closingTime: this.state.endDate,\r\n        donor: this.state.donor,\r\n      },\r\n    };\r\n\r\n    this.props.createNewTournament(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CreateNewTournament-container\">\r\n        <div className=\"CreateNewTournament-tournament-container\">\r\n          <p className=\"CreateNewTournament-header-text\">Tạo mới giải đấu</p>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Tên giải:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='Nhập tên của giải' error={this.state.tournamentNameError} errorContent={this.state.tournamentNameErrorContent} onChangeText={this.onChangeTournamentname} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Tên ngắn:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='Nhập tên ngắn của giải' error={this.state.tournamentShortNameError} errorContent={this.state.tournamentShortNameErrorContent} onChangeText={this.onChangeTournamentShortName} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Mô tả:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='Nhập mô tả' error={this.state.tournamentDescriptionError} errorContent={this.state.tournamentDescriptionErrorContent} onChangeText={this.onChangeTournamentDescription} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Địa điểm khai mạc:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='' error={this.state.tournamentStartLocationError} errorContent={this.state.tournamentStartLocationErrorContent} onChangeText={this.onChangeTournamentStartLocation} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Thời gian khai mạc:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <DatePicker\r\n                selected={this.state.startDate}\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                onChange={this.handleChangeStartDate}\r\n              />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Địa điểm bế mạc:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='' error={this.state.tournamentEndLocationError} errorContent={this.state.tournamentEndLocationErrorContent} onChangeText={this.onChangeTournamentEndLocation} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Thời gian bế mạc:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <DatePicker\r\n                selected={this.state.endDate}\r\n                onChange={this.handleChangeEndDate}\r\n                dateFormat=\"dd/MM/yyyy\"\r\n              />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className={'CreateNewTournament-listManager-container'}>\r\n            <p>Nhà tài trợ:</p>\r\n            <div className={'CreateNewTournament-tounamentName-container-container'}>\r\n              <TextInput label='' error={this.state.donorError} errorContent={this.state.donorErrorContent} onChangeText={this.onChangeTournamentDonor} />\r\n              {/*defaultValue */}\r\n            </div>\r\n          </div>\r\n          <div className=\"CreateNewTournament-button-container\">\r\n            <div className=\"CreateNewTournament-button\" onClick={this.handleCreateNewTournament}>\r\n              <h4 className=\"CreateNewTournament-button-text\">Tạo mới</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { createNewTournament }\r\n)(CreateNewTournament);","import { IBigRequest } from \"interfaces/common\";\r\nimport { CREATE_NEW_TOURNAMENT } from \"redux-saga/actions\";\r\nimport { CREATE_NEW_TOURNAMENT_SUCCESS, CREATE_NEW_TOURNAMENT_FAILED } from \"./reducers\";\r\n\r\nexport const createNewTournament = (data: IBigRequest) => ({\r\n  type: CREATE_NEW_TOURNAMENT,\r\n  response: {\r\n    success: CREATE_NEW_TOURNAMENT_SUCCESS,\r\n    failed: CREATE_NEW_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","export const CREATE_NEW_TOURNAMENT_FAILED = 'CREATE_NEW_TOURNAMENT_FAILED';\r\nexport const CREATE_NEW_TOURNAMENT_SUCCESS = 'CREATE_NEW_TOURNAMENT_SUCCESS';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as H from 'history';\r\nimport { StaticContext } from 'react-router';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport store from 'redux-saga/store';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { activeAccount } from './actions';\r\nimport { ACTIVE_ACCOUNT_DEFAULT } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface IActiveAccountProps extends React.ClassAttributes<ActiveAccount> {\r\n  routerInfo: RouteComponentProps<any, StaticContext, H.LocationState>;\r\n  activeAccountStatus: boolean | null;\r\n\r\n  activeAccount(params: IBigRequest): void;\r\n}\r\n\r\ninterface IActiveAccountState {\r\n}\r\n\r\nclass ActiveAccount extends React.Component<IActiveAccountProps, IActiveAccountState> {\r\n  constructor(props: IActiveAccountProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        code: this.props.routerInfo.match.params.tokenVerify,\r\n      },\r\n    };\r\n\r\n    this.props.activeAccount(params);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    store.dispatch({\r\n      type: ACTIVE_ACCOUNT_DEFAULT,\r\n      payload: null,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.props.activeAccountStatus == null) {\r\n      return (\r\n        <div className=\"Container-login\">\r\n          <div className=\"Container-login-middle\">\r\n            <h2>Vui lòng chờ trong giây lát</h2>\r\n            <p className=\"Long-introduction\">Chúng tôi đang kích hoạt tài khoản cho bạn</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.activeAccountStatus === true) {\r\n      return (\r\n        <div className=\"Container-login\">\r\n          <div className=\"Container-login-middle\">\r\n            <h2>Bạn đã kích hoạt tài khoản thành công</h2>\r\n            <p className=\"Long-introduction\">Bây giờ hãy đăng nhập lại 1 lần nữa</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"Container-login\">\r\n          <div className=\"Container-login-middle\">\r\n            <h2>Đã có lỗi xảy ra</h2>\r\n            <p className=\"Long-introduction\">Bạn vui lòng thử lại sau</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    activeAccountStatus: state.activeAccountStatus,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    activeAccount,\r\n  }\r\n)(ActiveAccount);","import { IBigRequest } from \"interfaces/common\";\r\nimport { ACTIVE_ACCOUNT } from \"redux-saga/actions\";\r\nimport { ACTIVE_ACCOUNT_SUCCESS, ACTIVE_ACCOUNT_FAILED } from \"./reducers\";\r\n\r\nexport const activeAccount = (data: IBigRequest) => ({\r\n  type: ACTIVE_ACCOUNT,\r\n  response: {\r\n    success: ACTIVE_ACCOUNT_SUCCESS,\r\n    failed: ACTIVE_ACCOUNT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { IParams } from 'interfaces/common';\r\nimport { setHoveringTeam, onEditBracketMode, addListTeamSelecting } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IBracketTeamProps extends React.ClassAttributes<BracketTeam> {\r\n  info: IParams | null;\r\n  borderBottom?: boolean;\r\n  hoveringTeam: number | null;\r\n  description: IParams | null;\r\n  listTeam: IParams[] | null;\r\n  editBracketMode: boolean;\r\n  listTeamSelecting: number[];\r\n  competitionId: number;\r\n\r\n  setHoveringTeam(params: number | null): void;\r\n  onEditBracketMode(status: boolean): void;\r\n  addListTeamSelecting(params: IParams): void;\r\n}\r\n\r\ninterface IBracketTeamState {\r\n}\r\n\r\nclass BracketTeam extends React.Component<IBracketTeamProps, IBracketTeamState> {\r\n  constructor(props: IBracketTeamProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  private setHoveringTeam = (data: number | null) => {\r\n    if (this.props.setHoveringTeam != null) {\r\n      this.props.setHoveringTeam(data);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`BracketTeam-container ${this.props.borderBottom === true && 'BracketTeam-border-bottom'}`}\r\n        onMouseOver={() => { this.setHoveringTeam(this.props.info != null && this.props.info.id != null ? this.props.info.id as number : null); }}\r\n        onMouseOut={() => { this.setHoveringTeam(null); }}\r\n      >\r\n        <div\r\n          className={\r\n            `BracketTeam-name-container\r\n            ${this.props.info != null && this.props.info.id != null && this.props.hoveringTeam != null && this.props.info.id === this.props.hoveringTeam ? 'BracketTeam-beingHovered' : 'BracketTeam-notBeingHovered'}\r\n            ${this.props.description != null && this.props.description.descType === 0 ? (this.props.editBracketMode === true ? 'BracketTeam-name-container2' : 'BracketTeam-name-container1') : ''}\r\n            ${this.props.editBracketMode === true && this.props.description != null && this.props.description.descType === 0 ? 'BracketTeam-name-container-editBracketMode' : ''}`\r\n          }\r\n        // thêm đk check giải đấu còn ở trạn thái unStarted hay ko\r\n        >\r\n          <div\r\n            className={'BracketTeam-name-container-container'}\r\n            onClick={() => {\r\n              // thêm đk check giải đấu còn ở trạn thái unStarted hay ko\r\n              if (this.props.description != null && this.props.description.descType === 0 && this.props.info == null) {\r\n                this.props.addListTeamSelecting({\r\n                  listTeamId: [...this.props.listTeamSelecting, this.props.listTeam![(this.props.description.unitIndex as number) - 1].id as number],\r\n                  competitionId: this.props.competitionId,\r\n                });\r\n                this.props.onEditBracketMode(!this.props.editBracketMode);\r\n              }\r\n            }}\r\n          >\r\n            {this.props.info != null &&\r\n              this.props.info.name != null ?\r\n              <p className={\"BracketTeam-name-text\"}>{this.props.info.name}</p> :\r\n              (this.props.description != null &&\r\n                ((this.props.description.descType === 1 || this.props.description.descType === 4) ?\r\n                  <p className={\"BracketTeam-name-text BracketTeam-name-text2\"}>{this.props.description.description}</p> :\r\n                  (this.props.description.descType === 0 && <p className={\"BracketTeam-name-text\"}>{this.props.listTeam![(this.props.description.unitIndex as number) - 1] &&\r\n                    this.props.listTeam![(this.props.description.unitIndex as number) - 1].shortName ?\r\n                    this.props.listTeam![(this.props.description.unitIndex as number) - 1].shortName : ''}</p>)))}\r\n          </div>\r\n        </div>\r\n        <div className={`BracketTeam-score-container BracketTeam-score-top2-container`}\r\n        // BracketTeam-score-top${this.props.info.top ? this.props.info.top : '2'}-container`}\r\n        >\r\n          {/* {this.props.info.score && <p className={`BracketTeam-score-top${this.props.info.top ? this.props.info.top : '2'}-text`}>{this.props.info.score}</p>} */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTeam: state.listTeam,\r\n    hoveringTeam: state.hoveringTeam,\r\n    editBracketMode: state.editBracketMode,\r\n    listTeamSelecting: state.listTeamSelecting,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    setHoveringTeam,\r\n    onEditBracketMode,\r\n    addListTeamSelecting,\r\n  }\r\n)(BracketTeam);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport './styles.css';\r\n\r\ninterface IMatchDetailProps extends React.ClassAttributes<MatchDetail> {\r\n  info: IParams;\r\n}\r\n\r\ninterface IMatchDetailState {\r\n}\r\n\r\n\r\nclass MatchDetail extends React.Component<IMatchDetailProps, IMatchDetailState> {\r\n  constructor(props: IMatchDetailProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"MatchDetail-container\"\r\n      >\r\n        <div\r\n          className=\"MatchDetail-info-container\"\r\n        >\r\n          <p className={'MatchDetail-info-header-text'}>Trận {this.props.info.name}</p>\r\n        </div >\r\n        <div\r\n          className=\"MatchDetail-teams-container\"\r\n        >\r\n          <div\r\n            className=\"MatchDetail-team1-container\"\r\n          >\r\n            <div className={'MatchDetail-team1-name-container'}>\r\n              <p>{`${((this.props.info.team1 as IParams).team as IParams).fullName} (${((this.props.info.team1 as IParams).team as IParams).shortName})`}</p>\r\n            </div>\r\n            <div className={'MatchDetail-team1-score-container'}>\r\n              <p>0</p>\r\n            </div>\r\n          </div >\r\n          <div\r\n            className=\"MatchDetail-teams-middle-container\"\r\n          >\r\n            <p className={'MatchDetail-teams-middle-text'}>VS</p>\r\n          </div >\r\n          <div\r\n            className=\"MatchDetail-team2-container\"\r\n          >\r\n            <div className={'MatchDetail-team2-name-container'}>\r\n              <p>{`${((this.props.info.team2 as IParams).team as IParams).fullName} (${((this.props.info.team2 as IParams).team as IParams).shortName})`}</p>\r\n            </div>\r\n            <div className={'MatchDetail-team2-score-container'}>\r\n              <p>0</p>\r\n            </div>\r\n          </div >\r\n        </div >\r\n        <div\r\n          className=\"MatchDetail-info-container\"\r\n        >\r\n          <p>Địa điểm: {this.props.info.location}</p>\r\n          <p>Thời gian: {this.props.info.time}</p>\r\n        </div >\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(MatchDetail);","import * as React from 'react';\r\n// import ReduxBlockUi from 'react-block-ui/redux';\r\nimport { AutoSizer, MultiGrid, Size, Index, ScrollParams, GridCellProps } from 'react-virtualized';\r\nimport './styles.css';\r\nimport { IParams } from 'interfaces/common';\r\n\r\nconst STYLE = {\r\n  // backgroundColor: 'red',\r\n};\r\n// const STYLE_BOTTOM_LEFT_GRID = {\r\n//   borderRight: '2px solid #d0e9fa',\r\n// };\r\n\r\n// const STYLE_BOTTOM_LEFT_GRID_KBSV = {\r\n//   borderRight: '2px solid rgb(219, 199, 174)',\r\n//   backgroundColor: 'white',\r\n// };\r\n\r\n// const STYLE_BOTTOM_LEFT_GRID_BOARD_MODE = {\r\n//   borderRight: '2px solid #565c61',\r\n//   backgroundColor: '#38444F',\r\n// };\r\n\r\n// const STYLE_BOTTOM_LEFT_GRID_BOARD_MODE_KBSV = {\r\n//   borderRight: '2px solid #565c61',\r\n//   backgroundColor: '#282624',\r\n// };\r\n// const STYLE_BOTTOM_RIGHT_GRID = {\r\n//   backgroundColor: 'white',\r\n// };\r\n// const STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE = {\r\n//   backgroundColor: '#38444F',\r\n// };\r\n\r\n// const STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE_KBSV = {\r\n//   backgroundColor: '#282624',\r\n// };\r\n// const STYLE_TOP_LEFT_GRID = {\r\n//   borderBottom: '1px solid rgba(128,128,128,0.27)',\r\n//   borderRight: '2px solid #d0e9fa',\r\n//   backgroundColor: '#ededed',\r\n// };\r\n\r\n// const STYLE_TOP_LEFT_GRID_KBSV = {\r\n//   borderBottom: '1px solid rgba(128,128,128,0.27)',\r\n//   borderRight: '2px solid rgb(219, 199, 174)',\r\n//   backgroundColor: 'rgba(250, 193, 28, 0.2)',\r\n// };\r\n\r\n// const STYLE_TOP_LEFT_GRID_BOARD_MODE = {\r\n//   borderBottom: '1px solid #818181',\r\n//   borderRight: '2px solid #565c61',\r\n//   backgroundColor: '#ededed',\r\n// };\r\n\r\n// const STYLE_TOP_LEFT_GRID_BOARD_MODE_KBSV = {\r\n//   borderBottom: '1px solid #818181',\r\n//   borderRight: '2px solid #565c61',\r\n//   backgroundColor: '#282624',\r\n// };\r\n\r\n// const STYLE_TOP_RIGHT_GRID = {\r\n//   borderBottom: '1px solid rgba(128,128,128,0.27)',\r\n//   backgroundColor: 'rgba(241, 243, 246, 1)',\r\n// };\r\n\r\n// const STYLE_TOP_RIGHT_GRID_KBSV = {\r\n//   borderBottom: '1px solid rgba(128,128,128,0.27)',\r\n//   backgroundColor: 'rgb(250, 193, 28, .1)',\r\n// };\r\n\r\n// const STYLE_TOP_RIGHT_GRID_BOARD_MODE = {\r\n//   borderBottom: '1px solid #818181',\r\n//   backgroundColor: 'rgba(241, 243, 246, 1)',\r\n// };\r\n\r\n// const STYLE_TOP_RIGHT_GRID_BOARD_MODE_KBSV = {\r\n//   borderBottom: '1px solid #818181',\r\n//   backgroundColor: '#282624',\r\n// };\r\n\r\ninterface ISheetDataColumn {\r\n  label: string | React.ReactElement;\r\n  width: number;\r\n  style?: React.CSSProperties;\r\n  element(rowData: IParams, index: number, style?: React.CSSProperties): React.ReactNode;\r\n}\r\n\r\nexport interface ISheetDataConfig {\r\n  fetchCount: number;\r\n  fixedColumnCount: number;\r\n  fixedRowCount: number;\r\n  rowHeight: number;\r\n  hideHeader?: boolean;\r\n  header: ISheetDataColumn[];\r\n  headerStyle?: React.CSSProperties;\r\n  totalWidth?: number;\r\n  totalFixedWidth?: number;\r\n}\r\n\r\ninterface ISheetDataProps extends React.ClassAttributes<SheetData> {\r\n  data?: IParams[] | null;\r\n  singleData?: IParams | null;\r\n  config: ISheetDataConfig;\r\n  isRowClickable?: boolean;\r\n  boardMode?: boolean;\r\n  isShowOrderHistory?: boolean;\r\n  isPlusRow?: boolean;\r\n  isTotalRow?: boolean;\r\n  blockAction?: string[];\r\n  unBlockAction?: string[];\r\n  haveTotalRow?: boolean;\r\n\r\n  onClickRow?(rowData: IParams): void;\r\n  sheetDataRef?(ref: SheetData): void;\r\n  requestLoadMore?(): void;\r\n}\r\n\r\ninterface ISheetDataState {\r\n  hoveredRowIndex?: number | null;\r\n  hoveredColumnIndex?: number | null;\r\n  onClickRowIndex?: number | null;\r\n}\r\n\r\nexport class SheetData extends React.Component<ISheetDataProps, ISheetDataState> {\r\n  static defaultProps = {\r\n    isRowClickable: true,\r\n    boardMode: false,\r\n    isTotalRow: false,\r\n    haveTotalRow: false,\r\n  };\r\n\r\n  private list: IParams[] = [{}];\r\n  private lock = false;\r\n  // private virtualList: MultiGrid;\r\n  private config: ISheetDataConfig;\r\n  private loadMore = true;\r\n\r\n  constructor(props: ISheetDataProps) {\r\n    super(props);\r\n    this.state = {};\r\n    this.config = JSON.parse(JSON.stringify(this.props.config));\r\n    this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n    this.config.totalFixedWidth = this.config.header.reduce(\r\n      (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n      0\r\n    );\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.data != null) {\r\n      this.processData();\r\n    }\r\n    // if (this.props.singleData != null) {\r\n    //   this.processSingleData();\r\n    // }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps: ISheetDataProps) {\r\n    if (this.props.config !== nextProps.config) {\r\n      this.config = JSON.parse(JSON.stringify(nextProps.config));\r\n      this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      this.config.totalFixedWidth = this.config.header.reduce(\r\n        (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n        0\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ISheetDataProps) {\r\n    // if (this.props.data !== prevProps.data) {\r\n    //   this.processData();\r\n    // } else if (this.props.data != null) {\r\n    // if (this.virtualList != null && this.virtualList.recomputeGridSize != null) {\r\n    //   this.virtualList.recomputeGridSize();\r\n    // }\r\n    // }\r\n  }\r\n\r\n  // private processSingleData = () => {\r\n  //   const { config, singleData } = this.props;\r\n\r\n  //   if (singleData == null) {\r\n  //     this.list = [{}];\r\n  //   } else {\r\n  //     if (singleData) {\r\n  //       this.list = [];\r\n  //       if (config.hideHeader !== true) {\r\n  //         this.list.push({});\r\n  //       }\r\n  //       this.list = this.list.concat([singleData]);\r\n  //     } else {\r\n  //       this.list = [];\r\n  //       if (config.hideHeader !== true) {\r\n  //         this.list.push({});\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  private processData = () => {\r\n    const { data } = this.props;\r\n\r\n    if (data == null) {\r\n      this.loadMore = true;\r\n      this.list = [{}];\r\n    } else {\r\n      this.list = [{}, ...data];\r\n    }\r\n  };\r\n\r\n  private getColumnWidth = ({ index }: Index) => {\r\n    return this.config.header[index].width;\r\n  };\r\n\r\n  private getRowHeight = ({ index }: Index) => {\r\n    if (index === 0) {\r\n      return 40;\r\n    } else {\r\n      return this.config.rowHeight;\r\n    }\r\n  };\r\n\r\n  private onScroll = ({\r\n    clientHeight,\r\n    clientWidth,\r\n    scrollHeight,\r\n    scrollLeft,\r\n    scrollTop,\r\n    scrollWidth,\r\n  }: ScrollParams) => {\r\n    if (clientHeight !== undefined && scrollTop !== undefined && scrollHeight !== undefined) {\r\n      if ((scrollTop + clientHeight) / scrollHeight > 0.8 && this.lock === false) {\r\n        if (this.props.requestLoadMore && this.loadMore && this.props.data != null) {\r\n          this.props.requestLoadMore();\r\n          this.lock = true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private cellRenderer = ({ columnIndex, key, rowIndex, style }: GridCellProps) => {\r\n    const { config, haveTotalRow } = this.props;\r\n    const properties = config.header[columnIndex];\r\n    const rowData = this.list[rowIndex];\r\n\r\n    if (rowData) {\r\n      if (rowIndex === 0 && config.hideHeader !== true) {\r\n        return (\r\n          <div key={key} style={style}>\r\n            <div\r\n              className={`SheetData-Column1 ${columnIndex === config.fixedColumnCount - 1 && 'SheetData-last-fixed-column'}`}\r\n              style={{ ...properties.style, ...config.headerStyle }}\r\n            >\r\n              {properties.label}\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        // return null;\r\n        // if (haveTotalRow !== true) {\r\n        if (columnIndex <= config.header.length) {\r\n          return (\r\n            <div\r\n              key={key}\r\n              style={style}\r\n              onMouseOver={() => {\r\n                this.setState({\r\n                  hoveredColumnIndex: columnIndex,\r\n                  hoveredRowIndex: rowIndex,\r\n                });\r\n                // this.virtualList.forceUpdate();\r\n              }}\r\n              // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \r\n              //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \r\n              //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\r\n              //   ${this.props.isShowOrderHistory && rowIndex === this.state.onClickRowIndex && sheetStyle.OnClickItem}\r\n              //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \r\n              //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\r\n              //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\r\n              //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n              {...(this.props.isRowClickable === true ? { onClick: this.onClickRow(rowData, rowIndex) } : null)}\r\n            >\r\n              <div\r\n                className={`SheetData-Column2 ${columnIndex === config.fixedColumnCount - 1 ? 'SheetData-last-fixed-column' : 'SheetData-notLast-fixed-column'} ${rowIndex % 2 !== 0 ? 'SheetData-Row1' : 'SheetData-Row2'}`}\r\n              >\r\n                {properties.element(rowData, rowIndex, properties.style)}\r\n              </div>\r\n            </div>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n        // } else {\r\n        //   if (rowIndex < this.list.length - 1) {\r\n        //     if (columnIndex <= config.header.length) {\r\n        //       return (\r\n        //         <div\r\n        //           key={key}\r\n        //           style={style}\r\n        //           onMouseOver={() => {\r\n        //             this.setState({\r\n        //               hoveredColumnIndex: columnIndex,\r\n        //               hoveredRowIndex: rowIndex,\r\n        //             });\r\n        //             // this.virtualList.forceUpdate();\r\n        //           }}\r\n        //           // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \r\n        //           //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \r\n        //           //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\r\n        //           //   ${this.props.isShowOrderHistory &&\r\n        //           //   rowIndex === this.state.onClickRowIndex &&\r\n        //           //   sheetStyle.OnClickItem}\r\n        //           //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \r\n        //           //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\r\n        //           //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\r\n        //           //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n        //           {...(this.props.isRowClickable === true ? { onClick: this.onClickRow(rowData, rowIndex) } : null)}\r\n        //         >\r\n        //           {properties.element(rowData, rowIndex, properties.style)}\r\n        //         </div>\r\n        //       );\r\n        //     } else {\r\n        //       return null;\r\n        //     }\r\n        //   } else {\r\n        //     return (\r\n        //       <div key={key} style={style}>\r\n        //         <div\r\n        //           // className={`${sheetStyle.ColumnLastKBSV} ${\r\n        //           //   this.props.boardMode === true ? sheetStyle.BlackColumn : ''\r\n        //           //   } ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n        //           style={{ ...properties.style, ...config.headerStyle }}\r\n        //         >\r\n        //           {properties.element(rowData, -1, properties.style)}\r\n        //         </div>\r\n        //       </div>\r\n        //     );\r\n        //   }\r\n        // }\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  private onClickRow = (rowData: IParams, rowIndex?: number) => () => {\r\n    if (this.props.onClickRow != null) {\r\n      this.props.onClickRow(rowData);\r\n    }\r\n    if (this.props.isShowOrderHistory === true) {\r\n      this.setState({\r\n        onClickRowIndex: rowIndex,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { config } = this.props;\r\n    // const domain = store.getState().config.domain === 'kbsv';\r\n\r\n    const SheetDataForm = (\r\n      // <AutoSizer>\r\n      //   {({ width, height }: Size) => {\r\n      //     const totalWidth = config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      //     if (width - 6 > totalWidth) {\r\n      //       //6px is Scrollbar width\r\n\r\n      //       for (let i = 0; i < this.config.header.length; i++) {\r\n      //         if (i >= config.fixedColumnCount) {\r\n      //           this.config.header[i].width = Math.floor(\r\n      //             (config.header[i].width / (this.config.totalWidth! - this.config.totalFixedWidth!)) *\r\n      //             (width - this.config.totalFixedWidth! - 6)\r\n      //           );\r\n      //         }\r\n      //       }\r\n      //     } else {\r\n      //       this.config = JSON.parse(JSON.stringify(this.props.config));\r\n      //       this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      //       this.config.totalFixedWidth = this.config.header.reduce(\r\n      //         (a: number, b: ISheetDataColumn, index: number) =>\r\n      //           a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n      //         0\r\n      //       );\r\n      //     }\r\n\r\n      // return (\r\n      <MultiGrid\r\n        // ref={(ref: MultiGrid) => (this.virtualList = ref)}\r\n        fixedColumnCount={config.fixedColumnCount}\r\n        fixedRowCount={config.fixedRowCount}\r\n        cellRenderer={this.cellRenderer}\r\n        columnWidth={this.getColumnWidth}\r\n        columnCount={config.header.length}\r\n        enableFixedColumnScroll={false}\r\n        enableFixedRowScroll={false}\r\n        rowHeight={this.getRowHeight}\r\n        rowCount={1}\r\n        // rowCount={this.list.length}\r\n        style={STYLE}\r\n        // styleBottomLeftGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_BOTTOM_LEFT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_BOTTOM_LEFT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_BOTTOM_LEFT_GRID_KBSV\r\n        //       : STYLE_BOTTOM_LEFT_GRID\r\n        // }\r\n        // styleTopLeftGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_TOP_LEFT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_TOP_LEFT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_TOP_LEFT_GRID_KBSV\r\n        //       : STYLE_TOP_LEFT_GRID\r\n        // }\r\n        // styleTopRightGrid={\r\n        //   this.props.boardMode\r\n        //     ? domain\r\n        //       ? STYLE_TOP_RIGHT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_TOP_RIGHT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_TOP_RIGHT_GRID_KBSV\r\n        //       : STYLE_TOP_RIGHT_GRID\r\n        // }\r\n        // styleBottomRightGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE\r\n        //     : STYLE_BOTTOM_RIGHT_GRID\r\n        // }\r\n        width={200}\r\n        height={200}\r\n      // hideTopRightGridScrollbar={true}\r\n      // hideBottomLeftGridScrollbar={true}\r\n      // onScroll={this.onScroll}\r\n      />\r\n      // );\r\n      //   }}\r\n      // </AutoSizer>\r\n    );\r\n\r\n    if (this.list.length > 0) {\r\n      // if (store.getState().config.domain !== 'kbsv') {\r\n      //   return (\r\n      //     <div\r\n      //       // className={sheetStyle.SheetData}\r\n      //       onMouseOut={() => {\r\n      //         this.setState({\r\n      //           hoveredColumnIndex: null,\r\n      //           hoveredRowIndex: null,\r\n      //         });\r\n      //         this.virtualList.forceUpdate();\r\n      //       }}\r\n      //     >\r\n      //       {SheetDataForm}\r\n      //     </div>\r\n      //   );\r\n      // } else {\r\n      return (\r\n        // <ReduxBlockUi\r\n        //   tag=\"div\"\r\n        //   className={'SheetData'}\r\n        //   block={this.props.blockAction}\r\n        //   unblock={this.props.unBlockAction}\r\n        //   onMouseOut={() => {\r\n        //     this.setState({\r\n        //       hoveredColumnIndex: null,\r\n        //       hoveredRowIndex: null,\r\n        //     });\r\n        //     // this.virtualList.forceUpdate();\r\n        //   }}\r\n        // >\r\n        // { SheetDataForm }\r\n        <AutoSizer>\r\n          {({ height, width }) => (\r\n            <MultiGrid\r\n              width={width}\r\n              height={height}\r\n              rowCount={this.list.length}\r\n              rowHeight={this.getRowHeight}\r\n              columnCount={config.header.length}\r\n              columnWidth={this.getColumnWidth}\r\n              cellRenderer={this.cellRenderer}\r\n              fixedColumnCount={config.fixedColumnCount}\r\n              fixedRowCount={config.fixedRowCount}\r\n              enableFixedColumnScroll={false}\r\n              enableFixedRowScroll={false}\r\n              hideTopRightGridScrollbar={true}\r\n              hideBottomLeftGridScrollbar={true}\r\n              style={{ display: 'flex', flexDirection: 'column' }}\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n        // <AutoSizer>\r\n        //   {({ height, width }: Size) => {\r\n        //     return (\r\n        //       <MultiGrid\r\n        //         width={700}\r\n        //         height={250}\r\n        //         rowCount={this.list.length}\r\n        //         rowHeight={this.getRowHeight}\r\n        //         columnCount={config.header.length}\r\n        //         columnWidth={this.getColumnWidth}\r\n        //         cellRenderer={this.cellRenderer}\r\n        //         fixedColumnCount={config.fixedColumnCount}\r\n        //         fixedRowCount={config.fixedRowCount}\r\n        //         enableFixedColumnScroll={false}\r\n        //         enableFixedRowScroll={false}\r\n        //         hideTopRightGridScrollbar={true}\r\n        //         hideBottomLeftGridScrollbar={true}\r\n        //         style={{ display: 'flex' }}\r\n        //       />\r\n        //     );\r\n        //   }}\r\n        // </AutoSizer>,\r\n        // </ReduxBlockUi>\r\n      );\r\n    }\r\n    // }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SheetData;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SheetData, { ISheetDataConfig } from 'components/SheetData';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport { getMatchResult } from 'components/BracketMatch/actions';\r\nimport './styles.css';\r\n\r\ninterface IMatchSettingProps extends React.ClassAttributes<MatchSetting> {\r\n  teamsInfo: IParams[];\r\n  info: IParams;\r\n\r\n  getMatchResult(params: IBigRequest): void;\r\n}\r\n\r\ninterface IMatchSettingState {\r\n  configSheetData: ISheetDataConfig;\r\n  winner: boolean | null;\r\n}\r\n\r\nclass MatchSetting extends React.Component<IMatchSettingProps, IMatchSettingState> {\r\n  constructor(props: IMatchSettingProps) {\r\n    super(props);\r\n    this.state = {\r\n      winner: null,\r\n      configSheetData: {\r\n        fixedColumnCount: 3,\r\n        fixedRowCount: 1,\r\n        rowHeight: 80,\r\n        fetchCount: 2,\r\n        header: [\r\n          {\r\n            label: 'Thứ tự',\r\n            width: 70,\r\n            style: { justifyContent: 'center' },\r\n            element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n              <div style={style}>{rowIndex}</div>\r\n            ),\r\n          },\r\n          {\r\n            label: 'Tên đội',\r\n            width: 140,\r\n            style: { justifyContent: 'center' },\r\n            element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n              <div style={style}>{rowData.team ? (rowData.team as IParams).shortName : ''}</div>\r\n            ),\r\n          },\r\n          {\r\n            label: 'Kết quả chung cuộc',\r\n            width: 150,\r\n            style: { justifyContent: 'center' },\r\n            element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n              <div style={style}>{rowData.score}</div>\r\n            ),\r\n          },\r\n          {\r\n            label: 'Set',\r\n            width: 100,\r\n            style: { justifyContent: 'center' },\r\n            element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n              <div style={style}>{rowData.score}</div>\r\n            ),\r\n          },\r\n          // {\r\n          //   label: 'Kết quả chung cuộc',\r\n          //   width: 190,\r\n          //   style: { justifyContent: 'center' },\r\n          //   element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n          //     <div style={style}>{rowData.stockCode}</div>\r\n          //   ),\r\n          // },\r\n          // {\r\n          //   label: 'Kết quả chung cuộc',\r\n          //   width: 190,\r\n          //   style: { justifyContent: 'center' },\r\n          //   element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n          //     <div style={style}>{rowData.stockCode}</div>\r\n          //   ),\r\n          // },\r\n          // {\r\n          //   label: 'Kết quả chung cuộc',\r\n          //   width: 190,\r\n          //   style: { justifyContent: 'center' },\r\n          //   element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n          //     <div style={style}>{rowData.stockCode}</div>\r\n          //   ),\r\n          // },\r\n          // {\r\n          //   label: '',\r\n          //   width: 90,\r\n          //   style: { justifyContent: 'center' },\r\n          //   element: (rowData: IParams, rowIndex: number, cellStyle?: React.CSSProperties) =>\r\n          //     this.props.isShowOrderHistory !== true && (\r\n          //       <div\r\n          //         style={cellStyle}\r\n          //         className={style.ButtonCancel}\r\n          //         onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n          //           e.stopPropagation();\r\n\r\n          //           this.onClickCell({\r\n          //             action: 'cancel',\r\n          //             data: rowData,\r\n          //             index: rowIndex,\r\n          //           });\r\n          //         }}\r\n          //       >\r\n          //         {this.props.t('Cancel')}\r\n          //       </div>\r\n          //     ),\r\n          // },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  private onAddASet = () => {\r\n    this.setState({\r\n      configSheetData: {\r\n        ...this.state.configSheetData,\r\n        header: [\r\n          ...this.state.configSheetData.header,\r\n          {\r\n            label: 'Set',\r\n            width: 100,\r\n            style: { justifyContent: 'center' },\r\n            element: (rowData: IParams, rowIndex: number, style?: React.CSSProperties) => (\r\n              <div style={style}>{rowData.score}</div>\r\n            ),\r\n          }]\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        matchId: this.props.info.id,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.getMatchResult(params);\r\n  }\r\n\r\n  private onRemoveASet = () => {\r\n    this.setState({\r\n      configSheetData: {\r\n        ...this.state.configSheetData,\r\n        header: [\r\n          ...this.state.configSheetData.header.slice(0, this.state.configSheetData.header.length - 1),\r\n        ],\r\n      }\r\n    });\r\n  }\r\n\r\n  private team1Win = () => {\r\n    if (this.state.winner === true) {\r\n      this.setState({\r\n        winner: null,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        winner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  private team2Win = () => {\r\n    if (this.state.winner === false) {\r\n      this.setState({\r\n        winner: null,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        winner: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"MatchSetting-container\"\r\n      >\r\n        <div className=\"MatchSetting-set-container\">\r\n          <p className=\"MatchSetting-set-text\" onClick={this.onAddASet}>Thêm 1 set</p>\r\n          {this.state.configSheetData.header.length > 3 && <p className=\"MatchSetting-set-text\" onClick={this.onRemoveASet}>Bớt 1 set</p>}\r\n        </div>\r\n        <div className=\"MatchSetting-sheetData-container\">\r\n          <SheetData config={this.state.configSheetData} data={this.props.teamsInfo as IParams[]} />\r\n        </div>\r\n        <div className=\"MatchSetting-verify-winner-container\">\r\n          <p className=\"MatchSetting-verify-winner-header\">Xác định người thắng cuộc</p>\r\n          <div className=\"MatchSetting-verify-winner-text-container-container\">\r\n            <div className={`MatchSetting-verify-winner-text-container ${this.state.winner === true ? 'MatchSetting-verify-winner-isWinner' : ''}`} onClick={this.team1Win}>\r\n              <p className=\"MatchSetting-verify-winner-text noselect\">{(this.props.teamsInfo[0].team as IParams).shortName}</p>\r\n            </div>\r\n            <div className={`MatchSetting-verify-winner-text-container ${this.state.winner === false ? 'MatchSetting-verify-winner-isWinner' : ''}`} onClick={this.team2Win}>\r\n              <p className=\"MatchSetting-verify-winner-text noselect\">{(this.props.teamsInfo[1].team as IParams).shortName}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getMatchResult, }\r\n)(MatchSetting);","import { IBigRequest } from \"interfaces/common\";\r\nimport { GET_MATCH_RESULT } from \"redux-saga/actions\";\r\nimport { GET_MATCH_RESULT_SUCCESS, GET_MATCH_RESULT_FAILED } from \"./reducers\";\r\n\r\nexport const getMatchResult = (data: IBigRequest) => ({\r\n  type: GET_MATCH_RESULT,\r\n  response: {\r\n    success: GET_MATCH_RESULT_SUCCESS,\r\n    failed: GET_MATCH_RESULT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Styles } from 'react-modal';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport { MdSettings } from 'react-icons/md';\r\nimport BracketTeam from 'components/BracketTeam';\r\nimport CustomModal from 'components/CustomModal';\r\nimport CustomTab from 'components/CustomTab';\r\nimport MatchDetail from 'components/MatchDetail';\r\nimport MatchSetting from 'components/MatchSetting';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport { MATCH_CONTAINER_HEIGHT, PADDING_TOP } from 'global';\r\nimport './styles.css';\r\n\r\ninterface IBracketMatchProps extends React.ClassAttributes<BracketMatch> {\r\n  bracketStartedStatus?: boolean;\r\n  info: IParams;\r\n  totalRound: number;\r\n  lowerBracket?: boolean;\r\n  competitionId: number;\r\n  roundRobin?: boolean;\r\n}\r\n\r\ninterface IBracketMatchState {\r\n  iconVisible: boolean;\r\n  selectedIndexInTab: number\r\n  showModal: boolean;\r\n}\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '15%',\r\n    left: '25%',\r\n    right: '25%',\r\n    bottom: '15%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nclass BracketMatch extends React.Component<IBracketMatchProps, IBracketMatchState> {\r\n  constructor(props: IBracketMatchProps) {\r\n    super(props);\r\n    this.state = {\r\n      iconVisible: false,\r\n      showModal: false,\r\n      selectedIndexInTab: 0,\r\n    };\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    this.setState({\r\n      showModal: false,\r\n      selectedIndexInTab: 0,\r\n    });\r\n  }\r\n\r\n  private handleOpenModal = (index: number) => {\r\n    this.setState({\r\n      showModal: true,\r\n      selectedIndexInTab: index,\r\n    });\r\n  }\r\n\r\n  private handleConfirmModal = () => {\r\n  }\r\n\r\n  render() {\r\n    // let amountOfListTeamDisplayed = 0;\r\n    // for (let i = 0; i < this.props.info.listTeam.length; i++) {\r\n    //   if (this.props.info.listTeam[i].teamInfo != null && this.props.info.listTeam[i].teamInfo!.id) {\r\n    //     amountOfListTeamDisplayed++;\r\n    //   }\r\n    // }\r\n    let listTeam: IParams[] = [];\r\n    listTeam.push((this.props.info.data as IParams).team1 as IParams);\r\n    listTeam.push((this.props.info.data as IParams).team2 as IParams);\r\n    const tabList = ['Thông tin trận đấu', 'Điểm số'];\r\n    const tabComponentList = [<MatchDetail info={this.props.info.data as IParams} />, <MatchSetting teamsInfo={listTeam} info={this.props.info.data as IParams} />];\r\n    // if (this.props.info.listTeam.length === amountOfListTeamDisplayed && this.props.bracketStartedStatus === true) {\r\n    //   tabComponentList.push(<MatchResult teamsInfo={this.props.info.listTeam}/>);\r\n    //   tabList.push('Match Result');\r\n    // }\r\n    if (this.props.roundRobin === true) {\r\n      return (\r\n        <div\r\n          className=\"BracketMatch-container\"\r\n          style={{ height: '60px', marginLeft: '15px', marginRight: '20px' }}\r\n        >\r\n          {this.props.info.id !== -1 &&\r\n            <div className=\"BracketMatch-numericalOrder-container\">\r\n              <p className=\"BracketMatch-numericalOrder-text\">{this.props.info.name}</p>\r\n            </div>\r\n          }\r\n          {this.props.info.id !== -1 && <div className=\"BracketMatch-info-container\">\r\n            <p className={'BracketMatch-info-text No-margin-bottom'}>{this.props.info.time}</p>\r\n            <div className=\"BracketMatch-teams-container\" onMouseOver={() => { this.setState({ iconVisible: true, }); }} onMouseOut={() => { this.setState({ iconVisible: false, }); }}>\r\n              <div className=\"BracketMatch-team-container\">\r\n                <BracketTeam competitionId={this.props.competitionId} info={this.props.info.team1 != null ? (this.props.info.team1 as IParams).team as IParams : null} description={this.props.info.team1 != null ? (this.props.info.team1 as IParams).description as IParams : null} borderBottom={true} />\r\n                <BracketTeam competitionId={this.props.competitionId} info={this.props.info.team2 != null ? (this.props.info.team2 as IParams).team as IParams : null} description={this.props.info.team2 != null ? (this.props.info.team2 as IParams).description as IParams : null} />\r\n              </div>\r\n              <div className=\"BracketMatch-matchSetting-container\">\r\n                <div className={`BracketMatch-afterMatch-icon-container ${this.state.iconVisible === true && 'BracketMatch-afterMatch-icon-container-background'}`} onClick={() => this.handleOpenModal(0)}>\r\n                  <MdSettings className={`BracketMatch-afterMatch-icon-setting ${this.state.iconVisible === true ? 'BracketMatch-afterMatch-icon-visible' : 'BracketMatch-afterMatch-icon-invisible'}`} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <p className={'BracketMatch-info-text No-margin-top'}>{this.props.info.location}</p>\r\n          </div>}\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}>\r\n            {/* <CustomTab tabList={tabList} componentList={tabComponentList} selectedIndex={this.state.selectedIndexInTab} /> */}\r\n          </CustomModal>\r\n        </div>\r\n      );\r\n    } else if (this.props.lowerBracket !== true) {\r\n      return (\r\n        <div\r\n          className=\"BracketMatch-container\"\r\n          style={{ height: `${(MATCH_CONTAINER_HEIGHT / 2) * (2 ** ((this.props.info.data as unknown as IParams).roundNo as number))}px` }}\r\n        >\r\n          {((this.props.info.data as unknown as IParams).roundNo as number) > 1 &&\r\n            <div\r\n              className=\"BracketMatch-preMatch-connector\"\r\n              style={{ height: `${(MATCH_CONTAINER_HEIGHT / 4) * (2 ** ((this.props.info.data as unknown as IParams).roundNo as number))}px` }}\r\n            >\r\n              {/* height=số đội trong 1 match * 25px / 2 + 2 */}\r\n              <div className={`${this.props.info.left != null && (this.props.info.left as unknown as IParams).id !== -1 && 'BracketMatch-preMatch-connector-border1'} ${((this.props.info.left != null && (this.props.info.left as unknown as IParams).id !== -1) || (this.props.info.right != null && (this.props.info.right as unknown as IParams).id !== -1)) && 'BracketMatch-preMatch-connector-borderrr'} BracketMatch-preMatch-connector-borderr`}></div>\r\n              <div className={`${this.props.info.right != null && (this.props.info.right as unknown as IParams).id !== -1 && 'BracketMatch-preMatch-connector-border2-border'} BracketMatch-preMatch-connector-border2`}></div>\r\n            </div>}\r\n          {this.props.info.id !== -1 &&\r\n            <div className=\"BracketMatch-numericalOrder-container\">\r\n              <p className=\"BracketMatch-numericalOrder-text\">{(this.props.info.data as unknown as IParams).name}</p>\r\n            </div>\r\n          }\r\n          {this.props.info.id !== -1 &&\r\n            <div className=\"BracketMatch-info-container\">\r\n              <p className={'BracketMatch-info-text No-margin-bottom'}>{this.props.info.time}</p>\r\n              <div className=\"BracketMatch-teams-container\" onMouseOver={() => { this.setState({ iconVisible: true, }); }} onMouseOut={() => { this.setState({ iconVisible: false, }); }}>\r\n                <div className=\"BracketMatch-team-container\">\r\n                  <BracketTeam\r\n                    competitionId={this.props.competitionId}\r\n                    info={(this.props.info.data as unknown as IParams).team1 != null ? ((this.props.info.data as IParams).team1 as IParams).team as IParams : null}\r\n                    description={(this.props.info.data as unknown as IParams).team1 != null ? ((this.props.info.data as unknown as IParams).team1 as unknown as IParams).description as IParams : null}\r\n                    borderBottom={true}\r\n                  />\r\n                  <BracketTeam\r\n                    competitionId={this.props.competitionId}\r\n                    info={(this.props.info.data as IParams).team2 != null ? ((this.props.info.data as IParams).team2 as unknown as IParams).team as IParams : null}\r\n                    description={(this.props.info.data as IParams).team2 != null ? ((this.props.info.data as unknown as IParams).team2 as IParams).description as IParams : null}\r\n                  />\r\n                </div>\r\n                <div className=\"BracketMatch-matchSetting-container\">\r\n                  <div className={`BracketMatch-afterMatch-icon-container ${this.state.iconVisible === true && 'BracketMatch-afterMatch-icon-container-background'}`} onClick={() => this.handleOpenModal(0)}>\r\n                    <MdSettings className={`BracketMatch-afterMatch-icon-setting ${this.state.iconVisible === true ? 'BracketMatch-afterMatch-icon-visible' : 'BracketMatch-afterMatch-icon-invisible'}`} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p className={'BracketMatch-info-text No-margin-top'}>{this.props.info.location}</p>\r\n            </div>}\r\n          {\r\n            ((this.props.info.data as unknown as IParams).roundNo as number) < this.props.totalRound && this.props.info.id !== -1 && <div\r\n              // ((this.props.info.data as IParams).roundNo as number) nhỏ hơn tổng số round\r\n              className=\"BracketMatch-preMatch-connector\"\r\n              style={{ height: `${MATCH_CONTAINER_HEIGHT}px` }}\r\n            >\r\n              {/* height=số đội trong 1 match * 25px / 2 + 2 */}\r\n              <div className=\"BracketMatch-afterMatch-connector-border1\"></div>\r\n              <div className=\"BracketMatch-afterMatch-connector-border2\"></div>\r\n            </div>\r\n          }\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}>\r\n            <CustomTab tabList={tabList} componentList={tabComponentList} selectedIndex={0} />\r\n          </CustomModal>\r\n        </div>\r\n      );\r\n    } else {\r\n      const fakeId = this.props.info!.fakeId as number;\r\n      const fakeRoundNo = (this.props.totalRound % 2 === 0 ? ((this.props.info.data as unknown as IParams).roundNo as number) : (((this.props.info.data as unknown as IParams).roundNo as number) + 1));\r\n      const firstId = 2 ** (Math.floor((this.props.info!.degree as number) / 2));\r\n      const treeHeight = (2 ** (Math.floor((fakeRoundNo + 1) / 2))) * (41 + 10);\r\n      let firstLocation = (Math.floor(((2 ** ((Math.floor((fakeRoundNo + 1) / 2)) - 1)) * Math.floor((41 + 10))) / 2));\r\n      if ((this.props.info!.degree as number) % 2 === 0) {\r\n        firstLocation = 0;\r\n      }\r\n      firstLocation += Math.floor((41 + 10) / 2);\r\n      return (\r\n        <div\r\n          className=\"BracketMatch-container-lowerBracket\"\r\n          style={{\r\n            left: (((this.props.info.data as unknown as IParams).roundNo as number) - 1) === 0 ?\r\n              0 :\r\n              ((((this.props.info.data as unknown as IParams).roundNo as number) - 2) * 250) + 250,\r\n            marginTop: (fakeId - firstId) * treeHeight + firstLocation + PADDING_TOP,\r\n          }}\r\n        >\r\n          <div\r\n            className=\"BracketMatch-preMatch-connector\"\r\n          // style={{\r\n          //   height: `${(MATCH_CONTAINER_HEIGHT / 4) * (2 ** ((!((this.props.info.data as IParams).roundNo === this.props.totalRound && this.props.lowerBracket === true)) ? ((this.props.info.data as IParams).roundNo as number) : ((this.props.info.data as IParams).roundNo as number) - 1))}px`\r\n          // }}\r\n          >\r\n            {/* height=số đội trong 1 match * 25px / 2 + 2 */}\r\n            <div className={`${\r\n              (\r\n                !((this.props.info.data as unknown as IParams).roundNo === this.props.totalRound &&\r\n                  this.props.lowerBracket === true) &&\r\n                this.props.info.left != null &&\r\n                (this.props.info.left as unknown as IParams).id !== -1 &&\r\n                !(((this.props.info.left as unknown as IParams).data as unknown as IParams).name as string).includes('A')) &&\r\n              'BracketMatch-preMatch-connector-border1'} ${\r\n              ((\r\n                this.props.info.left != null &&\r\n                (this.props.info.left as unknown as IParams).id !== -1)) &&\r\n              ((this.props.info.data as unknown as IParams).roundNo as number) > 1 &&\r\n              'BracketMatch-preMatch-connector-borderrr'\r\n              } BracketMatch-preMatch-connector-borderr`\r\n            }></div>\r\n            <div className={`${\r\n              !((this.props.info.data as unknown as IParams).roundNo === this.props.totalRound &&\r\n                this.props.lowerBracket === true) &&\r\n              this.props.info.right != null &&\r\n              (this.props.info.right as unknown as IParams).id !== -1 &&\r\n              'BracketMatch-preMatch-connector-border2-border'} BracketMatch-preMatch-connector-border2`}></div>\r\n          </div>\r\n          {this.props.info.id !== -1 &&\r\n            <div className=\"BracketMatch-numericalOrder-container\">\r\n              <p className=\"BracketMatch-numericalOrder-text\">{(this.props.info.data as IParams).name}</p>\r\n            </div>\r\n          }\r\n          {this.props.info.id !== -1 && <div className=\"BracketMatch-info-container\">\r\n            <p className={'BracketMatch-info-text No-margin-bottom'}>{this.props.info.time}</p>\r\n            <div className=\"BracketMatch-teams-container\" onMouseOver={() => { this.setState({ iconVisible: true, }); }} onMouseOut={() => { this.setState({ iconVisible: false, }); }}>\r\n              <div className=\"BracketMatch-team-container\">\r\n                <BracketTeam competitionId={this.props.competitionId} info={(this.props.info.data as unknown as IParams).team1 as unknown as IParams} description={((this.props.info.data as unknown as IParams).team1 as unknown as IParams).description as unknown as IParams} borderBottom={true} />\r\n                <BracketTeam competitionId={this.props.competitionId} info={(this.props.info.data as unknown as IParams).team2 as unknown as IParams} description={((this.props.info.data as unknown as IParams).team2 as unknown as IParams).description as unknown as IParams} />\r\n              </div>\r\n              <div className=\"BracketMatch-matchSetting-container\">\r\n                <div className={`BracketMatch-afterMatch-icon-container ${this.state.iconVisible === true && 'BracketMatch-afterMatch-icon-container-background'}`} onClick={() => this.handleOpenModal(0)}>\r\n                  <MdSettings className={`BracketMatch-afterMatch-icon-setting ${this.state.iconVisible === true ? 'BracketMatch-afterMatch-icon-visible' : 'BracketMatch-afterMatch-icon-invisible'}`} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <p className={'BracketMatch-info-text No-margin-top'}>{this.props.info.location}</p>\r\n          </div>}\r\n          {\r\n            ((this.props.info.data as unknown as IParams).roundNo as number) < this.props.totalRound && this.props.info.id !== -1 && <div\r\n              // ((this.props.info.data as IParams).roundNo as number) nhỏ hơn tổng số round\r\n              className=\"BracketMatch-preMatch-connector\"\r\n              style={{ height: `${MATCH_CONTAINER_HEIGHT}px` }}\r\n            >\r\n              {/* height=số đội trong 1 match * 25px / 2 + 2 */}\r\n              <div className=\"BracketMatch-afterMatch-connector-border1\"></div>\r\n              <div className=\"BracketMatch-afterMatch-connector-border2\"></div>\r\n            </div>\r\n          }\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}>\r\n            {/* <CustomTab tabList={tabList} componentList={tabComponentList} selectedIndex={this.state.selectedIndexInTab} /> */}\r\n          </CustomModal>\r\n        </div >\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    bracketStartedStatus: state.bracketStartedStatus,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(BracketMatch);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BracketMatch from 'components/BracketMatch';\r\nimport { IParams } from 'interfaces/common';\r\nimport './styles.css';\r\n\r\ninterface IBracketRoundProps extends React.ClassAttributes<BracketRound> {\r\n  info: IParams;\r\n  roundNo: number;\r\n  totalRound: number;\r\n  index: number;\r\n  competitionId: number;\r\n  roundRobin?: boolean;\r\n}\r\n\r\ninterface IBracketRoundState {\r\n  roundHover: boolean;\r\n}\r\n\r\nclass BracketRound extends React.Component<IBracketRoundProps, IBracketRoundState> {\r\n  constructor(props: IBracketRoundProps) {\r\n    super(props);\r\n    this.state = {\r\n      roundHover: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.roundRobin === true) {\r\n      return (\r\n        <div className={`BracketRound-eachRound ${this.state.roundHover === true ? 'BracketRound-reachRound-bolder' : 'BracketRound-eachRound-noBold'}`} style={{ ...this.props.info.listLoseMatches != null && { width: '250px' } }}>\r\n          <div className={`BracketRound-title-round-container ${this.props.roundNo > 1 && 'BracketRound-title-round-container-border'}`} onMouseOver={() => { this.setState({ roundHover: true, }); }} onMouseOut={() => { this.setState({ roundHover: false, }); }}>\r\n            <p className=\"BracketRound-title-round-text\">{this.props.info.roundName}</p>\r\n          </div>\r\n          {this.props.info.listMatches != null &&\r\n            (this.props.info.listMatches as unknown as IParams[]).map((item, index) => {\r\n              return (\r\n                <BracketMatch\r\n                  competitionId={this.props.competitionId}\r\n                  info={item}\r\n                  key={index}\r\n                  totalRound={this.props.totalRound}\r\n                  roundRobin={true}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={`BracketRound-eachRound ${this.state.roundHover === true ? 'BracketRound-reachRound-bolder' : 'BracketRound-eachRound-noBold'}`} style={{ ...this.props.info.listLoseMatches != null && { width: '250px', height: '350px' } }}>\r\n          <div className={`BracketRound-title-round-container ${this.props.roundNo > 1 && 'BracketRound-title-round-container-border'}`} onMouseOver={() => { this.setState({ roundHover: true, }); }} onMouseOut={() => { this.setState({ roundHover: false, }); }}>\r\n            <p className=\"BracketRound-title-round-text\">{this.props.info.roundName}</p>\r\n          </div>\r\n          {this.props.info.listMatches != null ?\r\n            (this.props.info.listMatches as unknown as IParams[]).map((item, index) => {\r\n              return (<BracketMatch competitionId={this.props.competitionId} info={item} key={index} totalRound={this.props.totalRound} />);\r\n            }) : (this.props.info.listWinMatches != null ? (this.props.info.listWinMatches as unknown as IParams[]).map((item, index) => {\r\n              return (<BracketMatch competitionId={this.props.competitionId} info={item} key={index} totalRound={this.props.totalRound} />);\r\n            }) : (this.props.info.listLoseMatches as unknown as IParams[]).map((item, index) => {\r\n              return (<BracketMatch competitionId={this.props.competitionId} info={item} key={index} totalRound={this.props.totalRound} lowerBracket={true} />);\r\n            }))\r\n          }\r\n          {this.props.info.listLoseMatches != null && <svg style={{ position: 'absolute', marginTop: '20px', width: '1px', height: '350px', backgroundColor: 'red', }}>\r\n            <path d=\"M 228 1 L 236 1 L 236 108\"></path>\r\n          </svg>}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(BracketRound);","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_LIST_TEAM, ADD_A_TEAM_TO_COMPETITION } from \"redux-saga/actions\";\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED, ADD_A_TEAM_TO_COMPETITION_SUCCESS, ADD_A_TEAM_TO_COMPETITION_FAILED } from \"./reducers\";\r\n\r\nexport const queryListTeams = (data: IBigRequest) => ({\r\n  type: QUERY_LIST_TEAM,\r\n  response: {\r\n    success: QUERY_LIST_TEAM_SUCCESS,\r\n    failed: QUERY_LIST_TEAM_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const addATeamToCompetition = (data: IBigRequest) => ({\r\n  type: ADD_A_TEAM_TO_COMPETITION,\r\n  response: {\r\n    success: ADD_A_TEAM_TO_COMPETITION_SUCCESS,\r\n    failed: ADD_A_TEAM_TO_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import { IBigRequest } from \"interfaces/common\";\r\nimport { GET_BRACKET_BOARD_INFO, SET_BRACKET_STATUS } from \"redux-saga/actions\";\r\nimport { GET_BRACKET_BOARD_INFO_SUCCESS, GET_BRACKET_BOARD_INFO_FAILED } from \"./reducers\";\r\n\r\nexport const queryBracketBoardInfo = (data: IBigRequest) => ({\r\n  type: GET_BRACKET_BOARD_INFO,\r\n  response: {\r\n    success: GET_BRACKET_BOARD_INFO_SUCCESS,\r\n    failed: GET_BRACKET_BOARD_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const setBracketStartedStatus = (data: boolean) => ({\r\n  type: SET_BRACKET_STATUS,\r\n  payload: data,\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport BracketRound from 'components/BracketRound';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { queryListTeams } from 'components/Teams/actions';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED } from 'components/BracketTeam/reducers';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET } from 'redux-saga/actions';\r\nimport { queryBracketBoardInfo, setBracketStartedStatus } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IBracketBoardProps extends React.ClassAttributes<BracketBoard> {\r\n  bracketBoardInfo: IParams | null;\r\n  competitionId: number;\r\n  listTeam: IParams[] | null;\r\n  finalStage: boolean;\r\n\r\n  queryBracketBoardInfo(params: IBigRequest): void;\r\n  setBracketStartedStatus(params: boolean): void;\r\n  queryListTeams(params: IBigRequest): void;\r\n}\r\n\r\ninterface IBracketBoardState {\r\n}\r\n\r\nclass BracketBoard extends React.Component<IBracketBoardProps, IBracketBoardState> {\r\n\r\n  constructor(props: IBracketBoardProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IBracketBoardProps, nextState: IBracketBoardState) {\r\n    if (nextProps.bracketBoardInfo !== this.props.bracketBoardInfo) {\r\n      this.setState({});\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.competitionId,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryBracketBoardInfo(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.competitionId,\r\n        limit: 999,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryListTeams(params);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.bracketBoardInfo != null) {\r\n      if (this.props.finalStage === true) {\r\n        if ((this.props.bracketBoardInfo.finalStage as IParams).listRRRound != null) {\r\n          return (\r\n            <ReduxBlockUi\r\n              tag=\"div\"\r\n              block={SWAP_TWO_TEAM_IN_BRACKET}\r\n              unblock={[SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED]}\r\n            >\r\n              <div className=\"BracketBoard-container-container\">\r\n                <div className=\"BracketBoard-container\">\r\n                  {((this.props.bracketBoardInfo.finalStage as IParams).listRRRound as IParams[]).map((item, index) =>\r\n                    <BracketRound\r\n                      competitionId={this.props.competitionId}\r\n                      index={index}\r\n                      info={item}\r\n                      key={index}\r\n                      roundNo={index + 1}\r\n                      totalRound={((this.props.bracketBoardInfo!.finalStage as IParams).listRRRound as IParams[]).length}\r\n                      roundRobin={true}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </ReduxBlockUi>\r\n          );\r\n        } else {\r\n          return (\r\n            <ReduxBlockUi\r\n              tag=\"div\"\r\n              block={SWAP_TWO_TEAM_IN_BRACKET}\r\n              unblock={[SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED]}\r\n            >\r\n              <div className={'BracketBoard-text'}>\r\n                <p>Bạn có thể đổi chỗ các đội thi đấu bằng cách bấm vào 2 đội, Thay đổi này chỉ có thể thực hiện khi giải đấu chưa bắt đầu</p>\r\n              </div>\r\n              <div className=\"BracketBoard-container-container\">\r\n                <div className=\"BracketBoard-container\">\r\n                  {this.props.bracketBoardInfo == null || this.props.listTeam == null || this.props.bracketBoardInfo.finalStage == null\r\n                    ? <p>Chưa có thông tin!</p>\r\n                    : ((this.props.bracketBoardInfo.finalStage as IParams).listRound != null ? ((this.props.bracketBoardInfo.finalStage as IParams).listRound as unknown as IParams[]).map((item, index) =>\r\n                      (<BracketRound competitionId={this.props.competitionId} index={index} info={item} key={index} roundNo={index + 1} totalRound={((this.props.bracketBoardInfo!.finalStage as IParams).listRound! as unknown as IParams[]).length} />)) :\r\n                      ((this.props.bracketBoardInfo.finalStage as IParams).listWinRound as unknown as IParams[]).map((item, index) =>\r\n                        <BracketRound competitionId={this.props.competitionId} index={index} info={item} key={index} roundNo={index + 1} totalRound={((this.props.bracketBoardInfo!.finalStage as IParams).listWinRound! as unknown as IParams[]).length} />)\r\n                    )\r\n                  }\r\n                </div>\r\n                <div className=\"BracketBoard-container\">\r\n                  {this.props.bracketBoardInfo != null && this.props.bracketBoardInfo.finalStage && (this.props.bracketBoardInfo.finalStage as IParams).listLoseRound != null && ((this.props.bracketBoardInfo.finalStage as IParams).listLoseRound as unknown as IParams[]).map((item, index) =>\r\n                    <BracketRound competitionId={this.props.competitionId} index={index} info={item} key={index} roundNo={index + 1} totalRound={((this.props.bracketBoardInfo!.finalStage as IParams).listLoseRound! as unknown as IParams[]).length} />)}\r\n                </div>\r\n              </div>\r\n            </ReduxBlockUi>\r\n          );\r\n        }\r\n      } else {\r\n        if ((this.props.bracketBoardInfo.groupStage as IParams).listTableRR != null) {\r\n          return (\r\n            <ReduxBlockUi\r\n              tag=\"div\"\r\n              block={SWAP_TWO_TEAM_IN_BRACKET}\r\n              unblock={[SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED]}\r\n            >\r\n              <div className={'BracketBoard-text'}>\r\n                <p>Bạn có thể đổi chỗ các đội thi đấu bằng cách bấm vào 2 đội, Thay đổi này chỉ có thể thực hiện khi giải đấu chưa bắt đầu</p>\r\n              </div>\r\n              {((this.props.bracketBoardInfo.groupStage as IParams).listTableRR as IParams[]).map((item, index) =>\r\n                <div className=\"BracketBoard-container-container\" key={index}>\r\n                  <div className=\"BracketBoard-container\">\r\n                    <p>Bảng {item.tableName}</p>\r\n                  </div>\r\n                  <div className=\"BracketBoard-container\">\r\n                    {(item.listRRRound as IParams[]).length > 0 ? ((item.listRRRound as IParams[]).map((item2, index2) =>\r\n                      <BracketRound\r\n                        competitionId={this.props.competitionId}\r\n                        index={index2}\r\n                        info={item2}\r\n                        key={index2}\r\n                        roundNo={index2 + 1}\r\n                        totalRound={(item.listRRRound as IParams[]).length}\r\n                        roundRobin={true}\r\n                      />\r\n                    )) : <p>Không thể lập lịch cho bảng này!</p>}\r\n                  </div>\r\n                </div>)}\r\n            </ReduxBlockUi>\r\n          );\r\n        } else {\r\n          if (this.props.bracketBoardInfo.groupStage != null && this.props.listTeam != null) {\r\n            if ((this.props.bracketBoardInfo.groupStage as IParams).listTableSE != null) {\r\n              return (\r\n                <ReduxBlockUi\r\n                  tag=\"div\"\r\n                  block={SWAP_TWO_TEAM_IN_BRACKET}\r\n                  unblock={[SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED]}\r\n                >\r\n                  <div className={'BracketBoard-text'}>\r\n                    <p>Bạn có thể đổi chỗ các đội thi đấu bằng cách bấm vào 2 đội, Thay đổi này chỉ có thể thực hiện khi giải đấu chưa bắt đầu</p>\r\n                  </div>\r\n                  {((this.props.bracketBoardInfo.groupStage as IParams).listTableSE as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketBoard-container-container\" key={index}>\r\n                      <div className=\"BracketBoard-container\">\r\n                        <p>Bảng {item.tableName}</p>\r\n                      </div>\r\n                      <div className=\"BracketBoard-container\">\r\n                        {(item.listRound != null && (item.listRound as IParams[]).length > 0 ?\r\n                          (item.listRound as IParams[]).map((item2, index2) =>\r\n                            (<BracketRound competitionId={this.props.competitionId} index={index2} info={item2} key={index2} roundNo={index2 + 1} totalRound={(item.listRound as IParams[]).length} />)) :\r\n                          <p>Không thể lập lịch cho bảng này!</p>\r\n                        )\r\n                        }\r\n                      </div>\r\n                    </div>)}\r\n                </ReduxBlockUi>\r\n              );\r\n            } else if ((this.props.bracketBoardInfo.groupStage as IParams).listTableDE != null) {\r\n              return (\r\n                <ReduxBlockUi\r\n                  tag=\"div\"\r\n                  block={SWAP_TWO_TEAM_IN_BRACKET}\r\n                  unblock={[SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED]}\r\n                >\r\n                  <div className={'BracketBoard-text'}>\r\n                    <p>Bạn có thể đổi chỗ các đội thi đấu bằng cách bấm vào 2 đội, Thay đổi này chỉ có thể thực hiện khi giải đấu chưa bắt đầu</p>\r\n                  </div>\r\n                  {((this.props.bracketBoardInfo.groupStage as IParams).listTableDE as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketBoard-container-container\" key={index}>\r\n                      <div className=\"BracketBoard-container\">\r\n                        <p>Bảng {item.tableName}</p>\r\n                      </div>\r\n                      <div className=\"BracketBoard-container\">\r\n                        {(item.listWinRound != null && (item.listWinRound as IParams[]).length > 0 ?\r\n                          (item.listWinRound as IParams[]).map((item2, index2) =>\r\n                            (<BracketRound competitionId={this.props.competitionId} index={index2} info={item2} key={index2} roundNo={index2 + 1} totalRound={(item.listWinRound as IParams[]).length} />)) :\r\n                          <p>Không thể lập lịch cho bảng này!</p>\r\n                        )\r\n                        }\r\n                      </div>\r\n                      <div className=\"BracketBoard-container\">\r\n                        {(item.listLoseRound != null && (item.listLoseRound as IParams[]).length > 0 &&\r\n                          (item.listLoseRound as IParams[]).map((item2, index2) =>\r\n                            (<BracketRound competitionId={this.props.competitionId} index={index2} info={item2} key={index2} roundNo={index2 + 1} totalRound={(item.listLoseRound as IParams[]).length} />))\r\n                        )\r\n                        }\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </ReduxBlockUi>\r\n              );\r\n            }\r\n          } else {\r\n            return (\r\n              <p>Chưa có thông tin!</p>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return (<p>Chưa có thông tin!</p>);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTeam: state.listTeam,\r\n    bracketBoardInfo: state.bracketBoardInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    queryBracketBoardInfo,\r\n    setBracketStartedStatus,\r\n    queryListTeams\r\n  }\r\n)(BracketBoard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { IoMdAddCircleOutline } from 'react-icons/io';\r\nimport TextInput from 'components/TextInput';\r\nimport Player from 'components/Player';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport config from 'config';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { queryUserInfo } from 'screens/UserInfo/actions';\r\nimport { editTeam } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IUserInfoTeamsItemProps extends React.ClassAttributes<UserInfoTeamsItem> {\r\n  info: IParams;\r\n  index: number;\r\n  tournamentInfo: IParams | null;\r\n  competitionInfo: IParams | null;\r\n  userInfo: IParams | null;\r\n  listTeam: IParams[];\r\n\r\n  queryUserInfo(param: IBigRequest): void;\r\n  editTeam(param: IBigRequest): void;\r\n}\r\n\r\ninterface IUserInfoTeamsItemState {\r\n  seeMoreInfo: boolean;\r\n  onEditMode: boolean;\r\n  teamFullName: string;\r\n  teamFullNameError: boolean;\r\n  teamFullNameErrorContent: string;\r\n  teamShortName: string;\r\n  teamShortNameError: boolean;\r\n  teamShortNameErrorContent: string;\r\n  listPlayerInForm: IParams[];\r\n  playerNameInForm: string;\r\n  playerNameInFormError: boolean;\r\n  playerNameInFormErrorContent: string;\r\n  playerGenderInForm: ValueType<OptionTypeBase>;\r\n  playerAgeInForm: number;\r\n  playerEmailInForm: string;\r\n  playerEmailInFormError: boolean;\r\n  playerEmailInFormErrorContent: string;\r\n}\r\n\r\nconst genderOptions = [\r\n  { value: true, label: 'Nam' },\r\n  { value: false, label: 'Nữ' },\r\n];\r\n\r\nclass UserInfoTeamsItem extends React.Component<IUserInfoTeamsItemProps, IUserInfoTeamsItemState> {\r\n  constructor(props: IUserInfoTeamsItemProps) {\r\n    super(props);\r\n    this.state = {\r\n      seeMoreInfo: false,\r\n      onEditMode: false,\r\n      teamFullName: '',\r\n      teamFullNameError: false,\r\n      teamFullNameErrorContent: '',\r\n      teamShortName: '',\r\n      teamShortNameError: false,\r\n      teamShortNameErrorContent: '',\r\n      listPlayerInForm: [],\r\n      playerNameInForm: '',\r\n      playerNameInFormError: false,\r\n      playerNameInFormErrorContent: '',\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n      playerAgeInForm: 0,\r\n      playerEmailInForm: '',\r\n      playerEmailInFormError: false,\r\n      playerEmailInFormErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IUserInfoTeamsItemProps, nextState: IUserInfoTeamsItemState) {\r\n    if (this.props.info !== nextProps.info) {\r\n      this.setState({\r\n        onEditMode: false,\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        teamId: this.props.info.id,\r\n      },\r\n      data: {},\r\n    };\r\n    // this.props.queryListPlayerOfTeam(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.info.creatorId,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryUserInfo(params);\r\n  }\r\n\r\n  private handleSeeMore = () => {\r\n    if (this.state.onEditMode === true) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      seeMoreInfo: !this.state.seeMoreInfo,\r\n    });\r\n  }\r\n\r\n  private openEditMode = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      seeMoreInfo: true,\r\n      onEditMode: true,\r\n      teamFullName: this.props.info.fullName ? this.props.info.fullName as string : '',\r\n      teamShortName: this.props.info.shortName ? this.props.info.shortName as string : '',\r\n      listPlayerInForm: this.props.info.players as IParams[],\r\n    });\r\n  }\r\n\r\n  private onChangeTeamFullName = (value: string) => {\r\n    this.setState({\r\n      teamFullName: value,\r\n    });\r\n  }\r\n\r\n  private onChangeTeamShortName = (value: string) => {\r\n    this.setState({\r\n      teamShortName: value,\r\n    });\r\n  }\r\n\r\n  private validateTeamFullName = () => {\r\n    let teamFullNameError = false;\r\n    let teamFullNameErrorContent = '';\r\n    let tempList = this.props.listTeam.slice(0);\r\n    tempList = tempList.filter((item, index) => index !== this.props.index);\r\n    if (this.state.teamFullName.trim() === '') {\r\n      teamFullNameError = true;\r\n      teamFullNameErrorContent = 'Tên đội không được trống';\r\n    } else if (tempList.find(element => element.fullName === this.state.teamFullName)) {\r\n      teamFullNameError = true;\r\n      teamFullNameErrorContent = 'Tên đội này đã tồn tại trong cuộc thi vui lòng chọn tên khác!';\r\n    }\r\n\r\n    return { teamFullNameError, teamFullNameErrorContent };\r\n  }\r\n\r\n  private validateTeamShortName = () => {\r\n    let teamShortNameError = false;\r\n    let teamShortNameErrorContent = '';\r\n    let tempList = this.props.listTeam.slice(0);\r\n    tempList = tempList.filter((item, index) => index !== this.props.index);\r\n    if (this.state.teamShortName.trim() === '') {\r\n      teamShortNameError = true;\r\n      teamShortNameErrorContent = 'Tên ngắn đội không được trống';\r\n    } else if (tempList.find(element => element.shortName === this.state.teamShortName)) {\r\n      teamShortNameError = true;\r\n      teamShortNameErrorContent = 'Tên ngắn đội này đã tồn tại trong cuộc thi vui lòng chọn tên khác!';\r\n    }\r\n\r\n    return { teamShortNameError, teamShortNameErrorContent };\r\n  }\r\n\r\n  private onBlurTeamFullName = () => {\r\n    const { teamFullNameError, teamFullNameErrorContent } = this.validateTeamFullName();\r\n    this.setState({\r\n      teamFullNameError,\r\n      teamFullNameErrorContent,\r\n    });\r\n  }\r\n\r\n  private onBlurTeamShortName = () => {\r\n    const { teamShortNameError, teamShortNameErrorContent } = this.validateTeamShortName();\r\n    this.setState({\r\n      teamShortNameError,\r\n      teamShortNameErrorContent,\r\n    });\r\n  }\r\n\r\n  private onDeletePlayer = (indexx: number) => {\r\n    this.setState({\r\n      listPlayerInForm: this.state.listPlayerInForm.filter((item, index) => index !== indexx),\r\n    });\r\n  }\r\n\r\n  private onChangePlayerNameInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerNameInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerGenderInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({ playerGenderInForm: value, });\r\n  }\r\n\r\n  private onChangePlayerAgeInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value.target.value as unknown as number)) {\r\n      tempValue = Number(value.target.value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({\r\n      playerAgeInForm: tempValue,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerEmailInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerEmailInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private validateAddPlayer = () => {\r\n    let playerEmailInFormErrorContent = '';\r\n    let playerEmailInFormError = false;\r\n    let playerNameInFormErrorContent = '';\r\n    let playerNameInFormError = false;\r\n    if (this.state.playerNameInForm.trim() === '') {\r\n      playerNameInFormError = true;\r\n      playerNameInFormErrorContent = 'Tên người chơi không được trống';\r\n    }\r\n    if (!config.regex.email.test(this.state.playerEmailInForm)) {\r\n      playerEmailInFormError = true;\r\n      playerEmailInFormErrorContent = 'Email không hợp lệ';\r\n    }\r\n\r\n    return {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    };\r\n  }\r\n\r\n  private addPlayer = () => {\r\n    const {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    } = this.validateAddPlayer();\r\n    this.setState({\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    });\r\n    if (playerNameInFormError === true || playerEmailInFormError === true) {\r\n      return;\r\n    }\r\n    const listTemp = this.state.listPlayerInForm;\r\n    listTemp.push({\r\n      name: this.state.playerNameInForm,\r\n      age: this.state.playerAgeInForm,\r\n      email: this.state.playerEmailInForm,\r\n      gender: (this.state.playerGenderInForm as IParams).label,\r\n    });\r\n    this.setState({\r\n      listPlayerInForm: listTemp,\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerEmailInForm: '',\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n    });\r\n  }\r\n\r\n  private handleSaveChange = () => {\r\n    const { teamFullNameError, teamFullNameErrorContent } = this.validateTeamFullName();\r\n    const { teamShortNameError, teamShortNameErrorContent } = this.validateTeamShortName();\r\n    this.setState({\r\n      teamShortNameError,\r\n      teamShortNameErrorContent,\r\n      teamFullNameError,\r\n      teamFullNameErrorContent,\r\n    });\r\n    if (teamFullNameError === true || teamShortNameError === true) {\r\n      return;\r\n    }\r\n    const params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.info.id,\r\n      },\r\n      data: {\r\n        competitionId: this.props.info.competitionId,\r\n        creatorId: this.props.info.creatorId,\r\n        description: this.props.info.description,\r\n        fullName: this.state.teamFullName,\r\n        shortName: this.state.teamShortName,\r\n        seedNo: this.props.info.seedNo,\r\n        status: this.props.info.status,\r\n        url: this.props.info.url,\r\n        players: this.state.listPlayerInForm,\r\n      },\r\n    };\r\n    this.props.editTeam(params);\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"UserInfoTeamsItem-info-container\">\r\n        <div className=\"UserInfoTeamsItem-container\">\r\n          <div className=\"UserInfoTeamsItem-container-container\" onClick={this.handleSeeMore}>\r\n            <div className=\"UserInfoTeamsItem-order-number-container\">\r\n              <div className=\"UserInfoTeamsItem-order-number-box\">\r\n                <p>{this.props.index + 1}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"UserInfoTeamsItem-team-name-container\">\r\n              {\r\n                this.state.onEditMode === false ?\r\n                  <p>{this.props.info && this.props.info.fullName}</p> :\r\n                  <TextInput label={'Tên đội'} value={this.state.teamFullName} error={this.state.teamFullNameError} errorContent={this.state.teamFullNameErrorContent} onChangeText={this.onChangeTeamFullName} onBlur={this.onBlurTeamFullName} />\r\n              }\r\n            </div>\r\n            <div className=\"UserInfoTeamsItem-team-setting-container\">\r\n              <div className=\"UserInfoTeamsItem-team-setting-container-container\" onClick={this.openEditMode}>\r\n                <FaEdit className=\"UserInfoTeamsItem-team-setting-icon\" />\r\n              </div>\r\n              <div className=\"UserInfoTeamsItem-team-setting-container-container\">\r\n                <MdDelete className=\"UserInfoTeamsItem-team-setting-icon\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.seeMoreInfo === true &&\r\n          <div className=\"UserInfoTeamsItem-moreInfo-container\">\r\n            <div className=\"UserInfoTeamsItem-moreInfo-normalInfo-container\">\r\n              {\r\n                this.state.onEditMode === false ?\r\n                  <p>Tên ngắn: {this.props.info.shortName}</p> :\r\n                  <TextInput label={'Tên ngắn đội'} value={this.state.teamShortName} error={this.state.teamShortNameError} errorContent={this.state.teamShortNameErrorContent} onChangeText={this.onChangeTeamShortName} onBlur={this.onBlurTeamShortName} />\r\n              }\r\n              <p>Giải tham gia: {this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament != null && (this.props.tournamentInfo.Tournament as unknown as IParams).fullName}</p>\r\n              <p>Bộ môn tham gia: Bóng đá</p>\r\n              <p>Tên cuộc thi: {this.props.competitionInfo != null && this.props.competitionInfo.Competition != null && (this.props.competitionInfo.Competition as unknown as IParams).name}</p>\r\n              <p>Quản lý của đội: <Link style={{ fontWeight: 'bold' }} target={'_blank'} to={`/user/${this.props.info.creatorId}`}>\r\n                {this.props.userInfo != null ? `${(this.props.userInfo.User as unknown as IParams).firstName} ${(this.props.userInfo.User as unknown as IParams).lastName}` : ''}\r\n              </Link></p>\r\n              <p>Danh sách thành viên:</p>\r\n            </div>\r\n            <div className=\"UserInfoTeamsItem-moreInfo-listTeamInfo-container\">\r\n              <div className=\"UserInfoTeamsItem-join-tournament-container\">\r\n                <div className=\"UserInfoTeamsItem-join-tournament-item1\">\r\n                  <p>Tên</p>\r\n                </div>\r\n                <div className=\"UserInfoTeamsItem-join-tournament-item2\">\r\n                  <p>Giới tính</p>\r\n                </div>\r\n                <div className=\"UserInfoTeamsItem-join-tournament-item2\">\r\n                  <p>Tuổi</p>\r\n                </div>\r\n                <div className=\"UserInfoTeamsItem-join-tournament-item1\">\r\n                  <p>Email</p>\r\n                </div>\r\n                <div className=\"UserInfoTeamsItem-join-tournament-setting\">\r\n                </div>\r\n              </div>\r\n              {\r\n                this.state.onEditMode === true ?\r\n                this.state.listPlayerInForm.map((item, index) => <Player onDelete={this.onDeletePlayer} info={item} freeToEdit={this.state.onEditMode} key={index} index={index} />) :\r\n                  (this.props.info.players as unknown as IParams[]).map((item, index) => <Player onDelete={this.onDeletePlayer} info={item} freeToEdit={this.state.onEditMode} key={index} index={index} />)\r\n              }\r\n              {this.state.onEditMode === true &&\r\n                <div className=\"UserInfoTeamsItem-join-tournament-container\">\r\n                  <div className=\"UserInfoTeamsItem-join-tournament-item1\">\r\n                    <input type={'text'} onChange={this.onChangePlayerNameInForm} value={this.state.playerNameInForm} />\r\n                  </div>\r\n                  <div className=\"UserInfoTeamsItem-join-tournament-item2\">\r\n                    <Select\r\n                      options={genderOptions}\r\n                      className=\"Select\"\r\n                      defaultValue={this.state.playerGenderInForm}\r\n                      value={this.state.playerGenderInForm}\r\n                      onChange={this.onChangePlayerGenderInForm}\r\n                    />\r\n                  </div>\r\n                  <div className=\"UserInfoTeamsItem-join-tournament-item2\">\r\n                    <input style={{ width: '70px' }} type={'text'} onChange={this.onChangePlayerAgeInForm} value={this.state.playerAgeInForm} />\r\n                  </div>\r\n                  <div className=\"UserInfoTeamsItem-join-tournament-item1\">\r\n                    <input type={'text'} onChange={this.onChangePlayerEmailInForm} value={this.state.playerEmailInForm} />\r\n                  </div>\r\n                  <div className=\"UserInfoTeamsItem-join-tournament-setting\">\r\n                    <IoMdAddCircleOutline color={'white'} size={25} style={{ marginLeft: '3px', marginRight: '3px' }} onClick={this.addPlayer} />\r\n                  </div>\r\n                </div>}\r\n              {this.state.onEditMode === true && this.state.playerNameInFormError === true && <p style={{ color: 'red' }}>{this.state.playerNameInFormErrorContent}</p>}\r\n              {this.state.onEditMode === true && this.state.playerEmailInFormError === true && <p style={{ color: 'red' }}>{this.state.playerEmailInFormErrorContent}</p>}\r\n              {this.state.onEditMode === true && <div className=\"UserInfoTeamsItem-login-container\">\r\n                <div className=\"UserInfoTeamsItem-login\" onClick={this.handleSaveChange}>\r\n                  <h4 className=\"UserInfoTeamsItem-login-text\">Lưu</h4>\r\n                </div>\r\n              </div>}\r\n            </div>\r\n          </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    userInfo: state.userInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryUserInfo, editTeam }\r\n)(UserInfoTeamsItem);","import { IBigRequest } from \"interfaces/common\";\r\nimport { EDIT_TEAM } from \"redux-saga/actions\";\r\nimport { EDIT_TEAM_SUCCESS, EDIT_TEAM_FAILED } from \"./reducers\";\r\n\r\nexport const editTeam = (data: IBigRequest) => ({\r\n  type: EDIT_TEAM,\r\n  response: {\r\n    success: EDIT_TEAM_SUCCESS,\r\n    failed: EDIT_TEAM_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","export const EDIT_TEAM_SUCCESS = 'EDIT_TEAM_SUCCESS';\r\nexport const EDIT_TEAM_FAILED = 'EDIT_TEAM_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport UserInfoTeamsItem from 'components/UserInfoTeamsItem';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { queryListTeams, addATeamToCompetition } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IUserInfoTeamsProps extends React.ClassAttributes<UserInfoTeams> {\r\n  id: number;\r\n  type: 'user' | 'competition';\r\n  listTeam: IParams[] | null;\r\n  tournamentInfo: IParams | null;\r\n  competitionInfo: IParams | null;\r\n  currentUserInfo: IParams | null;\r\n\r\n  queryListTeams(param: IBigRequest): void;\r\n  addATeamToCompetition(param: IBigRequest): void;\r\n}\r\n\r\ninterface IUserInfoTeamsState {\r\n  teamNameToAdd: string;\r\n  teamNameToAddError: boolean;\r\n  teamNameToAddErrorContent: string;\r\n  teamShortNameToAdd: string;\r\n  teamShortNameToAddError: boolean;\r\n  teamShortNameToAddErrorContent: string;\r\n}\r\n\r\nclass UserInfoTeams extends React.Component<IUserInfoTeamsProps, IUserInfoTeamsState> {\r\n  constructor(props: IUserInfoTeamsProps) {\r\n    super(props);\r\n    this.state = {\r\n      teamNameToAdd: '',\r\n      teamNameToAddError: false,\r\n      teamNameToAddErrorContent: '',\r\n      teamShortNameToAdd: '',\r\n      teamShortNameToAddError: false,\r\n      teamShortNameToAddErrorContent: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        ...this.props.type === 'user' ? { userId: this.props.id } : { competitionId: this.props.id },\r\n        limit: 999,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryListTeams(params);\r\n  }\r\n\r\n  private validate = () => {\r\n    let teamNameToAddError = false;\r\n    let teamNameToAddErrorContent = '';\r\n    let teamShortNameToAddError = false;\r\n    let teamShortNameToAddErrorContent = '';\r\n    if (this.state.teamNameToAdd.trim() === '') {\r\n      teamNameToAddError = true;\r\n      teamNameToAddErrorContent = 'Tên đội không được trống';\r\n    }\r\n    if (this.state.teamShortNameToAdd.trim() === '') {\r\n      teamNameToAddError = true;\r\n      teamNameToAddErrorContent = 'Tên ngắn đội không được trống';\r\n    }\r\n    let listTemp = [];\r\n    if (this.props.listTeam!.map((item, index) => { if (item.fullName === this.state.teamNameToAdd) { listTemp.push(item); } })) {\r\n      if (listTemp.length > 0) {\r\n        teamNameToAddError = true;\r\n        teamNameToAddErrorContent = 'Tên đội đã tồn tại trong cuộc thi';\r\n      }\r\n    }\r\n    listTemp = [];\r\n    if (this.props.listTeam!.map((item, index) => { if (item.shortName === this.state.teamShortNameToAdd) { listTemp.push(item); } })) {\r\n      if (listTemp.length > 0) {\r\n        teamShortNameToAddError = true;\r\n        teamShortNameToAddErrorContent = 'Tên ngắn đội đã tồn tại trong cuộc thi';\r\n      }\r\n    }\r\n\r\n    return { teamNameToAddError, teamNameToAddErrorContent, teamShortNameToAddError, teamShortNameToAddErrorContent };\r\n  }\r\n\r\n  private handleAddATeam = () => {\r\n    const { teamNameToAddError, teamNameToAddErrorContent, teamShortNameToAddError, teamShortNameToAddErrorContent } = this.validate();\r\n    this.setState({\r\n      teamNameToAddError,\r\n      teamNameToAddErrorContent,\r\n      teamShortNameToAddError,\r\n      teamShortNameToAddErrorContent\r\n    });\r\n    if (teamNameToAddError === true || teamShortNameToAddError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        fullName: this.state.teamNameToAdd,\r\n        shortName: this.state.teamShortNameToAdd,\r\n        description: '',\r\n        creatorId: this.props.currentUserInfo != null && this.props.currentUserInfo.id,\r\n        competitionId: this.props.id,\r\n      },\r\n    };\r\n    this.props.addATeamToCompetition(params);\r\n    this.setState({ teamNameToAdd: '', teamShortNameToAdd: '', });\r\n  }\r\n\r\n  private onChangeTeamNameToAdd = (value: string) => {\r\n    this.setState({ teamNameToAdd: value, });\r\n  }\r\n\r\n  private onChangeTeamShortNameToAdd = (value: string) => {\r\n    this.setState({ teamShortNameToAdd: value, });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"UserInfoTeams-container\">\r\n        {this.props.listTeam != null ? (this.props.listTeam.length > 0 ?\r\n          this.props.listTeam.map(\r\n            (item, index) => <UserInfoTeamsItem listTeam={this.props.listTeam as IParams[]} competitionInfo={this.props.competitionInfo} tournamentInfo={this.props.tournamentInfo} info={item} index={index} key={index} />\r\n          ) : <p>Không tìm thấy đội nào!</p>) :\r\n          <Skeleton />\r\n        }\r\n        {this.props.listTeam != null && <div className=\"UserInfoTeamsAddItem-container2\">\r\n          <div className=\"UserInfoTeamsAddItem-container-container\">\r\n            <div className=\"UserInfoTeamsAddItem-container-container-container\">\r\n              <TextInput style={{ width: 200 }} label={'Nhập tên đội'} value={this.state.teamNameToAdd} error={this.state.teamNameToAddError} errorContent={this.state.teamNameToAddErrorContent} onChangeText={this.onChangeTeamNameToAdd} />\r\n              <TextInput style={{ width: 200 }} label={'Nhập tên ngắn đội'} value={this.state.teamShortNameToAdd} error={this.state.teamShortNameToAddError} errorContent={this.state.teamShortNameToAddErrorContent} onChangeText={this.onChangeTeamShortNameToAdd} />\r\n              <div className=\"UserInfoTeamsAddItem-login-container\">\r\n                <div className=\"UserInfoTeamsAddItem-login\" onClick={this.handleAddATeam}>\r\n                  <h4 className=\"UserInfoTeamsAddItem-login-text\">Thêm đội</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTeam: state.listTeam,\r\n    currentUserInfo: state.currentUserInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryListTeams, addATeamToCompetition }\r\n)(UserInfoTeams);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { queryBracketBoardInfo } from 'components/BracketBoard/actions';\r\nimport { queryListTeams } from 'components/Teams/actions';\r\nimport { formatDateToDisplay } from 'utils/datetime';\r\nimport './styles.css';\r\n\r\ninterface IBracketScheduleProps extends React.ClassAttributes<BracketSchedule> {\r\n  bracketBoardInfo: IParams | null;\r\n  competitionId: number;\r\n  finalStage: boolean;\r\n  listTeam: IParams[] | null;\r\n\r\n  queryBracketBoardInfo(params: IBigRequest): void;\r\n  queryListTeams(params: IBigRequest): void;\r\n}\r\n\r\ninterface IBracketScheduleState {\r\n}\r\n\r\nclass BracketSchedule extends React.Component<IBracketScheduleProps, IBracketScheduleState> {\r\n  constructor(props: IBracketScheduleProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.competitionId,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryBracketBoardInfo(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.competitionId,\r\n        limit: 999,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryListTeams(params);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.bracketBoardInfo != null) {\r\n      console.log('this.props.bracketBoardInfo', this.props.bracketBoardInfo);\r\n      if (this.props.finalStage === true) {\r\n        if ((this.props.bracketBoardInfo.finalStage as IParams).listRound != null) {\r\n          return (\r\n            <div className=\"BracketSchedule-container\">\r\n              {((this.props.bracketBoardInfo.finalStage as IParams).listRound != null &&\r\n                ((this.props.bracketBoardInfo.finalStage as IParams).listRound as IParams[]).map((item, index) =>\r\n                  <div className=\"BracketSchedule-round-container\" key={index}>\r\n                    <div className=\"BracketSchedule-roundName-container\">\r\n                      <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                    </div>\r\n                    {item.listMatches != null && (item.listMatches as IParams[]).map((item2, index2) => {\r\n                      if (item2.id !== -1) {\r\n                        return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                          <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                            <p>{(item2.data as IParams).name}</p>\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                            <p>{(item2.data as IParams).time}</p>\r\n                            <p>{(item2.data as IParams).location}</p>\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                            {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                              <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                              ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                            <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                            <p>-</p>\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                            <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                          </div>\r\n                          <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                            {\r\n                              (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                          </div>\r\n                        </div>)\r\n                      } else {\r\n                        return <div key={index2}></div>\r\n                      }\r\n                    })}\r\n                  </div>))}\r\n            </div>\r\n          );\r\n        } else {\r\n          if ((this.props.bracketBoardInfo.finalStage as IParams).listWinRound != null) {\r\n            return (\r\n              <div className=\"BracketSchedule-container\">\r\n                <p style={{ fontWeight: 'bold', fontSize: 20 }}>Nhánh thắng</p>\r\n                {(\r\n                  ((this.props.bracketBoardInfo.finalStage as IParams).listWinRound as unknown as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketSchedule-round-container\" key={index}>\r\n                      <div className=\"BracketSchedule-roundName-container\">\r\n                        <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                      </div>\r\n                      {item.listWinMatches != null && (item.listWinMatches as IParams[]).map((item2, index2) => {\r\n                        if (item2.id !== -1) {\r\n                          return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                            <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                              <p>{(item2.data as IParams).name}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                              <p>{(item2.data as IParams).time}</p>\r\n                              <p>{(item2.data as IParams).location}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                                <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                                ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                              <p>-</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {\r\n                                (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                  ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                          </div>)\r\n                        } else {\r\n                          return <div key={index2}></div>\r\n                        }\r\n                      })}\r\n                    </div>))}\r\n                <p style={{ fontWeight: 'bold', fontSize: 20 }}>Nhánh Thua</p>\r\n                {(\r\n                  ((this.props.bracketBoardInfo.finalStage as IParams).listLoseRound as unknown as IParams[]).length > 0 ? ((this.props.bracketBoardInfo.finalStage as IParams).listLoseRound as unknown as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketSchedule-round-container\" key={index}>\r\n                      <div className=\"BracketSchedule-roundName-container\">\r\n                        <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                      </div>\r\n                      {item.listLoseMatches != null && (item.listLoseMatches as IParams[]).map((item2, index2) => {\r\n                        if (item2.id !== -1) {\r\n                          return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                            <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                              <p>{(item2.data as IParams).name}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                              <p>{(item2.data as IParams).time}</p>\r\n                              <p>{(item2.data as IParams).location}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                                <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                                ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                              <p>-</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {\r\n                                (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                  ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                          </div>)\r\n                        } else {\r\n                          return <div key={index2}></div>\r\n                        }\r\n                      })}\r\n                    </div>) : <p>Không có trận nào!</p>)}\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div className=\"BracketSchedule-container\">\r\n                {((this.props.bracketBoardInfo.finalStage as IParams).listRRRound != null &&\r\n                  ((this.props.bracketBoardInfo.finalStage as IParams).listRRRound as unknown as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketSchedule-round-container\" key={index}>\r\n                      <div className=\"BracketSchedule-roundName-container\">\r\n                        <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                      </div>\r\n                      {item.listMatches != null && (item.listMatches as IParams[]).map((item2, index2) => {\r\n                        if (item2.id !== -1) {\r\n                          return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                            <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                              <p>{item2.name}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                              <p>{item2.time}</p>\r\n                              <p>{item2.location}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {item2.team1 != null && ((item2.team1 as IParams).description != null && (item2.team1 as IParams).team != null ?\r\n                                <p className={\"BracketSchedule-name-text\"}>{((item2.team1 as IParams).team as IParams).name}</p> :\r\n                                (((item2.team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{((item2.team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                              <p>-</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {\r\n                                item2.team2 != null && ((item2.team2 as IParams).description != null && (item2.team2 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{((item2.team2 as IParams).team as IParams).name}</p> :\r\n                                  (((item2.team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{((item2.team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                          </div>)\r\n                        } else {\r\n                          return <div key={index2}></div>\r\n                        }\r\n                      })}\r\n                    </div>))}\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        if ((this.props.bracketBoardInfo.groupStage as IParams).listTableSE != null) {\r\n          return (\r\n            ((this.props.bracketBoardInfo.groupStage as IParams).listTableSE as IParams[]).map((item3, index3) =>\r\n              <div className=\"BracketSchedule-container\" key={index3}>\r\n                <p style={{ fontWeight: 'bold', fontSize: 20 }}>Bảng {item3.tableName}</p>\r\n                {(item3.listRound != null &&\r\n                  (item3.listRound as unknown as IParams[]).map((item, index) =>\r\n                    <div className=\"BracketSchedule-round-container\" key={index}>\r\n                      <div className=\"BracketSchedule-roundName-container\">\r\n                        <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                      </div>\r\n                      {item.listMatches != null && (item.listMatches as IParams[]).map((item2, index2) => {\r\n                        if (item2.id !== -1) {\r\n                          return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                            <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                              <p>{(item2.data as IParams).name}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                              <p>{(item2.data as IParams).time}</p>\r\n                              <p>{(item2.data as IParams).location}</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                                <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                                ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                              <p>-</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                              <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                            </div>\r\n                            <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                              {\r\n                                (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                  ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                            </div>\r\n                          </div>)\r\n                        } else {\r\n                          return <div key={index2}></div>\r\n                        }\r\n                      })}\r\n                    </div>))}\r\n              </div>\r\n            )\r\n          );\r\n        } else {\r\n          if ((this.props.bracketBoardInfo.groupStage as IParams).listTableDE != null) {\r\n            return (\r\n              ((this.props.bracketBoardInfo.groupStage as IParams).listTableDE as IParams[]).map((item3, index3) =>\r\n                <div className=\"BracketSchedule-container\">\r\n                  <p style={{ fontWeight: 'bold', fontSize: 20 }}>Nhánh thắng Bảng {item3.tableName}</p>\r\n                  {(\r\n                    (item3.listWinRound as unknown as IParams[]).map((item, index) =>\r\n                      <div className=\"BracketSchedule-round-container\" key={index}>\r\n                        <div className=\"BracketSchedule-roundName-container\">\r\n                          <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                        </div>\r\n                        {item.listWinMatches != null && (item.listWinMatches as IParams[]).map((item2, index2) => {\r\n                          if (item2.id !== -1) {\r\n                            return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                              <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                                <p>{(item2.data as IParams).name}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                                <p>{formatDateToDisplay((item2.data as IParams).time as string, 'HH:mm dd/MM/yyyy', 'yyyy-MM-dd HH:mm:ss')}</p>\r\n                                <p>{(item2.data as IParams).location}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                                  ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                                <p>-</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {\r\n                                  (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                    <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                    ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                            </div>)\r\n                          } else {\r\n                            return <div key={index2}></div>\r\n                          }\r\n                        })}\r\n                      </div>))}\r\n                  <p style={{ fontWeight: 'bold', fontSize: 20 }}>Nhánh Thua Bảng {item3.tableName}</p>\r\n                  {(\r\n                    (item3.listLoseRound as IParams[]).length > 0 ? (item3.listLoseRound as IParams[]).map((item, index) =>\r\n                      <div className=\"BracketSchedule-round-container\" key={index}>\r\n                        <div className=\"BracketSchedule-roundName-container\">\r\n                          <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                        </div>\r\n                        {item.listLoseMatches != null && (item.listLoseMatches as IParams[]).map((item2, index2) => {\r\n                          if (item2.id !== -1) {\r\n                            return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                              <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                                <p>{(item2.data as IParams).name}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                                <p>{(item2.data as IParams).time}</p>\r\n                                <p>{(item2.data as IParams).location}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {(item2.data as IParams).team1 != null && (((item2.data as IParams).team1 as IParams).description != null && ((item2.data as IParams).team1 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team1 as IParams).team as IParams).name}</p> :\r\n                                  ((((item2.data as IParams).team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                                <p>-</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {\r\n                                  (item2.data as IParams).team2 != null && (((item2.data as IParams).team2 as IParams).description != null && ((item2.data as IParams).team2 as IParams).team != null ?\r\n                                    <p className={\"BracketSchedule-name-text\"}>{(((item2.data as IParams).team2 as IParams).team as IParams).name}</p> :\r\n                                    ((((item2.data as IParams).team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{(((item2.data as IParams).team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[((((item2.data as IParams).team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                            </div>)\r\n                          } else {\r\n                            return <div key={index2}></div>\r\n                          }\r\n                        })}\r\n                      </div>) : <p>Không có trận nào!</p>)}\r\n                </div>)\r\n            );\r\n          } else {\r\n            return (\r\n              (((this.props.bracketBoardInfo.groupStage as IParams).listTableRR as IParams[]).map((item3, index3) =>\r\n                <div className=\"BracketSchedule-container\" key={index3}>\r\n                  <p style={{ fontWeight: 'bold', fontSize: 20 }}>Bảng {item3.tableName}</p>\r\n                  {(item3.listRRRound != null &&\r\n                    (item3.listRRRound as IParams[]).map((item, index) =>\r\n                      <div className=\"BracketSchedule-round-container\" key={index}>\r\n                        <div className=\"BracketSchedule-roundName-container\">\r\n                          <p className={'BracketSchedule-roundName-text'}>{`${item.roundName}`}</p>\r\n                        </div>\r\n                        {item.listMatches != null && (item.listMatches as IParams[]).map((item2, index2) => {\r\n                          if (item2.id !== -1) {\r\n                            return (<div className=\"BracketSchedule-roundMatch-container\" key={index2}>\r\n                              <div className=\"BracketSchedule-roundMatch-orderNumber-container\">\r\n                                <p>{item2.name}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-time-container\">\r\n                                <p>{item2.time}</p>\r\n                                <p>{item2.location}</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {item2.team1 != null && ((item2.team1 as IParams).description != null && (item2.team1 as IParams).team != null ?\r\n                                  <p className={\"BracketSchedule-name-text\"}>{((item2.team1 as IParams).team as IParams).name}</p> :\r\n                                  (((item2.team1 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{((item2.team1 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[(((item2.team1 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent1-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result1-text\">1</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequentMiddle-container\">\r\n                                <p>-</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-consequent-container BracketSchedule-roundMatch-consequent2-container\">\r\n                                <p className=\"BracketSchedule-roundMatch-result-text BracketSchedule-roundMatch-result2-text\">0</p>\r\n                              </div>\r\n                              <div className=\"BracketSchedule-roundMatch-name-container\">\r\n                                {\r\n                                  item2.team2 != null && ((item2.team2 as IParams).description != null && (item2.team2 as IParams).team != null ?\r\n                                    <p className={\"BracketSchedule-name-text\"}>{((item2.team2 as IParams).team as IParams).name}</p> :\r\n                                    (((item2.team2 as IParams).description as IParams).descType !== 0 ? <p className={\"BracketSchedule-name-text BracketSchedule-name-text2\"}>{((item2.team2 as IParams).description as IParams).description}</p> : <p className={\"BracketSchedule-name-text\"}>{this.props.listTeam != null && this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1] != null && this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1].shortName != null ? this.props.listTeam[(((item2.team2 as IParams).description as IParams).unitIndex as number) - 1].shortName : ''}</p>))}\r\n                              </div>\r\n                            </div>)\r\n                          } else {\r\n                            return <div key={index2}></div>\r\n                          }\r\n                        })}\r\n                      </div>))}\r\n                </div>)\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return (<p>Chưa có thông tin</p>);\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listTeam: state.listTeam,\r\n    bracketBoardInfo: state.bracketBoardInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryBracketBoardInfo, queryListTeams }\r\n)(BracketSchedule);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { queryBracketRankInfo } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IBracketRankProps extends React.ClassAttributes<BracketRank> {\r\n  competitionId: number;\r\n  finalStage: boolean;\r\n  bracketRankInfo: IParams | null;\r\n\r\n  queryBracketRankInfo(params: IBigRequest): void;\r\n}\r\n\r\ninterface IBracketRankState {\r\n}\r\n\r\nclass BracketRank extends React.Component<IBracketRankProps, IBracketRankState> {\r\n  constructor(props: IBracketRankProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.competitionId,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryBracketRankInfo(params);\r\n  }\r\n\r\n  render() {\r\n    console.log('bracketRankInfo', this.props.bracketRankInfo);\r\n    return (\r\n      <div className=\"BracketRank-container\">\r\n        <div className=\"BracketRank-item-container BracketRank-menuItem-container\">\r\n          <div className=\"BracketRank-item-orderNumber-container\">\r\n            <p>Hạng</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-teamName-container\">\r\n            <p>Tên đội</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-managerName-container\">\r\n            <p>Tên Người quản lý đội</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-matchHistory-container\">\r\n            <p>Lịch sử đấu</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-score-container\">\r\n            <p>Điểm</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"BracketRank-item-container\">\r\n          <div className=\"BracketRank-item-orderNumber-container\">\r\n            <p>1</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-teamName-container\">\r\n            <p>Đội A</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-managerName-container\">\r\n            <p>Phạm Minh Hiếu</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-matchHistory-container\">\r\n            <p>WLWL</p>\r\n          </div>\r\n          <div className=\"BracketRank-item-score-container\">\r\n            <p>4</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    bracketRankInfo: state.bracketRankInfo,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryBracketRankInfo }\r\n)(BracketRank);","import { IBigRequest } from \"interfaces/common\";\r\nimport { GET_BRACKET_RANK_INFO } from \"redux-saga/actions\";\r\nimport { GET_BRACKET_RANK_INFO_SUCCESS, GET_BRACKET_RANK_INFO_FAILED } from \"./reducers\";\r\n\r\nexport const queryBracketRankInfo = (data: IBigRequest) => ({\r\n  type: GET_BRACKET_RANK_INFO,\r\n  response: {\r\n    success: GET_BRACKET_RANK_INFO_SUCCESS,\r\n    failed: GET_BRACKET_RANK_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Styles } from 'react-modal';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as H from 'history';\r\nimport { StaticContext } from 'react-router';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport {\r\n  editGroupStageSetting,\r\n  editFinalStageSetting,\r\n  editCompetition,\r\n  queryAllFormats,\r\n  queryCompetition,\r\n  queryAllSports,\r\n  querySportInfo,\r\n  queryFinalStageSetting,\r\n  queryGroupStageSetting,\r\n  updateSchedule\r\n} from './actions';\r\nimport './styles.css';\r\nimport CustomModal from 'components/CustomModal';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport CustomTab from 'components/CustomTab';\r\nimport Player from 'components/Player';\r\nimport { IoMdAddCircleOutline } from 'react-icons/io';\r\nimport { queryAllCompetitionsByTournamentId } from 'components/CompetitionsSetting/actions';\r\nimport BracketBoard from 'components/BracketBoard';\r\nimport Teams from 'components/Teams';\r\nimport BracketSchedule from 'components/BracketSchedule';\r\nimport BracketRank from 'components/BracketRank';\r\nimport { queryTournamentInfo } from 'screens/TournamentInfo/actions';\r\nimport config from 'config';\r\nimport { formatTournamentStatus } from 'utils/common';\r\nimport { cookies } from 'utils/cookies';\r\nimport { COOKIES_TYPE } from 'global';\r\n\r\ninterface ICompetitionInfoProps extends React.ClassAttributes<CompetitionInfo> {\r\n  routerInfo: RouteComponentProps<any, StaticContext, H.LocationState>;\r\n  competitionInfo: IParams | null;\r\n  tournamentInfo: IParams | null;\r\n  finalStageSetting: IParams | null;\r\n  groupStageSetting: IParams | null;\r\n  allSports: IParams[];\r\n  allFormats: IParams[];\r\n  sportInfo: IParams | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n\r\n  queryCompetition(params: IBigRequest): void;\r\n  queryTournamentInfo(params: IBigRequest): void;\r\n  querySportInfo(params: IBigRequest): void;\r\n  queryFinalStageSetting(params: IBigRequest): void;\r\n  queryGroupStageSetting(params: IBigRequest): void;\r\n  editCompetition(params: IBigRequest): void;\r\n  editFinalStageSetting(params: IBigRequest): void;\r\n  editGroupStageSetting(params: IBigRequest): void;\r\n  queryAllCompetitionsByTournamentId(params: IBigRequest): void;\r\n  updateSchedule(params: IBigRequest): void;\r\n  queryAllSports(): void;\r\n  queryAllFormats(): void;\r\n}\r\n\r\ninterface ICompetitionInfoState {\r\n  showJoinModal: boolean;\r\n  competitionFullName: string;\r\n  competitionFullNameError: boolean;\r\n  competitionFullNameErrorContent: string;\r\n  teamNameInForm: string;\r\n  teamNameInFormError: boolean;\r\n  teamNameInFormErrorContent: string;\r\n  playerNameInForm: string;\r\n  playerNameInFormError: boolean;\r\n  playerNameInFormErrorContent: string;\r\n  playerEmailInForm: string;\r\n  playerEmailInFormError: boolean;\r\n  playerEmailInFormErrorContent: string;\r\n  playerAgeInForm: number;\r\n  teamShortNameInForm: string;\r\n  teamShortNameInFormError: boolean;\r\n  teamShortNameInFormErrorContent: string;\r\n  listPlayerInForm: IParams[];\r\n  playerGenderInForm: ValueType<OptionTypeBase>;\r\n  onEditMode: boolean;\r\n  selectedSport: ValueType<OptionTypeBase>;\r\n  onePhase: boolean;\r\n  twoPhase: boolean;\r\n  selectedCompetitionFormatPhase1: ValueType<OptionTypeBase>;\r\n  selectedCompetitionFormatPhase2: ValueType<OptionTypeBase>;\r\n  homeWayPhase2: boolean;\r\n  homeWayPhase1: boolean;\r\n  amountOfTeamsInAGroup: number;\r\n  amountOfTeamsInAGroupError: boolean;\r\n  amountOfTeamsInAGroupErrorContent: string;\r\n  amountOfTeamsGoOnInAGroup: number;\r\n  amountOfTeamsGoOnInAGroupError: boolean;\r\n  amountOfTeamsGoOnInAGroupErrorContent: string;\r\n}\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '5%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '5%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: true, label: 'Nam' },\r\n  { value: false, label: 'Nữ' },\r\n];\r\n\r\nlet sportOptions: IParams[] = [];\r\n\r\nlet competitionFormatOptions: IParams[] = [];\r\n\r\nclass CompetitionInfo extends React.Component<ICompetitionInfoProps, ICompetitionInfoState> {\r\n  private tabList: string[] = [];\r\n  private componentList: ReactNode[] = [];\r\n\r\n  constructor(props: ICompetitionInfoProps) {\r\n    super(props);\r\n    this.state = {\r\n      showJoinModal: false,\r\n      teamNameInForm: '',\r\n      playerEmailInForm: '',\r\n      teamNameInFormError: false,\r\n      teamNameInFormErrorContent: '',\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n      playerEmailInFormError: false,\r\n      playerEmailInFormErrorContent: '',\r\n      playerNameInFormError: false,\r\n      playerNameInFormErrorContent: '',\r\n      teamShortNameInForm: '',\r\n      teamShortNameInFormError: false,\r\n      onEditMode: false,\r\n      teamShortNameInFormErrorContent: '',\r\n      competitionFullName: '',\r\n      competitionFullNameError: false,\r\n      competitionFullNameErrorContent: '',\r\n      selectedSport: null,\r\n      onePhase: true,\r\n      twoPhase: false,\r\n      selectedCompetitionFormatPhase1: null,\r\n      selectedCompetitionFormatPhase2: null,\r\n      homeWayPhase2: false,\r\n      homeWayPhase1: false,\r\n      amountOfTeamsInAGroup: 2,\r\n      amountOfTeamsInAGroupError: false,\r\n      amountOfTeamsInAGroupErrorContent: '',\r\n      amountOfTeamsGoOnInAGroup: 1,\r\n      amountOfTeamsGoOnInAGroupError: false,\r\n      amountOfTeamsGoOnInAGroupErrorContent: '',\r\n      listPlayerInForm: [\r\n        {\r\n          name: 'Phan Trọng Nhân',\r\n          gender: 'Nam',\r\n          age: 23,\r\n          email: 'caulamgithelol.lmht@gmail.com',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionInfoProps, nextState: ICompetitionInfoState) {\r\n    if (nextProps.competitionInfo !== this.props.competitionInfo && nextProps.competitionInfo != null && nextProps.competitionInfo.Competition != null && (nextProps.competitionInfo.Competition as unknown as IParams).tournamentId != null) {\r\n      let params: IBigRequest = {\r\n        path: '',\r\n        param: {\r\n          id: (nextProps.competitionInfo.Competition as unknown as IParams).tournamentId,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.queryTournamentInfo(params);\r\n      params = {\r\n        path: '',\r\n        param: {\r\n          tournamentId: (nextProps.competitionInfo.Competition as unknown as IParams).tournamentId,\r\n          limit: 99,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.queryAllCompetitionsByTournamentId(params);\r\n      params = {\r\n        path: '',\r\n        param: {\r\n          id: (nextProps.competitionInfo.Competition as unknown as IParams).sportId,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.querySportInfo(params);\r\n      params = {\r\n        path: '',\r\n        param: {\r\n          competitionId: this.props.routerInfo.match.params.competitionId as number,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.queryFinalStageSetting(params);\r\n      params = {\r\n        path: '',\r\n        param: {\r\n          competitionId: this.props.routerInfo.match.params.competitionId as number,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.queryGroupStageSetting(params);\r\n    }\r\n    if (this.props.allSports !== nextProps.allSports) {\r\n      sportOptions = [];\r\n      nextProps.allSports.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n    }\r\n    if (this.props.allFormats !== nextProps.allFormats) {\r\n      competitionFormatOptions = [];\r\n      nextProps.allFormats.map((item, index) => competitionFormatOptions.push({ value: item.id, label: item.description }));\r\n    }\r\n    if ((this.props.competitionInfo !== nextProps.competitionInfo || this.props.tournamentInfo !== nextProps.tournamentInfo) && nextProps.competitionInfo != null && nextProps.competitionInfo.Competition != null && nextProps.tournamentInfo != null && nextProps.tournamentInfo.Tournament != null) {\r\n      if ((nextProps.competitionInfo.Competition as IParams).hasGroupStage === false) {\r\n        this.tabList = [\r\n          'Nhánh thi đấu vòng chung kết',\r\n          'Lịch thi đấu vòng chung kết',\r\n          'BXH vòng chung kết',\r\n          'Các đội tham gia'\r\n        ];\r\n        this.componentList = [\r\n          <BracketBoard competitionId={this.props.routerInfo.match.params.competitionId} finalStage={true} />,\r\n          <BracketSchedule competitionId={this.props.routerInfo.match.params.competitionId} finalStage={true} />,\r\n          <BracketRank competitionId={this.props.routerInfo.match.params.competitionId} finalStage={true} />,\r\n          <Teams competitionInfo={nextProps.competitionInfo} tournamentInfo={nextProps.tournamentInfo} id={(nextProps.competitionInfo.Competition as unknown as IParams).id as number} type={'competition'} />\r\n        ];\r\n      } else {\r\n        this.tabList = [\r\n          'Nhánh thi đấu vòng bảng',\r\n          'Lịch thi đấu vòng bảng',\r\n          'Nhánh thi đấu vòng chung kết',\r\n          'Lịch thi đấu vòng chung kết',\r\n          'Các đội tham gia'\r\n        ];\r\n        this.componentList = [\r\n          <BracketBoard competitionId={this.props.routerInfo.match.params.competitionId} finalStage={false} />,\r\n          <BracketSchedule competitionId={this.props.routerInfo.match.params.competitionId} finalStage={false} />,\r\n          <BracketBoard competitionId={this.props.routerInfo.match.params.competitionId} finalStage={true} />,\r\n          <BracketSchedule competitionId={this.props.routerInfo.match.params.competitionId} finalStage={true} />,\r\n          <Teams competitionInfo={nextProps.competitionInfo} tournamentInfo={nextProps.tournamentInfo} id={(nextProps.competitionInfo.Competition as unknown as IParams).id as number} type={'competition'} />\r\n        ];\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.routerInfo.match.params.competitionId as number,\r\n      },\r\n      data: {},\r\n    }\r\n    this.props.queryCompetition(params);\r\n    this.props.queryAllSports();\r\n    this.props.queryAllFormats();\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    const confirm = window.confirm('Bạn có chắc chắn muốn hủy form đăng ký?');\r\n    if (confirm === true) {\r\n      this.setState({\r\n        showJoinModal: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validateForm = () => {\r\n    let teamNameInFormError = false;\r\n    let teamNameInFormErrorContent = '';\r\n    let teamShortNameInFormErrorContent = '';\r\n    let teamShortNameInFormError = false;\r\n    if (this.state.teamNameInForm.trim() === '') {\r\n      teamNameInFormError = true;\r\n      teamNameInFormErrorContent = 'Tên đội không được trống';\r\n    }\r\n    if (this.state.teamShortNameInForm.trim() === '') {\r\n      teamShortNameInFormError = true;\r\n      teamShortNameInFormErrorContent = 'Tên ngắn đội không được trống';\r\n    }\r\n\r\n    return {\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    };\r\n  }\r\n\r\n  private validateAddPlayer = () => {\r\n    let playerEmailInFormErrorContent = '';\r\n    let playerEmailInFormError = false;\r\n    let playerNameInFormErrorContent = '';\r\n    let playerNameInFormError = false;\r\n    if (this.state.playerNameInForm.trim() === '') {\r\n      playerNameInFormError = true;\r\n      playerNameInFormErrorContent = 'Tên người chơi không được trống';\r\n    }\r\n    if (!config.regex.email.test(this.state.playerEmailInForm)) {\r\n      playerEmailInFormError = true;\r\n      playerEmailInFormErrorContent = 'Email không hợp lệ';\r\n    }\r\n\r\n    return {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    };\r\n  }\r\n\r\n  private handleConfirmModal = () => {\r\n    const {\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    } = this.validateForm();\r\n    this.setState({\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    });\r\n    if (teamNameInFormError === true || teamShortNameInFormError === true) {\r\n      return;\r\n    }\r\n    // this.props.registTeam();\r\n  };\r\n\r\n  private addPlayer = () => {\r\n    const {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    } = this.validateAddPlayer();\r\n    this.setState({\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    });\r\n    if (playerNameInFormError === true || playerEmailInFormError === true) {\r\n      return;\r\n    }\r\n    const listTemp = this.state.listPlayerInForm;\r\n    listTemp.push({\r\n      name: this.state.playerNameInForm,\r\n      age: this.state.playerAgeInForm,\r\n      email: this.state.playerEmailInForm,\r\n      gender: (this.state.playerGenderInForm as IParams).label,\r\n    });\r\n    this.setState({\r\n      listPlayerInForm: listTemp,\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerEmailInForm: '',\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n    });\r\n  }\r\n\r\n\r\n  private onChangeTeamNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onChangeTeamShortNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamShortNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onDeletePlayer = (indexx: number) => {\r\n    this.setState({\r\n      listPlayerInForm: this.state.listPlayerInForm.filter((item, index) => index !== indexx),\r\n    });\r\n  }\r\n\r\n  private onChangePlayerNameInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerNameInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerEmailInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerEmailInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerGenderInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({ playerGenderInForm: value, });\r\n  }\r\n\r\n  private onChangePlayerAgeInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value.target.value as unknown as number)) {\r\n      tempValue = Number(value.target.value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({\r\n      playerAgeInForm: tempValue,\r\n    });\r\n  }\r\n\r\n  private handleJoinTournament = () => {\r\n    this.setState({\r\n      showJoinModal: true,\r\n    });\r\n  };\r\n\r\n  private onChangeCompetitionFullName = (value: string) => {\r\n    this.setState({ competitionFullName: value, });\r\n  }\r\n\r\n  private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedSport: value,\r\n    });\r\n  }\r\n\r\n  private handleOpenEditCompetitionInfo = () => {\r\n    this.setState({\r\n      onEditMode: true,\r\n      competitionFullName: (this.props.competitionInfo!.Competition as unknown as IParams).name != null ? (this.props.competitionInfo!.Competition as unknown as IParams).name as string : '',\r\n      selectedSport: (this.props.competitionInfo!.Competition as unknown as IParams).sportId != null ?\r\n        (sportOptions.find(element => element.value === (this.props.competitionInfo!.Competition as unknown as IParams).sportId) != null ?\r\n          sportOptions.find(element => element.value === (this.props.competitionInfo!.Competition as unknown as IParams).sportId) as ValueType<OptionTypeBase> :\r\n          null) :\r\n        null,\r\n      onePhase: (this.props.competitionInfo!.Competition as unknown as IParams).hasGroupStage === false,\r\n      twoPhase: (this.props.competitionInfo!.Competition as unknown as IParams).hasGroupStage === true,\r\n      selectedCompetitionFormatPhase1: this.props.finalStageSetting != null && this.props.groupStageSetting != null ? ((this.props.competitionInfo!.Competition as unknown as IParams).hasGroupStage === false ? competitionFormatOptions.find(element => element.value === this.props.finalStageSetting!.formatId) : competitionFormatOptions.find(element => element.value === this.props.groupStageSetting!.formatId)) : null,\r\n      selectedCompetitionFormatPhase2: this.props.finalStageSetting != null ? (competitionFormatOptions.find(element => element.value === this.props.finalStageSetting!.formatId) as ValueType<OptionTypeBase>) : null,\r\n      homeWayPhase1: this.props.finalStageSetting != null && this.props.groupStageSetting != null ? ((this.props.competitionInfo!.Competition as unknown as IParams).hasGroupStage === false ? this.props.finalStageSetting.hasHomeMatch as boolean : this.props.groupStageSetting.hasHomeMatch as boolean) : false,\r\n      homeWayPhase2: this.props.finalStageSetting != null ? this.props.finalStageSetting.hasHomeMatch as boolean : false,\r\n      amountOfTeamsInAGroup: this.props.groupStageSetting != null ? this.props.groupStageSetting.maxTeamPerTable as number : 2,\r\n      amountOfTeamsGoOnInAGroup: this.props.groupStageSetting != null ? this.props.groupStageSetting.advanceTeamPerTable as number : 1,\r\n    });\r\n  }\r\n\r\n  private validateCompetitionInfo = () => {\r\n    let competitionFullNameError = false;\r\n    let competitionFullNameErrorContent = '';\r\n    if (this.state.competitionFullName.trim() === '') {\r\n      competitionFullNameError = true;\r\n      competitionFullNameErrorContent = 'Tên cuộc thi không được trống';\r\n    }\r\n    let tempList = this.props.allCompetitionByTournamentId!.slice(0);\r\n    const tempList2 = tempList.filter(element => element.id !== (this.props.competitionInfo!.Competition as IParams).id)\r\n    if (tempList2.find(element => element.name === this.state.competitionFullName) != null) {\r\n      competitionFullNameError = true;\r\n      competitionFullNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n    }\r\n\r\n    return { competitionFullNameError, competitionFullNameErrorContent };\r\n  }\r\n\r\n  private handleCloseEditCompetitionInfo = () => {\r\n    const { competitionFullNameError, competitionFullNameErrorContent } = this.validateCompetitionInfo();\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    this.setState({\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent,\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent,\r\n      competitionFullNameError,\r\n      competitionFullNameErrorContent,\r\n    });\r\n    if (competitionFullNameError === true || amountOfTeamsInAGroupError === true || amountOfTeamsGoOnInAGroupError === true) {\r\n      return;\r\n    }\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.routerInfo.match.params.competitionId as number,\r\n      },\r\n      data: {\r\n        description: (this.props.competitionInfo!.Competition as IParams).description,\r\n        hasGroupStage: this.state.onePhase === true ? false : true,\r\n        name: this.state.competitionFullName,\r\n        sportId: (this.state.selectedSport as IParams).value,\r\n        status: (this.props.competitionInfo!.Competition as IParams).status,\r\n        tournamentId: (this.props.competitionInfo!.Competition as IParams).tournamentId,\r\n        url: (this.props.competitionInfo!.Competition as IParams).url,\r\n      },\r\n    }\r\n    this.props.editCompetition(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        id: (this.props.finalStageSetting as IParams).id,\r\n      },\r\n      data: {\r\n        competitionId: this.props.routerInfo.match.params.competitionId as number,\r\n        formatId: this.state.twoPhase === true ? (this.state.selectedCompetitionFormatPhase2 as IParams).value : (this.state.selectedCompetitionFormatPhase1 as IParams).value,\r\n        hasHomeMatch: this.state.twoPhase === true ? this.state.homeWayPhase2 : this.state.homeWayPhase1,\r\n        status: (this.props.finalStageSetting as IParams).status,\r\n        url: (this.props.finalStageSetting as IParams).url,\r\n      },\r\n    };\r\n    this.props.editFinalStageSetting(params);\r\n    if (this.state.twoPhase === true) {\r\n      params = {\r\n        path: '',\r\n        param: {\r\n          id: (this.props.groupStageSetting as IParams).id,\r\n        },\r\n        data: {\r\n          competitionId: this.props.routerInfo.match.params.competitionId as number,\r\n          formatId: (this.state.selectedCompetitionFormatPhase1 as IParams).value,\r\n          hasHomeMatch: this.state.homeWayPhase1,\r\n          status: (this.props.groupStageSetting as IParams).status,\r\n          url: (this.props.groupStageSetting as IParams).url,\r\n          advanceTeamPerTable: this.state.amountOfTeamsGoOnInAGroup,\r\n          maxTeamPerTable: this.state.amountOfTeamsInAGroup,\r\n        },\r\n      };\r\n      this.props.editGroupStageSetting(params);\r\n    }\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        competitionId: this.props.routerInfo.match.params.competitionId as number,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.updateSchedule(params);\r\n    this.setState({\r\n      onEditMode: false,\r\n    });\r\n  }\r\n\r\n  private OnChoose1 = () => {\r\n    this.setState({\r\n      onePhase: true,\r\n      twoPhase: false,\r\n    });\r\n  }\r\n\r\n  private OnChoose2 = () => {\r\n    this.setState({\r\n      onePhase: false,\r\n      twoPhase: true,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase1 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase1: value,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase2 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase2: value,\r\n    });\r\n  }\r\n\r\n  private onChangeHomeWayPhase1 = () => {\r\n    this.setState({\r\n      homeWayPhase1: !this.state.homeWayPhase1,\r\n    });\r\n  };\r\n\r\n  private onChangeHomeWayPhase2 = () => {\r\n    this.setState({\r\n      homeWayPhase2: !this.state.homeWayPhase2,\r\n    });\r\n  };\r\n\r\n  private onChangeAmountOfTeamsInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsInAGroup: tempValue, });\r\n  }\r\n\r\n  private onChangeAmountOfTeamsGoOnInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsGoOnInAGroup: tempValue, });\r\n  }\r\n\r\n  private validateAmountOfTeamsInAGroup = () => {\r\n    let amountOfTeamsInAGroupError = false;\r\n    let amountOfTeamsInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsInAGroup < 2) {\r\n      amountOfTeamsInAGroupError = true;\r\n      amountOfTeamsInAGroupErrorContent = 'Số đội tối đa trong 1 bảng phải lớn hơn 1';\r\n    }\r\n\r\n    return { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent };\r\n  }\r\n\r\n  private onBlurAmountOfTeamsInAGroup = () => {\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private validateAmountOfTeamsGoOnInAGroup = () => {\r\n    let amountOfTeamsGoOnInAGroupError = false;\r\n    let amountOfTeamsGoOnInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsGoOnInAGroup < 1 || this.state.amountOfTeamsGoOnInAGroup >= this.state.amountOfTeamsInAGroup) {\r\n      amountOfTeamsGoOnInAGroupError = true;\r\n      amountOfTeamsGoOnInAGroupErrorContent = 'Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';\r\n    }\r\n\r\n    return { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent };\r\n  }\r\n\r\n  private onBlurAmountOfTeamsGoOnInAGroup = () => {\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    this.setState({\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsGoOnInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CompetitionInfo-Container\">\r\n        <div className=\"CompetitionInfo-content-container\">\r\n          <div className=\"CompetitionInfo-content-info-container\">\r\n            <div className=\"CompetitionInfo-content-info-basic-info-container\">\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-container\">\r\n                <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                  {this.state.onEditMode === false ?\r\n                    <p className=\"CompetitionInfo-name-text\">{this.props.competitionInfo != null && this.props.competitionInfo.Competition ? (this.props.competitionInfo.Competition as unknown as IParams).name : <Skeleton width={400} height={30} />}</p> :\r\n                    <TextInput style={{ width: 300 }} label={'Tên cuộc thi'} value={this.state.competitionFullName} onChangeText={this.onChangeCompetitionFullName} error={this.state.competitionFullNameError} errorContent={this.state.competitionFullNameErrorContent} />\r\n                  }\r\n                </div>\r\n                <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                  {\r\n                    this.state.onEditMode === false && <div className=\"CompetitionInfo-info-item\">\r\n                      <p>\r\n                        {this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Trạng thái: ${formatTournamentStatus((this.props.tournamentInfo.Tournament as unknown as IParams).status as string)}` : <Skeleton width={200} height={20} />}\r\n                      </p>\r\n                    </div>\r\n                  }\r\n                  <div className=\"CompetitionInfo-info-item\">\r\n                    {\r\n                      this.state.onEditMode === false ? <p>{this.props.sportInfo != null ? `Bộ môn thi đấu: ${this.props.sportInfo.fullName}` : <Skeleton width={200} height={20} />}</p> :\r\n                        (sportOptions.length > 0 &&\r\n                          <Select\r\n                            options={sportOptions}\r\n                            className=\"Select\"\r\n                            defaultValue={this.state.selectedSport}\r\n                            value={this.state.selectedSport}\r\n                            onChange={this.onChangeSport}\r\n                            maxMenuHeight={140}\r\n                          />)\r\n                    }\r\n                  </div>\r\n                </div>\r\n                {this.state.onEditMode === false && <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                  <div className=\"CompetitionInfo-info-item\">\r\n                    <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Thuộc giải: ${(this.props.tournamentInfo.Tournament as unknown as IParams).fullName}` : <Skeleton width={250} height={20} />}</p>\r\n                  </div>\r\n                </div>}\r\n                {\r\n                  this.state.onEditMode === true ?\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>Cách tổ chức giải:</p>\r\n                        <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose1} checked={this.state.onePhase} readOnly />\r\n                        <label onClick={this.OnChoose1}>1 giai đoạn</label>\r\n                        <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose2} checked={this.state.twoPhase} readOnly />\r\n                        <label onClick={this.OnChoose2}>2 giai đoạn</label>\r\n                      </div>\r\n                    </div> :\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>{this.props.competitionInfo != null && this.props.competitionInfo.Competition ? `Cách tổ chức giải: ${(this.props.competitionInfo.Competition as unknown as IParams).hasGroupStage === true ? '2 giai đoạn' : '1 giai đoạn'}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                }\r\n                {\r\n                  this.state.onEditMode === true ?\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>{`Thể thức${this.state.onePhase === true ? '' : ' vòng bảng'}`}</p>\r\n                        <Select\r\n                          options={competitionFormatOptions}\r\n                          className=\"Select\"\r\n                          defaultValue={this.state.selectedCompetitionFormatPhase1}\r\n                          value={this.state.selectedCompetitionFormatPhase1}\r\n                          onChange={this.onChangeCompetitionFormatPhase1}\r\n                          menuPlacement={'top'}\r\n                        />\r\n                      </div>\r\n                    </div> :\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>\r\n                          {\r\n                            this.props.competitionInfo != null && this.props.competitionInfo.Competition ?\r\n                              `${(this.props.competitionInfo.Competition as IParams).hasGroupStage === true ?\r\n                                'Thể thức vòng bảng: ' : 'Thể thức: '}\r\n                            ${\r\n                              this.props.groupStageSetting != null &&\r\n                                this.props.allFormats != null &&\r\n                                this.props.finalStageSetting != null &&\r\n                                this.props.allFormats.length > 0 &&\r\n                                this.props.allFormats.find(element => element.id === this.props.finalStageSetting!.formatId) != null &&\r\n                                this.props.allFormats.find(element => element.id === this.props.groupStageSetting!.formatId) != null ?\r\n                                ((this.props.competitionInfo.Competition as IParams).hasGroupStage !== true ? this.props.allFormats.find(element => element.id === this.props.finalStageSetting!.formatId)!.description :\r\n                                  this.props.allFormats.find(element => element.id === this.props.groupStageSetting!.formatId)!.description) : 'chưa có'\r\n                              }` : <Skeleton width={300} height={20} />}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                }\r\n                {\r\n                  this.state.onEditMode === true ?\r\n                    (this.state.selectedCompetitionFormatPhase1 != null &&\r\n                      (this.state.selectedCompetitionFormatPhase1 as IParams).value !== 2 &&\r\n                      <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                        <div className=\"CompetitionInfo-info-item\">\r\n                          <label className=\"Checkbox-label\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              checked={this.state.homeWayPhase1}\r\n                              onChange={this.onChangeHomeWayPhase1}\r\n                            />\r\n                            {`${(this.state.selectedCompetitionFormatPhase1 as IParams).value === 3 ? `${this.state.twoPhase === true ? 'Chơi lượt đi lượt về vòng bảng' : 'Chơi lượt đi lượt về'}` : `${this.state.twoPhase === true ? 'Có trận tranh hạng 3 vòng bảng' : 'Có trận tranh hạng 3'}`}`}\r\n                          </label>\r\n                        </div>\r\n                      </div>) :\r\n                    (this.props.competitionInfo != null && this.props.competitionInfo.Competition && ((this.props.competitionInfo.Competition as unknown as IParams).hasGroupStage === true ?\r\n                      this.props.groupStageSetting != null && this.props.groupStageSetting.formatId !== 2 && <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                        <div className=\"CompetitionInfo-info-item\">\r\n                          <p>\r\n                            {\r\n                              this.props.groupStageSetting.hasHomeMatch === true ?\r\n                                (this.props.groupStageSetting.formatId === 1 ? 'Có trận tranh hạng 3 vòng bảng' : 'Có chơi lượt đi lượt về vòng bảng') :\r\n                                (this.props.groupStageSetting.formatId === 1 ? 'Không có trận tranh hạng 3 vòng bảng' : 'Không chơi lượt đi lượt về vòng bảng')\r\n                            }\r\n                          </p>\r\n                        </div>\r\n                      </div> : (this.props.finalStageSetting != null && this.props.finalStageSetting.formatId !== 2 && <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                        <div className=\"CompetitionInfo-info-item\">\r\n                          <p>\r\n                            {\r\n                              this.props.finalStageSetting.hasHomeMatch === true ?\r\n                                (this.props.finalStageSetting.formatId === 1 ? 'Có trận tranh hạng 3' : 'Có chơi lượt đi lượt về') :\r\n                                (this.props.finalStageSetting.formatId === 1 ? 'Không có trận tranh hạng 3' : 'Không chơi lượt đi lượt về')\r\n                            }\r\n                          </p>\r\n                        </div>\r\n                      </div>)))\r\n                }\r\n                {this.state.onEditMode === true ? (this.state.twoPhase === true &&\r\n                  <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                    <div className=\"CompetitionInfo-info-item\">\r\n                      <TextInput\r\n                        style={{ width: 250 }}\r\n                        label={'Số đội trong 1 bảng (lớn hơn 1)'}\r\n                        value={this.state.amountOfTeamsInAGroup as unknown as string}\r\n                        onChangeText={this.onChangeAmountOfTeamsInAGroup}\r\n                        error={this.state.amountOfTeamsInAGroupError}\r\n                        errorContent={this.state.amountOfTeamsInAGroupErrorContent}\r\n                        onBlur={this.onBlurAmountOfTeamsInAGroup}\r\n                      />\r\n                    </div>\r\n                    <div className=\"CompetitionInfo-info-item\">\r\n                      <TextInput\r\n                        style={{ width: 300 }}\r\n                        label={'Số đội đi tiếp trong 1 bảng (lớn hơn 0)'}\r\n                        value={this.state.amountOfTeamsGoOnInAGroup as unknown as string}\r\n                        onChangeText={this.onChangeAmountOfTeamsGoOnInAGroup}\r\n                        error={this.state.amountOfTeamsGoOnInAGroupError}\r\n                        errorContent={this.state.amountOfTeamsGoOnInAGroupErrorContent}\r\n                        onBlur={this.onBlurAmountOfTeamsGoOnInAGroup}\r\n                      />\r\n                    </div>\r\n                  </div>) :\r\n                  (this.props.competitionInfo != null &&\r\n                    this.props.competitionInfo.Competition &&\r\n                    (this.props.competitionInfo.Competition as IParams).hasGroupStage === true &&\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>Số đội trong 1 bảng: {this.props.groupStageSetting != null ? this.props.groupStageSetting.maxTeamPerTable as number : 2}</p>\r\n                      </div>\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>Số đội đi tiếp trong 1 bảng: {this.props.groupStageSetting != null ? this.props.groupStageSetting.advanceTeamPerTable as number : 1}</p>\r\n                      </div>\r\n                    </div>)\r\n                }\r\n                {this.state.onEditMode === true ? (\r\n                  <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                    <div className=\"CompetitionInfo-info-item\">\r\n                      {this.state.twoPhase === true && <p>Thể thức vòng chung kết</p>}\r\n                      {this.state.twoPhase === true && <Select\r\n                        options={competitionFormatOptions}\r\n                        className=\"Select\"\r\n                        defaultValue={this.state.selectedCompetitionFormatPhase2}\r\n                        value={this.state.selectedCompetitionFormatPhase2}\r\n                        onChange={this.onChangeCompetitionFormatPhase2}\r\n                        menuPlacement={'top'}\r\n                      />}\r\n                    </div>\r\n                  </div>) :\r\n                  (this.props.competitionInfo != null && this.props.competitionInfo.Competition != null && (this.props.competitionInfo.Competition as IParams).hasGroupStage === true &&\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>Thể thức vòng chung kết: {\r\n                          this.props.allFormats != null &&\r\n                          this.props.finalStageSetting != null &&\r\n                          this.props.allFormats.length > 0 &&\r\n                          this.props.allFormats.find(element => element.id === this.props.finalStageSetting!.formatId) != null &&\r\n                          this.props.allFormats.find(element => element.id === this.props.finalStageSetting!.formatId)!.description\r\n                        }\r\n                        </p>\r\n                      </div>\r\n                    </div>)\r\n                }\r\n                {this.state.onEditMode === false ?\r\n                  this.props.competitionInfo != null && this.props.competitionInfo.Competition != null && (this.props.competitionInfo.Competition as IParams).hasGroupStage === true && this.props.finalStageSetting != null && this.props.finalStageSetting.formatId !== 2 && (this.props.finalStageSetting.formatId === 3 ?\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>{this.props.finalStageSetting.hasHomeMatch === true ? 'Chơi lượt đi lượt về vòng chung kết' : 'Không chơi lượt đi lượt về vòng chung kết'}</p>\r\n                      </div>\r\n                    </div> : <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <p>{this.props.finalStageSetting.hasHomeMatch === true ? 'Có trận tranh hạng 3 vòng chung kết' : 'Không có trận tranh hạng 3 vòng chung kết'}</p>\r\n                      </div>\r\n                    </div>)\r\n                  : (this.state.twoPhase === true && (this.state.selectedCompetitionFormatPhase2 as IParams).value !== 2 && ((this.state.selectedCompetitionFormatPhase2 as IParams).value === 3 ?\r\n                    <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <label className=\"Checkbox-label\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={this.state.homeWayPhase2}\r\n                            onChange={this.onChangeHomeWayPhase2}\r\n                          />\r\n                      Chơi lượt đi lượt về vòng chung kết\r\n                    </label>\r\n                      </div>\r\n                    </div> : <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"CompetitionInfo-info-item\">\r\n                        <label className=\"Checkbox-label\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={this.state.homeWayPhase2}\r\n                            onChange={this.onChangeHomeWayPhase2}\r\n                          />\r\n                      Có trận tranh hạng 3 vòng chung kết\r\n                    </label>\r\n                      </div>\r\n                    </div>))}\r\n              </div>\r\n            </div>\r\n            {/* {(this.state.onEditMode === false\r\n              ?\r\n              <div className=\"CompetitionInfo-login-container\">\r\n                <div\r\n                  className=\"CompetitionInfo-login\"\r\n                  onClick={this.handleOpenEditCompetitionInfo}\r\n                >\r\n                  <h4 className=\"CompetitionInfo-login-text\">Chỉnh sửa thông tin</h4>\r\n                </div>\r\n              </div> : <div className=\"CompetitionInfo-login-container\">\r\n                <div\r\n                  className=\"CompetitionInfo-login\"\r\n                  onClick={this.handleCloseEditCompetitionInfo}\r\n                >\r\n                  <h4 className=\"CompetitionInfo-login-text\">Lưu chỉnh sửa</h4>\r\n                </div>\r\n              </div>)} */}\r\n            {this.props.competitionInfo != null && this.props.competitionInfo.Competition != null && this.props.competitionInfo.Config != null && cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && ((this.props.competitionInfo.Config as unknown as IParams).canEdit !== true ?\r\n              ((this.props.competitionInfo.Competition as unknown as IParams).status === 'opening' &&\r\n                <div className=\"CompetitionInfo-login-container\">\r\n                  <div\r\n                    className=\"CompetitionInfo-login\"\r\n                    onClick={this.handleJoinTournament}\r\n                  >\r\n                    <h4 className=\"CompetitionInfo-login-text\">Tham gia cuộc thi</h4>\r\n                  </div>\r\n                </div>) :\r\n              (((this.props.competitionInfo.Competition as unknown as IParams).status === 'opening' || (this.props.competitionInfo.Competition as unknown as IParams).status === 'initializing')\r\n                && (this.state.onEditMode === false\r\n                  ?\r\n                  <div className=\"CompetitionInfo-login-container\">\r\n                    <div\r\n                      className=\"CompetitionInfo-login\"\r\n                      onClick={this.handleOpenEditCompetitionInfo}\r\n                    >\r\n                      <h4 className=\"CompetitionInfo-login-text\">Chỉnh sửa thông tin</h4>\r\n                    </div>\r\n                  </div> : <div className=\"CompetitionInfo-login-container\">\r\n                    <div\r\n                      className=\"CompetitionInfo-login\"\r\n                      onClick={this.handleCloseEditCompetitionInfo}\r\n                    >\r\n                      <h4 className=\"CompetitionInfo-login-text\">Lưu chỉnh sửa</h4>\r\n                    </div>\r\n                  </div>)))\r\n            }\r\n            <div className=\"CompetitionInfo-content-info-advanced-info-container\">\r\n              <CustomTab tabList={this.tabList} componentList={this.componentList} selectedIndex={0}></CustomTab>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <CustomModal\r\n          customStyles={customStyles}\r\n          handleCloseModal={this.handleCloseModal}\r\n          showModal={this.state.showJoinModal}\r\n          handleConfirmModal={this.handleConfirmModal}\r\n        >\r\n          <div className={'TournamentInfo-join-tournament-form-competition-header'}>\r\n            <h3>Form đăng ký dự thi</h3>\r\n          </div>\r\n          <TextInput label={'Tên đội'} value={this.state.teamNameInForm} onChangeText={this.onChangeTeamNameInForm} error={this.state.teamNameInFormError} errorContent={this.state.teamNameInFormErrorContent} />\r\n          <TextInput label={'Tên ngắn đội'} value={this.state.teamShortNameInForm} onChangeText={this.onChangeTeamShortNameInForm} error={this.state.teamShortNameInFormError} errorContent={this.state.teamShortNameInFormErrorContent} />\r\n          <div className=\"TournamentInfo-join-tournament-container\">\r\n            <div className=\"TournamentInfo-join-tournament-item1\">\r\n              <p>Tên</p>\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item2\">\r\n              <p>Giới tính</p>\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item2\">\r\n              <p>Tuổi</p>\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item1\">\r\n              <p>Email</p>\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-setting\">\r\n            </div>\r\n          </div>\r\n          {this.state.listPlayerInForm.map((item, index) => <Player onDelete={this.onDeletePlayer} info={item} freeToEdit={true} key={index} index={index} />)}\r\n          <div className=\"TournamentInfo-join-tournament-container\">\r\n            <div className=\"TournamentInfo-join-tournament-item1\">\r\n              <input type={'text'} onChange={this.onChangePlayerNameInForm} value={this.state.playerNameInForm} />\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item2\">\r\n              <Select\r\n                options={genderOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.playerGenderInForm}\r\n                value={this.state.playerGenderInForm}\r\n                onChange={this.onChangePlayerGenderInForm}\r\n              />\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item2\">\r\n              <input style={{ width: '70px' }} type={'text'} onChange={this.onChangePlayerAgeInForm} value={this.state.playerAgeInForm} />\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-item1\">\r\n              <input type={'text'} onChange={this.onChangePlayerEmailInForm} value={this.state.playerEmailInForm} />\r\n            </div>\r\n            <div className=\"TournamentInfo-join-tournament-setting\">\r\n              <IoMdAddCircleOutline color={'white'} size={25} style={{ marginLeft: '3px', marginRight: '3px' }} onClick={this.addPlayer} />\r\n            </div>\r\n          </div>\r\n          {this.state.playerNameInFormError === true && <p style={{ color: 'red' }}>{this.state.playerNameInFormErrorContent}</p>}\r\n          {this.state.playerEmailInFormError === true && <p style={{ color: 'red' }}>{this.state.playerEmailInFormErrorContent}</p>}\r\n        </CustomModal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    competitionInfo: state.competitionInfo,\r\n    tournamentInfo: state.tournamentInfo,\r\n    allSports: state.allSports,\r\n    sportInfo: state.sportInfo,\r\n    groupStageSetting: state.groupStageSetting,\r\n    finalStageSetting: state.finalStageSetting,\r\n    allFormats: state.allFormats,\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    editGroupStageSetting,\r\n    editFinalStageSetting,\r\n    editCompetition,\r\n    queryAllFormats,\r\n    queryCompetition,\r\n    queryTournamentInfo,\r\n    queryAllSports,\r\n    querySportInfo,\r\n    queryFinalStageSetting,\r\n    queryGroupStageSetting,\r\n    queryAllCompetitionsByTournamentId,\r\n    updateSchedule,\r\n  }\r\n)(CompetitionInfo);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { IParams } from 'interfaces/common';\r\nimport './styles.css';\r\n\r\ninterface IUserOverviewProps extends React.ClassAttributes<UserOverview> {\r\n  info: IParams;\r\n  index: number;\r\n}\r\n\r\ninterface IUserOverviewState {\r\n}\r\n\r\nclass UserOverview extends React.Component<IUserOverviewProps, IUserOverviewState> {\r\n  constructor(props: IUserOverviewProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { info } = this.props;\r\n    return (\r\n      <Link to={`/user/${this.props.info.id}`} style={{ textDecoration: 'none' }}>\r\n        <div className=\"UserOverview-container\">\r\n          <div className=\"UserOverview-avatar-image-container\">\r\n            <div className=\"UserOverview-avatar-container\">\r\n              <img className={'UserOverview-avatar-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n            </div>\r\n            <div className=\"UserOverview-name-container\">\r\n              <p className=\"UserOverview-name-text\">{`${info.firstName} ${info.lastName}`}</p>\r\n              <p>{`Email: ${info.email}`}</p>\r\n              {info.phoneNumber != null && <p>{`Số điện thoại: ${info.phoneNumber}`}</p>}\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"UserOverview-info-container\">\r\n            <div className=\"UserOverview-info-item\">\r\n              <FaRunning size={25} color={'white'} />\r\n              <p className=\"UserOverview-text\">Bóng bàn, cờ vua, ...</p>\r\n            </div>\r\n            <div className=\"UserOverview-info-item\">\r\n              <IoIosPeople size={25} color={'white'} />\r\n              <p className=\"UserOverview-text\">10 Đội tham gia</p>\r\n            </div>\r\n            <div className=\"UserOverview-info-item\">\r\n              <p>Khai mạc ngày: {info.openingTime}</p>\r\n            </div>\r\n            <div className=\"UserOverview-info-item\">\r\n              <p>Bế mạc ngày: {info.closingTime}</p>\r\n            </div>\r\n            <div className=\"UserOverview-info-item\">\r\n              <p>Tiến trình giải: 15%</p>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  null\r\n)(UserOverview);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport 'pagination.css';\r\nimport UserOverview from 'components/UserOverview';\r\nimport Paging from 'components/Paging';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { searchUsers } from 'components/Header/actions';\r\nimport { queryListUsers } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IAllUsersProps extends React.ClassAttributes<AllUsers> {\r\n  listUsers: IParams | null;\r\n  globalSearchString: string;\r\n\r\n  queryListUsers(param: IBigRequest): void;\r\n  searchUsers(param: IBigRequest): void;\r\n}\r\n\r\ninterface IAllUsersState {\r\n  activePage: number;\r\n}\r\n\r\nclass AllUsers extends React.Component<IAllUsersProps, IAllUsersState> {\r\n  constructor(props: IAllUsersProps) {\r\n    super(props);\r\n    this.state = {\r\n      activePage: 1,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IAllUsersProps, nextState: IAllUsersState) {\r\n    if (this.props.globalSearchString !== nextProps.globalSearchString && nextProps.globalSearchString === '') {\r\n      this.requestData();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.globalSearchString === '') {\r\n      this.requestData();\r\n    }\r\n  }\r\n  \r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        page: this.state.activePage,\r\n        limit: 3,\r\n        searchString: this.props.globalSearchString,\r\n      },\r\n      data: {},\r\n    }\r\n    this.props.queryListUsers(params);\r\n  }\r\n\r\n  private onChangeSelectedPage = (pageNumber: number) => {\r\n    this.setState({ activePage: pageNumber }, () => {\r\n      if (this.props.globalSearchString !== '') {\r\n        const params = {\r\n          path: '',\r\n          param: {\r\n            page: pageNumber,\r\n            limit: 3,\r\n            searchString: this.props.globalSearchString,\r\n          },\r\n          data: {},\r\n        };\r\n        this.props.searchUsers(params);\r\n      } else {\r\n        this.requestData();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AllUsers-container-container\">\r\n        <p className=\"AllUsers-header-text\">Danh sách người dùng</p>\r\n        {this.props.globalSearchString !== '' && <p className=\"AllUsers-search-text\">Kết quả tìm kiếm cho: \"{this.props.globalSearchString}\"</p>}\r\n        <div className=\"AllUsers-container\">\r\n          {this.props.listUsers && this.props.listUsers.Users ? ((this.props.listUsers.Users as unknown as IParams[]).length > 0 ? (this.props.listUsers.Users as unknown as IParams[]).map(\r\n            (item, index) => <UserOverview info={item} index={index} key={index} />) : <p>Không tìm thấy kết quả nào!</p>) :\r\n            <Skeleton />\r\n          }\r\n        </div>\r\n        <Paging currentPage={this.state.activePage} totalPage={this.props.listUsers != null ? this.props.listUsers.TotalPage as number : 0} onChangeSelectedPage={this.onChangeSelectedPage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    listUsers: state.listUsers,\r\n    globalSearchString: state.globalSearchString,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryListUsers, searchUsers }\r\n)(AllUsers);","import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_LIST_USER } from \"redux-saga/actions\";\r\nimport { QUERY_LIST_USER_SUCCESS, QUERY_LIST_USER_FAILED } from \"./reducers\";\r\n\r\nexport const queryListUsers = (data: IBigRequest) => ({\r\n  type: QUERY_LIST_USER,\r\n  response: {\r\n    success: QUERY_LIST_USER_SUCCESS,\r\n    failed: QUERY_LIST_USER_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route, Redirect, Router } from 'react-router-dom';\r\nimport { CookiesProvider } from 'react-cookie';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-block-ui/style.css';\r\nimport history from \"utils/history\";\r\nimport Login from 'screens/Login';\r\nimport SignUp from 'screens/SignUp';\r\nimport ForgotPassword from 'screens/ForgotPassword';\r\nimport Home from 'screens/Home';\r\nimport TournamentInfo from 'screens/TournamentInfo';\r\nimport Header from 'components/Header';\r\nimport Content from 'components/Content';\r\nimport UserInfo from 'screens/UserInfo';\r\nimport ChangePassword from 'screens/ChangePassword';\r\nimport AllTournaments from 'components/AllTournaments';\r\nimport CreateNewTournament from 'screens/CreateNewTournament';\r\nimport ActiveAccount from 'screens/ActiveAccount';\r\nimport CompetitionInfo from 'screens/CompetitionInfo';\r\nimport AllUsers from 'components/AllUsers';\r\nimport { setGlobalSearchString } from 'redux-saga/global-actions/SetGlobalSearchString-actions';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport './App.css';\r\nimport { cookies } from 'utils/cookies';\r\nimport { COOKIES_TYPE } from 'global';\r\n\r\ninterface IAppProps extends React.ClassAttributes<App> {\r\n  setGlobalSearchString(params: string): void;\r\n}\r\n\r\ninterface IAppState {\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container\">\r\n        <CookiesProvider>\r\n          <Router history={history}>\r\n            <Switch>\r\n              <Route exact path={[\"/\", \"/home\"]} render={() => <Header currentPage={'home'} />} />\r\n              <Route path=\"/tournament/:tournamentId\" render={() => <Header currentPage={'tournamentInfo'} />} />\r\n              <Route path=\"/signUp\" render={() => <Header currentPage={'signUp'} />} />\r\n              <Route path=\"/user/:userId\" render={() => <Header currentPage={'userInfo'} />} />\r\n              <Route path=\"/users\" render={() => <Header currentPage={'users'} />} />\r\n              <Route path=\"/tournaments\" render={() => <Header currentPage={'tournaments'} />} />\r\n              <Route path=\"/login\" render={() => <Header currentPage={'login'} />} />\r\n              <Route path=\"/forgotPassword\" render={() => <Header currentPage={'forgotPassword'} />} />\r\n              <Route path=\"/newTournament\" render={() => <Header currentPage={'newTournament'} />} />\r\n              <Route path=\"/changePassword\" render={() => <Header currentPage={'changePassword'} />} />\r\n              <Route path=\"/active/:tokenVerify\" render={() => <Header currentPage={'active'} />} />\r\n              <Route path=\"/competition/:competitionId\" render={() => <Header currentPage={'competitionInfo'} />} />\r\n            </Switch>\r\n            <Content transparent={false}>\r\n              <Switch>\r\n                <Route exact path={[\"/\", \"/home\"]} render={() => <Home />} />\r\n                <Route path=\"/tournament/:tournamentId\" render={(info) => <TournamentInfo routerInfo={info} />} />\r\n                <Route path=\"/tournaments\" render={() => <AllTournaments />} />\r\n                <Route path=\"/signUp\" render={() => { return cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? <Redirect to=\"/\" /> : <SignUp />; }} />\r\n                <Route path=\"/forgotPassword\" render={() => <ForgotPassword />} />\r\n                <Route path=\"/login\" render={() => { return cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null ? <Redirect to=\"/\" /> : <Login />; }} />\r\n                <Route path=\"/user/:userId\" render={(info) => <UserInfo routerInfo={info} />} />\r\n                <Route path=\"/users\" render={() => <AllUsers />} />\r\n                <Route path=\"/newTournament\" render={() => { return cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null ? <Redirect to=\"/login\" /> : <CreateNewTournament />; }} />\r\n                <Route path=\"/changePassword\" render={() => { return cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null ? <Redirect to=\"/login\" /> : <ChangePassword />; }} />\r\n                <Route path=\"/active/:tokenVerify\" render={(info) => <ActiveAccount routerInfo={info} />} />\r\n                <Route path=\"/competition/:competitionId\" render={(info) => <CompetitionInfo routerInfo={info} />} />\r\n                <Route render={() => <Redirect to=\"/\" />} />\r\n              </Switch>\r\n              <ToastContainer />\r\n            </Content>\r\n          </Router>\r\n        </CookiesProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    currentPage: state.currentPage,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setGlobalSearchString }\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Favicon from 'react-favicon';\r\nimport store from './redux-saga/store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider store={store}>\r\n    <Favicon url={require('./assets/logo.png')} animated={true} />\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.15695b44.png\";"],"sourceRoot":""}